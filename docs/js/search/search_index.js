var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/AccountEntity.html",[0,1.685,1,2.207]],["body/entities/AccountEntity.html",[0,1.255,1,2.443,2,0.911,3,0.112,4,0.112,5,0.093,6,2.736,7,0.628,8,0.298,9,0.888,10,1.122,11,1.387,12,4.058,13,0.861,14,4.852,15,3.787,16,4.058,17,1.615,18,1.27,19,2.792,20,3.787,21,0.703,22,0.012,23,3.226,24,1.675,25,2.736,26,4.066,27,5.351,28,3.073,29,2.078,30,4.058,31,0.88,32,3.125,33,2.386,34,3.125,35,3.729,36,3.787,37,2.48,38,3.066,39,4.192,40,2.652,41,4.192,42,3.125,43,3.583,44,2.289,45,2.736,46,3.607,47,1.398,48,3.125,49,1.285,50,2.136,51,3.125,52,2.289,53,3.542,54,2.48,55,3.174,56,2.682,57,3.125,58,1.742,59,2.289,60,3.401,61,3.401,62,2.48,63,3.125,64,2.48,65,3.125,66,0.236,67,3.174,68,0.655,69,4.192,70,3.401,71,3.685,72,3.174,73,3.174,74,2.136,75,1.173,76,1.255,77,2.736,78,1.439,79,2.009,80,3.125,81,0.103,82,0.146,83,2.136,84,1.453,85,4.066,86,0.006,87,0.006]],["title/controllers/AccountsController.html",[88,1.95,89,3.073]],["body/controllers/AccountsController.html",[1,1.718,2,0.952,3,0.118,4,0.118,5,0.098,7,0.602,8,0.312,10,1.055,11,0.534,13,1.162,17,2.238,18,1.437,19,4.144,21,0.549,22,0.012,24,1.437,31,0.755,66,0.272,68,0.684,78,2.464,81,0.107,82,0.153,86,0.006,87,0.006,88,1.518,89,3.514,90,1.461,91,2.86,92,1.798,93,2.392,94,1.398,95,2.517,96,3.457,97,3.457,98,3.284,99,3.457,100,2.592,101,4.283,102,4.165,103,3.266,104,1.827,105,3.256,106,1.719,107,2.44,108,1.986,109,3.808,110,3.266,111,4.073,112,1.986,113,4.59,114,3.266,115,2.913,116,1.986,117,4.59,118,3.808,119,3.266,120,3.514,121,2.1,122,3.887,123,2.741,124,2.392,125,3.279,126,2.592,127,2.392,128,2.392,129,2.392,130,0.684,131,3.103,132,2.392,133,1.646,134,1.718,135,1.986,136,2.592,137,1.886,138,4.028,139,2.86,140,3.266,141,3.266,142,2.392,143,2.392,144,2.233,145,1.619,146,3.266,147,4.513,148,3.266,149,3.266,150,3.266]],["title/modules/AccountsModule.html",[151,1.475,152,2.697]],["body/modules/AccountsModule.html",[1,2.738,2,1.517,3,0.187,4,0.187,5,0.155,7,0.554,22,0.012,66,0.29,81,0.171,82,0.244,86,0.009,87,0.009,89,5.313,90,2.955,130,1.091,138,5.471,139,4.557,151,2.321,152,5.367,153,2.419,154,3.328,155,4.557,156,4.557,157,4.557,158,4.557,159,4.646,160,3.635,161,2.738,162,2.738,163,5.205,164,3.474,165,3.474,166,3.635,167,3.558,168,2.738,169,3.558,170,5.205,171,5.205]],["title/injectables/AccountsService.html",[138,2.697,172,1.187]],["body/injectables/AccountsService.html",[0,1.794,1,2.011,2,0.517,3,0.064,4,0.064,5,0.053,7,0.586,8,0.169,9,0.568,10,1.077,11,0.879,13,1.189,14,2.598,17,1.302,18,1.47,19,3.911,21,0.613,22,0.012,24,0.407,28,3.074,29,0.794,31,0.811,38,1.279,40,1.95,43,1.495,58,2.913,66,0.224,75,0.666,76,0.713,78,0.55,81,0.058,82,0.139,86,0.004,87,0.004,93,1.3,94,0.865,95,2.416,96,2.324,97,2.324,98,2.208,99,2.324,104,1.869,106,1.704,107,2.305,108,1.079,111,3.782,112,1.079,115,3.564,116,1.079,123,2.723,130,0.372,134,0.934,138,1.907,145,1.741,168,0.934,169,1.213,172,0.839,173,0.794,174,1.554,175,4.969,176,3.529,177,3.823,178,2.613,179,3.823,180,2.613,181,3.823,182,1.234,183,1.775,184,2.87,185,1.775,186,1.775,187,2.355,188,1.775,189,1.3,190,4.176,191,1.775,192,2.157,193,4.378,194,3.272,195,4.697,196,1.775,197,1.3,198,4.121,199,1.775,200,2.8,201,1.714,202,2.613,203,1.775,204,4.382,205,1.775,206,1.775,207,1.213,208,3.665,209,1.775,210,1.775,211,1.775,212,1.775,213,2.967,214,1.775,215,1.775,216,1.3,217,1.3,218,1.3,219,1.213,220,1.554,221,1.3,222,0.894,223,2.173,224,1.775,225,4.525,226,3.266,227,3.64,228,2.457,229,1.775,230,1.775,231,1.775,232,1.775,233,1.775,234,3.823,235,1.775,236,2.89,237,2.967,238,2.173,239,2.873,240,2.07,241,2.967,242,2.967,243,1.213,244,1.775,245,2.028,246,1.775,247,1.3,248,1.3,249,1.409,250,1.409,251,1.025,252,0.624,253,1.409,254,1.409,255,1.409,256,1.409,257,1.409,258,2.8,259,1.3,260,1.3,261,1.554,262,1.3,263,1.775,264,2.598,265,1.775,266,1.775,267,2.967,268,2.967,269,2.173,270,2.173,271,2.208,272,4.467,273,1.775,274,1.3,275,1.3,276,1.775,277,1.775,278,2.173,279,1.775,280,1.775,281,2.173]],["title/classes/AllExceptionFilter.html",[82,0.197,282,3.33]],["body/classes/AllExceptionFilter.html",[3,0.159,4,0.159,5,0.132,8,0.421,9,1.133,11,1.094,13,0.817,18,1.01,21,0.519,22,0.012,31,0.713,40,1.6,66,0.257,81,0.145,82,0.206,86,0.008,87,0.008,94,1.726,104,1.284,106,1.209,122,3.012,125,3.012,130,0.923,131,2.048,145,1.139,192,1.769,222,2.22,228,2.623,240,2.429,271,4.131,282,4.701,283,0.869,284,5.858,285,3.497,286,3.116,287,5.858,288,3.519,289,5.63,290,5.923,291,4.406,292,5.186,293,4.439,294,3.864,295,6.264,296,4.406,297,5.858,298,5.31,299,4.406,300,5.858,301,5.923,302,4.406,303,3.012,304,3.227,305,3.012,306,3.858,307,3.858,308,4.406,309,2.545,310,3.858,311,5.858,312,5.923,313,3.858,314,4.406,315,6.264,316,3.858,317,3.497,318,5.923,319,4.406,320,4.406,321,4.406,322,3.858,323,4.406,324,3.858,325,4.406,326,4.406,327,4.406,328,3.858,329,4.406,330,3.858,331,3.858]],["title/controllers/AppController.html",[88,1.95,332,3.073]],["body/controllers/AppController.html",[3,0.151,4,0.151,5,0.126,7,0.593,8,0.401,10,0.875,11,1.269,22,0.012,24,0.964,28,1.88,31,0.506,66,0.264,68,0.881,75,2.153,81,0.138,82,0.197,86,0.008,87,0.008,88,1.954,90,1.88,92,2.313,94,1.672,106,1.153,107,1.892,115,1.954,121,2.702,123,2.666,130,0.881,145,1.086,182,1.748,288,4.154,294,2.427,332,4.201,333,3.68,334,6.43,335,4.203,336,4.203,337,5.737,338,4.203,339,3.68,340,5.737,341,4.203,342,5.737,343,5.737,344,5.737,345,5.737,346,5.737,347,3.336,348,2.818,349,3.336,350,4.203,351,4.203,352,4.553,353,4.203,354,5.737,355,5.737,356,5.737,357,4.203,358,4.203,359,4.203,360,4.203,361,4.203,362,3.336,363,4.203,364,4.201,365,4.203,366,4.203,367,4.203,368,4.203,369,4.203,370,4.203,371,2.313,372,4.203,373,2.702,374,4.203,375,4.203,376,3.078,377,4.203,378,3.078,379,2.873]],["title/modules/AppModule.html",[151,1.475,380,3.073]],["body/modules/AppModule.html",[3,0.144,4,0.144,5,0.119,7,0.485,22,0.012,47,1.784,66,0.298,81,0.131,82,0.187,86,0.007,87,0.007,90,2.475,95,1.274,130,0.835,151,1.944,152,4.795,153,1.853,154,2.787,159,4.307,160,3.045,161,2.097,162,2.097,164,2.097,165,2.91,294,2.303,332,4.653,347,3.164,348,3.072,349,3.164,373,2.563,380,6.221,381,3.491,382,3.491,383,5.098,384,4.795,385,5.098,386,5.098,387,5.098,388,4.795,389,3.987,390,5.532,391,3.987,392,3.491,393,5.532,394,3.164,395,2.563,396,5.532,397,3.491,398,3.491,399,3.987,400,3.491,401,3.987,402,3.987,403,3.987,404,3.987,405,3.987,406,3.987,407,2.675,408,3.045,409,2.92,410,3.987,411,3.987,412,3.987,413,3.987,414,2.725,415,2.92,416,2.92,417,1.719,418,2.92,419,2.92,420,2.92,421,2.424]],["title/controllers/AuthController.html",[88,1.95,422,3.073]],["body/controllers/AuthController.html",[3,0.075,4,0.075,5,0.062,7,0.612,8,0.2,10,1.099,11,0.701,13,1.287,17,1.86,18,1.591,21,0.631,22,0.012,24,1.591,31,0.836,66,0.23,68,0.438,78,2.382,81,0.069,82,0.098,86,0.005,87,0.005,88,0.972,90,0.935,92,1.151,94,0.99,95,2.623,102,1.531,104,2.022,105,3.453,106,1.904,107,2.588,115,2.523,120,3.975,121,1.344,122,3.373,123,2.743,124,1.531,125,2.321,127,1.531,128,1.531,129,1.531,130,0.438,131,3.723,132,1.531,134,1.1,135,1.271,137,1.207,142,3.614,143,1.531,145,1.705,161,1.786,162,1.1,182,0.869,228,1.507,236,2.073,288,2.255,417,2.128,422,2.487,423,1.83,424,1.83,425,2.973,426,2.973,427,3.395,428,2.182,429,2.973,430,4.287,431,2.973,432,4.287,433,4.287,434,4.287,435,2.973,436,2.09,437,3.373,438,3.395,439,2.09,440,1.83,441,3.373,442,3.395,443,2.09,444,2.09,445,3.395,446,2.09,447,3.3,448,2.09,449,2.09,450,3.395,451,2.09,452,2.09,453,1.83,454,3.172,455,3.395,456,2.09,457,2.09,458,3.614,459,2.09,460,2.09,461,1.83,462,3.172,463,3.395,464,2.09,465,2.09,466,3.172,467,2.09,468,2.09,469,2.09,470,3,471,2.09,472,2.09,473,2.09,474,3,475,2.09,476,2.09,477,1.83,478,3.373,479,3.395,480,1.519,481,2.321,482,2.09,483,4.287,484,2.606,485,3,486,1.83,487,1.207,488,1.531,489,2.09,490,2.85,491,1.531,492,2.09,493,2.09,494,2.09,495,2.09,496,2.09,497,2.09,498,3.395,499,2.09,500,2.606,501,2.973,502,2.09,503,2.09,504,3.753,505,2.09,506,2.09,507,2.09,508,1.83,509,2.09,510,2.09,511,2.09,512,2.09,513,2.09,514,2.09,515,2.09,516,2.09,517,2.09,518,1.83,519,2.09,520,1.83,521,2.09,522,2.09,523,2.09,524,2.09]],["title/modules/AuthModule.html",[151,1.475,383,2.868]],["body/modules/AuthModule.html",[3,0.147,4,0.147,5,0.122,7,0.491,22,0.012,28,1.826,40,1.481,66,0.293,81,0.134,82,0.191,86,0.008,87,0.008,90,2.515,92,2.246,95,1.304,130,0.855,151,1.976,153,1.897,154,2.832,160,3.094,161,2.146,162,2.146,164,2.957,165,2.957,166,3.094,294,2.356,348,3.091,371,2.246,373,2.623,376,2.988,378,2.988,379,2.789,383,5.711,388,4.829,407,2.718,408,3.094,409,2.988,414,2.789,415,2.988,416,2.988,418,2.988,419,2.988,422,4.71,490,4.737,491,2.988,525,3.573,526,3.573,527,3.573,528,3.573,529,4.968,530,5.135,531,5.135,532,4.08,533,4.461,534,2.481,535,2.623,536,4.117,537,3.238,538,6.431,539,2.623,540,5.621,541,3.238,542,2.246,543,4.08,544,4.08,545,4.461,546,4.08,547,4.08,548,3.573,549,4.08,550,3.238,551,4.08,552,3.238,553,4.08,554,2.988,555,4.08,556,4.08]],["title/injectables/AuthService.html",[172,1.187,490,2.423]],["body/injectables/AuthService.html",[3,0.056,4,0.056,5,0.046,7,0.597,8,0.148,9,0.505,10,1.077,11,1.15,13,1.245,17,2.022,18,1.539,21,0.588,22,0.012,23,2.15,28,1.547,31,0.857,38,2.303,40,0.562,47,1.182,49,1.349,58,1.876,66,0.232,75,0.581,76,0.621,78,1.886,81,0.051,82,0.073,86,0.004,87,0.004,94,0.77,95,2.448,104,1.957,105,3.031,106,1.806,107,2.348,111,1.454,115,1.9,123,2.729,130,0.324,131,3.223,134,0.814,137,0.894,145,1.621,172,0.747,173,0.692,182,1.099,192,1.061,195,2.794,201,0.894,204,2.363,208,2.628,222,0.78,227,1.133,228,2.437,236,3.302,239,2.691,240,1.939,271,0.894,288,3.745,348,2.26,407,0.748,417,2.427,425,3.027,426,2.313,428,0.995,429,2.313,431,2.313,435,2.313,437,2.794,440,2.313,441,2.794,453,2.313,454,2.628,461,2.313,462,2.628,470,2.485,474,2.485,477,2.313,478,2.794,480,2.237,481,3.418,484,3.04,485,3.422,486,1.355,487,1.996,490,1.526,500,3.04,504,2.313,508,2.313,518,1.355,520,3.027,534,2.791,535,0.995,541,1.228,542,0.852,548,1.355,557,1.355,558,3.457,559,3.457,560,3.457,561,3.457,562,3.457,563,2.642,564,3.457,565,2.642,566,2.642,567,3.457,568,2.642,569,3.457,570,1.547,571,3.651,572,5.628,573,3.027,574,2.642,575,1.547,576,1.547,577,1.547,578,1.547,579,3.701,580,1.547,581,2.642,582,4.088,583,1.547,584,3.457,585,1.698,586,2.642,587,1.547,588,1.547,589,2.642,590,5.628,591,1.547,592,1.547,593,1.547,594,2.642,595,1.547,596,1.547,597,1.547,598,1.547,599,2.642,600,4.088,601,1.547,602,1.547,603,1.547,604,1.547,605,1.547,606,1.547,607,1.355,608,1.355,609,1.355,610,1.228,611,1.355,612,1.058,613,1.526,614,1.526,615,1.355,616,2.642,617,1.547,618,2.642,619,1.547,620,2.642,621,1.547,622,2.642,623,1.547,624,2.485,625,2.642,626,2.642,627,2.642,628,2.642,629,1.526,630,1.526,631,1.547,632,1.547,633,1.355,634,1.547,635,1.547,636,1.355,637,1.547,638,1.058,639,1.547,640,2.642,641,1.547,642,1.547,643,3.457,644,2.313,645,2.642,646,1.547,647,1.547,648,1.355,649,2.744,650,1.547,651,1.547,652,3.457,653,2.642,654,1.547,655,1.547,656,1.547,657,1.547,658,1.547,659,1.547,660,2.642,661,1.547,662,1.547,663,1.547,664,1.547,665,2.642,666,1.547,667,1.547,668,2.642,669,1.547]],["title/controllers/CategoriesController.html",[88,1.95,670,3.073]],["body/controllers/CategoriesController.html",[2,0.963,3,0.119,4,0.119,5,0.099,7,0.603,8,0.315,10,1.057,11,0.54,13,1.168,17,2.207,18,1.444,19,4.106,21,0.552,22,0.012,24,1.444,31,0.759,66,0.273,68,0.692,78,2.469,81,0.109,82,0.155,86,0.006,87,0.006,88,1.535,90,1.477,92,1.818,94,1.41,95,2.522,96,3.479,97,3.479,98,3.305,99,3.479,100,2.621,102,4.191,104,1.836,105,3.265,106,1.729,107,2.448,108,2.008,109,3.838,111,4.085,112,2.008,115,2.66,116,2.008,118,3.838,120,3.542,121,2.123,122,3.911,123,2.749,124,2.419,125,3.306,126,2.621,127,2.419,128,2.419,129,2.419,130,0.692,131,3.117,132,2.419,133,1.664,134,1.737,135,2.008,136,2.621,137,1.907,142,2.419,143,2.419,144,2.257,145,1.628,147,3.838,670,3.542,671,2.892,672,2.621,673,4.306,674,3.302,675,3.302,676,4.614,677,3.302,678,4.614,679,3.302,680,4.05,681,2.892,682,1.818,683,3.302,684,3.302,685,3.302,686,3.302,687,3.302,688,3.302]],["title/modules/CategoriesModule.html",[151,1.475,384,2.697]],["body/modules/CategoriesModule.html",[2,1.576,3,0.195,4,0.195,5,0.161,7,0.564,22,0.012,66,0.287,81,0.178,82,0.253,86,0.009,87,0.009,90,3.026,130,1.133,151,2.377,153,2.513,154,3.408,160,3.723,161,2.844,162,2.844,164,3.558,165,2.844,166,3.723,167,3.695,168,2.844,384,5.298,670,5.406,680,5.499,681,4.734,682,2.976,689,4.734,690,4.734,691,4.734,692,5.406,693,5.406,694,5.406]],["title/injectables/CategoriesService.html",[172,1.187,680,2.697]],["body/injectables/CategoriesService.html",[0,2.12,2,0.685,3,0.085,4,0.085,5,0.07,7,0.591,8,0.224,9,0.713,10,1.066,11,0.758,13,1.191,17,1.539,18,1.473,19,2.901,21,0.584,22,0.012,24,0.539,28,3.071,29,1.052,31,0.803,38,1.608,40,1.917,58,2.576,66,0.231,75,0.882,76,0.944,78,0.728,81,0.077,82,0.175,86,0.005,87,0.005,94,1.087,95,2.427,96,2.82,97,2.268,98,2.678,99,2.82,104,1.872,106,1.682,107,2.319,108,2.268,111,3.778,112,1.429,115,3.565,116,1.429,123,2.651,130,0.493,134,1.236,145,1.774,168,1.236,172,1.055,173,1.052,178,3.17,180,3.17,182,1.552,184,3.325,189,1.722,190,4.705,192,2.12,193,4.881,194,3.867,195,4.807,197,1.722,198,4.129,200,3.397,201,2.154,202,3.17,204,4.189,207,1.607,208,3.394,216,1.722,217,1.722,218,1.722,219,1.607,221,1.722,222,1.184,228,2.412,236,2.784,238,2.732,239,3.088,240,2.225,243,1.607,245,2.55,247,1.722,248,1.722,249,1.866,250,1.866,251,1.357,252,0.826,253,1.866,254,1.866,255,1.866,256,1.866,257,1.866,258,2.732,259,1.722,260,1.722,261,2.058,262,1.722,269,1.722,270,1.722,271,2.154,274,1.722,275,2.732,278,2.732,281,2.732,680,2.398,682,1.294,695,2.058,696,5.758,697,2.351,698,2.351,699,2.351,700,2.351,701,2.351,702,2.351,703,2.351,704,2.351,705,3.73,706,2.351,707,4.638,708,2.351,709,3.73,710,3.73,711,3.266,712,2.351,713,2.351,714,2.351,715,4.638,716,2.351,717,2.351]],["title/entities/CategoryEntity.html",[0,1.685,682,2.309]],["body/entities/CategoryEntity.html",[0,1.288,2,0.935,3,0.115,4,0.115,5,0.096,7,0.623,8,0.306,9,0.905,10,1.114,11,1.381,15,3.845,17,1.64,18,1.29,19,2.834,20,3.845,21,0.715,22,0.012,24,1.644,27,5.855,28,3.208,31,0.864,33,2.292,35,3.776,36,3.845,37,2.545,38,3.295,39,4.245,40,2.255,41,4.245,44,2.348,46,3.816,49,1.453,50,2.192,52,3.466,53,3.587,54,3.756,55,4.245,56,3.587,58,1.776,59,2.348,60,3.466,61,3.466,62,2.545,64,2.545,66,0.202,67,3.235,68,0.672,69,4.245,70,3.466,71,3.756,72,3.235,73,3.235,74,2.192,75,1.203,78,1.467,79,2.061,81,0.156,82,0.15,83,2.192,84,2.2,86,0.006,87,0.006,682,2.605,718,2.545,719,4.12,720,6.211,721,2.545,722,3.206,723,3.206,724,3.206,725,3.206,726,3.206,727,5.252,728,3.206,729,3.206,730,3.042,731,3.042,732,3.206]],["title/modules/ConfigModule.html",[151,1.475,385,2.868]],["body/modules/ConfigModule.html",[3,0.205,4,0.205,5,0.17,7,0.577,22,0.012,66,0.251,81,0.187,82,0.266,86,0.009,87,0.009,130,1.191,151,2.452,153,2.642,154,3.516,160,3.841,161,2.99,162,2.99,164,3.67,166,3.841,348,3.457,385,5.695,733,4.978,734,4.978,735,4.978,736,5.685,737,6.11,738,5.685]],["title/injectables/ConfigService.html",[172,1.187,348,1.685]],["body/injectables/ConfigService.html",[3,0.118,4,0.118,5,0.216,7,0.48,8,0.313,10,1.013,13,1.24,18,1.534,21,0.613,22,0.012,31,0.756,46,2.65,47,1.468,49,1.733,66,0.226,81,0.108,82,0.154,86,0.006,87,0.006,94,1.403,104,1.831,106,2.074,123,2.28,130,0.688,145,1.867,172,1.361,173,1.468,182,2.782,192,2.522,201,1.895,228,1.692,239,2.426,271,1.895,293,3.293,322,6.121,348,1.933,349,4.984,352,5.548,739,2.873,740,6.281,741,6.281,742,4.814,743,4.814,744,3.282,745,4.992,746,4.814,747,3.282,748,4.525,749,3.821,750,6.821,751,7.409,752,5.537,753,4.984,754,4.814,755,4.814,756,3.526,757,3.526,758,4.814,759,4.814,760,6.325,761,3.282,762,7.409,763,4.215,764,4.814,765,4.814,766,4.814,767,6.121,768,3.282,769,4.814,770,4.215,771,4.215,772,5.499,773,6.688,774,4.814,775,6.281,776,3.282,777,3.282,778,3.282,779,3.282,780,3.282,781,3.282,782,3.282,783,3.282,784,3.282,785,3.282,786,3.282]],["title/classes/ConfirmationEmailDto.html",[82,0.197,478,2.868]],["body/classes/ConfirmationEmailDto.html",[3,0.196,4,0.196,5,0.163,7,0.61,8,0.52,9,1.3,10,0.993,11,1.212,21,0.478,22,0.012,24,1.249,31,0.656,33,2.172,49,1.424,56,3.146,66,0.267,68,1.142,81,0.179,82,0.318,84,3.159,86,0.009,87,0.009,252,1.915,283,1.074,478,4.646,480,2.438,481,5.063,585,4.369,787,5.951,788,4.771,789,5.449,790,5.394,791,5.449,792,2.999,793,3.146,794,2.635,795,4.646,796,2.266,797,1.366,798,3.724,799,4.324]],["title/classes/CreateAccountDto.html",[82,0.197,101,2.868]],["body/classes/CreateAccountDto.html",[3,0.172,4,0.172,5,0.143,7,0.628,8,0.456,9,1.195,10,1.101,11,1.344,12,5.101,16,5.101,18,1.597,21,0.61,22,0.012,23,3.287,24,1.597,31,0.839,33,2.361,43,3.863,46,2.63,49,1.31,66,0.251,68,1.001,76,1.919,81,0.157,82,0.293,84,2.221,86,0.008,87,0.008,101,4.272,226,3.8,252,2.196,283,0.942,638,4.272,796,1.987,800,6.468,801,3.792,802,4.778,803,4.778,804,4.778,805,4.778,806,4.183,807,4.778,808,3.071,809,5.472,810,3.071,811,4.183,812,3.071,813,3.499]],["title/classes/CreateCategoryDto.html",[82,0.197,673,2.868]],["body/classes/CreateCategoryDto.html",[2,1.377,3,0.17,4,0.17,5,0.141,7,0.627,8,0.451,9,1.186,10,1.099,11,1.341,13,1.15,18,1.588,21,0.687,22,0.012,24,1.588,31,0.834,33,2.214,46,2.6,49,1.541,66,0.249,68,0.99,81,0.155,82,0.291,84,2.196,86,0.008,87,0.008,252,2.18,283,0.932,673,4.24,719,5.595,727,5.595,796,1.965,806,4.136,808,3.037,810,3.037,811,5.432,812,3.037,814,6.44,815,3.749,816,4.724,817,4.724,818,3.988,819,4.724,820,4.724,821,4.724,822,3.988,823,4.923,824,4.724,825,4.724]],["title/interfaces/CreateMockFileReturn.html",[826,2.029,827,3.073]],["body/interfaces/CreateMockFileReturn.html",[3,0.159,4,0.159,5,0.235,8,0.422,9,1.136,13,1.102,21,0.675,22,0.012,49,1.741,58,2.229,66,0.258,81,0.221,86,0.008,87,0.008,105,2.561,145,1.535,228,2.809,240,1.606,348,2.693,371,3.269,542,2.435,610,4.714,633,7.277,756,4.35,760,7.088,826,2.14,827,5.249,828,2.555,829,3.241,830,3.241,831,7.992,832,7.992,833,6.997,834,6.705,835,5.94,836,5.94,837,3.874,838,4.425,839,4.425,840,4.425,841,4.425,842,4.425,843,4.425,844,4.425,845,3.874,846,3.512,847,4.425,848,4.425]],["title/classes/CreateProfileDto.html",[82,0.197,441,2.868]],["body/classes/CreateProfileDto.html",[3,0.223,4,0.223,5,0.185,7,0.598,22,0.012,66,0.264,68,1.297,81,0.204,82,0.29,86,0.01,87,0.01,283,1.22,417,2.668,441,5.02,480,2.769,792,3.406,793,3.574,794,2.992,797,1.552,798,4.23,849,5.419,850,3.978]],["title/classes/CreateTransactionDto.html",[82,0.197,851,2.868]],["body/classes/CreateTransactionDto.html",[2,0.972,3,0.12,4,0.12,5,0.1,7,0.64,8,0.318,9,0.931,10,1.119,11,1.366,13,1.304,16,4.214,17,2.327,21,0.711,22,0.012,23,2.562,24,1.665,29,1.492,31,0.874,33,2.247,35,4.274,43,3.391,46,3.167,47,2.574,49,1.02,66,0.253,68,0.699,76,1.339,81,0.11,82,0.27,86,0.007,87,0.007,133,1.68,226,3.498,240,1.21,252,2.551,283,0.657,362,3.865,364,2.442,730,2.143,731,2.143,796,1.387,808,2.143,809,4.264,813,2.442,818,3.699,822,4.068,823,4.566,851,3.329,852,5.906,853,2.442,854,4.566,855,4.87,856,3.334,857,3.334,858,3.334,859,3.334,860,3.334,861,3.334,862,3.334,863,3.334,864,3.334,865,3.334,866,3.334,867,4.214,868,3.334,869,5.038,870,3.334,871,4.264,872,4.87,873,5.754,874,3.334,875,3.334,876,3.334,877,3.334,878,3.329,879,3.329,880,3.329,881,3.329,882,3.329]],["title/classes/CreateUserDto.html",[82,0.197,792,2.309]],["body/classes/CreateUserDto.html",[3,0.167,4,0.167,5,0.138,7,0.624,8,0.442,9,1.171,10,1.094,11,1.336,21,0.601,22,0.012,24,1.573,31,0.826,33,2.332,43,3.824,46,2.548,49,1.529,53,3.535,66,0.247,68,0.97,76,1.859,81,0.152,82,0.287,84,3.527,86,0.008,87,0.008,227,5.023,252,2.41,283,0.913,417,3.272,480,3.068,792,3.369,796,1.926,808,2.976,810,3.935,812,2.976,813,3.391,822,3.935,883,6.389,884,3.391,885,4.63,886,4.63,887,4.63,888,4.858,889,5.36,890,4.63,891,4.054,892,3.935,893,4.63,894,6.122,895,3.391]],["title/classes/CredentialsDto.html",[82,0.197,437,2.868]],["body/classes/CredentialsDto.html",[3,0.223,4,0.223,5,0.185,7,0.599,22,0.012,66,0.265,68,1.301,81,0.204,82,0.291,86,0.01,87,0.01,283,1.224,417,2.676,437,5.029,480,2.777,792,3.416,793,3.584,794,3.001,797,1.557,798,4.243,896,5.435]],["title/classes/CurrencyBaseParamDto.html",[82,0.197,897,3.073]],["body/classes/CurrencyBaseParamDto.html",[3,0.21,4,0.21,5,0.174,8,0.556,9,1.355,10,1.023,11,1.248,21,0.511,22,0.012,24,1.336,31,0.702,33,2.264,43,3.846,66,0.275,68,1.221,76,2.34,81,0.192,82,0.332,86,0.01,87,0.01,283,1.149,796,2.424,808,3.746,813,4.268,897,5.188,898,6.203,899,5.102,900,6.057,901,5.827,902,5.827]],["title/classes/CurrencyRateDto.html",[82,0.197,903,3.073]],["body/classes/CurrencyRateDto.html",[3,0.211,4,0.211,5,0.175,8,0.559,9,1.359,21,0.623,22,0.012,24,1.63,31,0.856,33,2.605,43,3.855,66,0.256,68,1.228,76,2.353,81,0.193,82,0.275,86,0.01,87,0.01,225,6.072,283,1.156,317,5.641,900,6.072,903,5.206,904,5.131,905,5.86,906,5.86]],["title/modules/DatabaseModule.html",[151,1.475,386,2.868]],["body/modules/DatabaseModule.html",[2,1.491,3,0.184,4,0.184,5,0.153,7,0.55,18,1.173,21,0.448,22,0.012,28,2.289,66,0.273,81,0.168,82,0.24,86,0.009,87,0.009,130,1.072,145,1.322,151,2.296,153,2.378,165,2.691,167,3.497,168,2.691,228,1.798,294,2.954,348,3.045,352,4.06,371,2.816,373,3.289,379,3.497,386,4.465,398,4.48,407,2.474,408,2.816,417,2.206,534,3.11,542,2.816,907,5.116,908,5.116,909,5.116,910,7.196,911,5.116,912,5.116,913,5.116,914,5.116,915,5.116,916,5.116,917,5.116,918,5.116,919,5.116,920,5.116,921,5.116,922,5.116,923,5.116,924,5.116,925,5.116,926,5.116,927,5.116,928,5.116,929,5.116,930,5.116,931,5.116,932,5.116,933,5.116]],["title/modules/ExchangeRateModule.html",[151,1.475,159,2.423]],["body/modules/ExchangeRateModule.html",[3,0.154,4,0.154,5,0.128,18,0.983,22,0.012,28,1.919,38,2.845,66,0.29,81,0.191,82,0.273,86,0.008,87,0.008,90,2.602,92,2.361,95,1.371,130,0.899,151,2.044,153,1.994,154,2.93,159,4.504,160,3.201,161,2.256,162,2.256,164,3.059,165,2.256,166,3.201,176,4.552,228,2.044,240,1.557,294,2.477,348,3.063,371,2.361,373,2.757,376,3.141,378,3.141,379,2.932,394,3.404,395,2.757,407,2.074,408,2.361,409,3.141,414,2.932,415,3.141,416,3.141,418,3.141,419,3.141,420,4.26,421,2.608,533,4.616,534,2.608,535,2.757,536,4.26,537,3.404,542,2.361,550,3.404,552,3.404,934,3.755,935,3.755,936,3.755,937,3.141,938,4.511,939,4.833,940,3.975,941,4.26,942,4.26,943,3.739,944,3.141,945,3.755,946,3.739,947,3.755,948,3.141,949,4.26,950,3.404,951,3.404,952,3.404,953,3.404,954,4.26,955,3.755,956,3.404,957,3.755]],["title/classes/ExchangeRateProcessor.html",[82,0.197,946,2.697]],["body/classes/ExchangeRateProcessor.html",[3,0.154,4,0.154,5,0.128,8,0.409,9,1.112,10,1.078,11,1.157,13,1.224,18,1.513,21,0.578,22,0.012,24,1.513,31,0.891,40,1.557,66,0.274,81,0.141,82,0.201,86,0.008,87,0.008,94,1.695,95,2.109,104,1.924,106,1.811,107,1.918,130,0.899,144,2.932,145,1.108,176,4.197,182,1.784,192,1.722,240,2.112,283,0.846,288,3.471,289,5.182,293,3.811,304,3.141,395,2.757,943,2.757,944,3.141,946,3.739,948,3.141,958,3.755,959,7.396,960,7.396,961,7.076,962,4.289,963,5.816,964,5.816,965,5.816,966,8.044,967,5.182,968,4.289,969,7.076,970,5.816,971,6.195,972,4.289,973,5.816,974,4.289,975,4.289,976,4.289,977,3.404,978,3.404,979,4.289,980,4.289,981,5.816,982,4.289,983,4.289]],["title/injectables/ExchangeRateService.html",[172,1.187,176,2.309]],["body/injectables/ExchangeRateService.html",[3,0.092,4,0.092,5,0.076,8,0.243,9,0.761,10,1.116,11,1.152,13,1.024,18,1.266,21,0.525,22,0.012,31,0.898,40,0.926,43,2.783,49,1.025,66,0.259,76,1.024,81,0.084,82,0.12,86,0.005,87,0.005,94,1.16,95,2.639,104,1.61,106,1.933,107,2.61,130,0.534,145,1.64,172,1.125,173,1.141,176,2.19,182,1.655,192,1.598,222,1.285,223,1.868,225,3.881,228,2.579,236,3.653,239,2.004,240,2.005,286,1.342,288,3.338,289,4.045,304,1.868,309,1.473,324,2.233,348,2.892,395,1.64,407,1.233,534,3.641,535,1.64,542,1.404,573,3.483,608,2.233,615,2.233,757,1.868,854,3.157,900,4.384,939,3.582,940,1.744,943,1.64,944,1.868,946,3.144,967,4.045,977,2.024,978,2.024,984,2.233,985,5.524,986,6.345,987,3.978,988,5.524,989,5.524,990,5.524,991,5.524,992,4.89,993,3.978,994,2.551,995,4.89,996,5.524,997,5.524,998,3.978,999,2.551,1000,2.551,1001,3.978,1002,4.836,1003,2.551,1004,4.89,1005,2.551,1006,2.551,1007,2.551,1008,2.551,1009,2.551,1010,4.836,1011,2.551,1012,3.978,1013,2.551,1014,2.551,1015,3.978,1016,2.551,1017,2.233,1018,2.233,1019,3.881,1020,2.551,1021,2.551,1022,2.551,1023,2.551,1024,2.551,1025,2.551,1026,3.978,1027,2.551,1028,3.978,1029,2.551,1030,2.551,1031,4.836,1032,3.978,1033,2.551,1034,3.978,1035,2.551,1036,2.551,1037,2.551,1038,2.551,1039,2.551,1040,2.551,1041,2.551,1042,2.551,1043,2.551,1044,2.551,1045,2.551,1046,2.551,1047,2.551,1048,2.551,1049,2.551,1050,2.551,1051,2.551,1052,2.551,1053,2.551,1054,2.551,1055,2.551,1056,2.551,1057,2.551,1058,5.524,1059,3.978,1060,3.978,1061,2.551,1062,2.551,1063,2.551,1064,3.978,1065,2.551,1066,2.551]],["title/controllers/ExchangerateController.html",[88,1.95,938,2.868]],["body/controllers/ExchangerateController.html",[3,0.172,4,0.172,5,0.143,8,0.457,10,1.102,11,0.783,13,0.888,18,1.098,21,0.42,22,0.012,24,1.599,31,0.84,66,0.276,68,1.003,81,0.158,82,0.224,86,0.008,87,0.008,88,2.226,90,2.142,92,2.636,94,1.824,95,2.628,98,4.27,104,1.396,106,1.913,107,2.595,111,3.445,121,3.078,123,1.739,130,1.003,137,2.765,144,3.273,145,1.802,169,3.273,176,3.838,180,4.278,207,3.273,223,3.507,264,4.193,757,3.507,897,5.415,903,3.507,938,4.278,948,3.507,1067,4.193,1068,7.394,1069,4.789,1070,6.259,1071,4.789,1072,6.259,1073,4.789,1074,4.789,1075,4.789,1076,4.789,1077,4.789,1078,4.789]],["title/classes/FindManyOptionsDto.html",[82,0.197,1079,2.551]],["body/classes/FindManyOptionsDto.html",[2,1.853,3,0.121,4,0.121,5,0.101,7,0.57,8,0.321,9,0.938,10,1.019,11,1.22,13,1.308,21,0.592,22,0.012,24,1.327,29,1.506,31,0.766,33,1.849,38,2.913,47,2.844,49,1.478,66,0.254,68,0.705,75,1.263,81,0.111,82,0.271,86,0.007,87,0.007,115,1.565,145,0.87,178,2.301,192,1.97,198,3.719,219,3.352,251,2.832,252,1.183,283,0.664,286,2.58,371,1.853,753,3.892,795,3.955,796,1.4,797,1.23,822,3.719,1079,2.982,1080,5.045,1081,6.533,1082,5.045,1083,2.671,1084,3.344,1085,4.086,1086,4.797,1087,2.832,1088,3.892,1089,4.762,1090,3.341,1091,3.341,1092,3.341,1093,3.184,1094,4.345,1095,2.982,1096,3.352,1097,3.352,1098,3.366,1099,4.345,1100,4.345,1101,4.345,1102,4.345,1103,4.345,1104,4.345,1105,4.345,1106,4.345,1107,3.366,1108,2.832,1109,2.832,1110,2.832,1111,1.944,1112,2.046,1113,3.366,1114,3.366,1115,4.904,1116,4.904,1117,4.294,1118,4.904,1119,5.066,1120,5.066,1121,4.294,1122,4.237,1123,2.671,1124,2.671,1125,3.366,1126,5.045,1127,3.892,1128,2.947,1129,3.366,1130,3.366,1131,3.366]],["title/classes/FindOneOptionsDto.html",[82,0.197,1084,2.207]],["body/classes/FindOneOptionsDto.html",[0,1.751,3,0.157,4,0.157,5,0.13,7,0.568,8,0.416,9,1.125,10,0.954,11,1.088,13,1.091,21,0.515,22,0.012,24,1,29,1.951,31,0.708,33,1.88,38,3.071,47,2.631,49,0.914,66,0.256,68,0.914,75,1.636,81,0.143,82,0.312,86,0.008,87,0.008,106,1.196,145,1.127,192,1.751,208,4.278,252,2.067,283,0.86,286,3.094,371,2.4,649,5.903,752,3.194,795,4.02,796,1.814,822,3.781,1080,5.282,1082,5.282,1083,3.461,1084,3.094,1087,3.843,1088,4.668,1090,2.518,1091,2.518,1092,2.518,1093,2.4,1095,3.576,1108,4.426,1109,4.426,1110,4.426,1119,5.15,1120,5.15,1121,6.237,1122,4.308,1123,6.082,1126,4.668,1127,3.461,1128,3.818,1132,4.36,1133,4.36,1134,4.36,1135,6.655,1136,4.36,1137,4.36]],["title/classes/HttpExceptionFilter.html",[82,0.197,1138,3.33]],["body/classes/HttpExceptionFilter.html",[3,0.185,4,0.185,5,0.154,7,0.6,8,0.492,13,0.956,18,1.182,21,0.452,22,0.012,31,0.621,66,0.236,81,0.17,82,0.242,86,0.009,87,0.009,94,1.913,104,1.502,106,1.414,130,1.08,145,1.332,228,2.672,271,4.17,283,1.016,285,4.09,286,3.452,287,6.322,292,5.746,293,3.79,294,4.17,295,6.656,297,4.513,298,5.731,300,6.656,303,3.523,305,3.523,306,4.513,309,2.976,310,4.513,311,5.746,313,4.513,315,5.746,316,4.513,317,4.09,330,4.513,331,4.513,1138,5.208,1139,5.746,1140,5.154,1141,5.154]],["title/classes/ID.html",[17,1.223,82,0.197]],["body/classes/ID.html",[0,2.816,3,0.206,4,0.206,5,0.171,7,0.579,8,0.547,9,1.341,10,1.015,11,1.239,17,2.433,21,0.502,22,0.012,24,1.314,31,0.69,33,2.242,49,1.469,66,0.252,68,1.201,81,0.189,82,0.329,86,0.009,87,0.009,283,1.13,796,2.384,1142,5.019,1143,5.732,1144,5.732,1145,7.013]],["title/classes/JwtAccessTokenPayloadDto.html",[82,0.197,613,2.423]],["body/classes/JwtAccessTokenPayloadDto.html",[3,0.174,4,0.174,5,0.144,7,0.647,8,0.461,9,1.204,10,1.104,11,1.347,17,2.041,21,0.552,22,0.012,31,0.758,33,2.239,49,1.684,66,0.174,68,1.013,81,0.244,82,0.348,86,0.008,87,0.008,283,0.953,447,2.938,487,2.791,500,3.828,613,4.044,614,2.791,624,4.258,629,2.791,630,2.791,794,2.337,797,1.579,1146,4.787,1147,3.303,1148,4.833,1149,4.833,1150,3.54]],["title/injectables/JwtAuthGuard.html",[135,2.551,172,1.187]],["body/injectables/JwtAuthGuard.html",[3,0.284,4,0.174,5,0.145,7,0.614,8,0.462,10,0.939,13,0.898,18,1.111,21,0.425,22,0.012,31,0.76,66,0.267,76,1.945,78,2.446,81,0.159,82,0.227,86,0.008,87,0.008,94,1.838,104,1.412,106,1.329,123,2.796,130,1.015,131,3.669,134,2.548,135,3.834,145,1.252,172,1.783,173,2.167,182,2.916,222,2.441,239,3.177,240,2.289,293,4.559,305,3.311,539,3.114,797,1.215,971,5.521,1151,4.241,1152,5.521,1153,4.844,1154,6.306,1155,4.844,1156,4.241,1157,4.241,1158,4.241,1159,4.844,1160,3.114,1161,4.844,1162,4.241]],["title/injectables/JwtRefreshGuard.html",[172,1.187,488,3.073]],["body/injectables/JwtRefreshGuard.html",[3,0.284,4,0.174,5,0.144,7,0.614,8,0.46,10,0.937,13,0.894,18,1.106,21,0.423,22,0.012,31,0.757,66,0.267,76,1.936,78,2.443,79,3.1,81,0.159,82,0.226,86,0.008,87,0.008,94,1.833,104,1.406,106,1.323,123,2.691,130,1.01,131,3.665,145,1.246,172,1.778,173,2.157,182,2.91,222,2.43,239,3.168,240,2.283,293,4.553,305,3.296,488,4.605,539,3.1,630,2.785,797,1.209,1152,5.505,1156,4.222,1157,4.222,1158,4.222,1160,3.1,1162,4.222,1163,6.125,1164,4.222,1165,4.822,1166,6.287,1167,4.822,1168,6.287,1169,2.932,1170,4.822]],["title/classes/JwtRefreshTokenDto.html",[82,0.197,447,2.551]],["body/classes/JwtRefreshTokenDto.html",[3,0.186,4,0.186,5,0.155,7,0.646,10,1.053,11,1.286,17,1.51,22,0.012,33,2.313,49,1.647,66,0.186,68,1.085,81,0.251,82,0.357,86,0.009,87,0.009,283,1.021,447,4.003,487,2.991,500,4.003,613,3.802,614,2.991,624,3.149,629,2.991,630,2.991,794,2.504,797,1.651,1146,3.54,1147,3.54,1150,3.793]],["title/classes/JwtRefreshTokenPayloadDto.html",[82,0.197,614,2.423]],["body/classes/JwtRefreshTokenPayloadDto.html",[3,0.167,4,0.167,5,0.139,7,0.647,8,0.444,9,1.174,10,1.115,11,1.361,17,2.004,21,0.602,22,0.012,31,0.828,33,2.197,49,1.693,66,0.167,68,0.974,81,0.241,82,0.343,86,0.008,87,0.008,283,0.917,447,2.827,487,2.686,500,3.733,613,4.389,614,3.546,624,4.179,629,3.969,630,2.686,794,2.249,797,1.724,1111,3.546,1146,4.197,1147,3.179,1150,3.406,1171,4.651,1172,4.651,1173,4.651]],["title/injectables/JwtRefreshTokenStrategy.html",[172,1.187,530,2.868]],["body/injectables/JwtRefreshTokenStrategy.html",[3,0.153,4,0.153,5,0.127,7,0.595,8,0.407,10,0.881,11,0.947,13,1.074,17,2.057,18,1.328,21,0.508,22,0.012,31,0.698,66,0.289,76,1.712,78,1.321,81,0.14,82,0.2,86,0.008,87,0.008,94,1.688,95,2.103,104,1.688,106,1.17,107,1.91,123,2.388,130,0.893,131,2.692,134,2.242,137,2.462,145,1.102,172,1.638,173,1.907,182,2.409,222,2.148,228,2.036,236,2.801,239,2.148,240,1.548,288,3.047,348,3.127,428,2.74,490,4.576,491,3.122,500,2.592,501,3.732,530,3.959,539,2.74,542,2.346,607,3.732,611,3.732,612,2.914,614,4.076,624,3.521,629,2.462,630,2.462,644,3.732,797,1.069,1160,2.74,1169,2.592,1174,5.76,1175,3.732,1176,5.76,1177,3.732,1178,4.263,1179,3.732,1180,4.263,1181,3.732,1182,3.732,1183,3.383,1184,4.597,1185,3.732,1186,3.732,1187,3.732,1188,4.263,1189,3.732,1190,4.263,1191,3.732,1192,4.263,1193,4.263]],["title/injectables/JwtStrategy.html",[172,1.187,531,2.868]],["body/injectables/JwtStrategy.html",[3,0.164,4,0.164,5,0.136,7,0.606,8,0.436,10,0.913,11,0.993,13,1.125,17,2.116,18,1.392,21,0.532,22,0.012,31,0.731,66,0.285,78,1.416,81,0.15,82,0.214,86,0.008,87,0.008,94,1.769,95,2.178,104,1.769,106,1.254,107,2.001,123,2.474,130,0.957,134,2.404,137,2.639,145,1.181,172,1.716,173,2.044,182,2.524,288,3.192,348,3.183,428,2.937,490,4.648,491,3.347,531,4.148,539,2.937,542,2.515,613,4.192,624,3.69,797,1.146,1160,2.937,1176,5.966,1177,4.001,1179,4.001,1181,4.001,1182,4.001,1183,3.627,1184,3.627,1185,4.001,1186,4.001,1187,4.001,1189,4.001,1191,4.001,1194,4.001,1195,4.57,1196,4.57,1197,4.57,1198,4.57]],["title/classes/JwtTokensDto.html",[82,0.197,487,2.423]],["body/classes/JwtTokensDto.html",[3,0.172,4,0.172,5,0.142,7,0.646,8,0.455,9,1.193,10,1.101,11,1.344,17,1.39,21,0.547,22,0.012,24,1.431,31,0.752,33,2.449,49,1.678,66,0.172,68,0.999,81,0.243,82,0.346,86,0.008,87,0.008,283,0.94,447,2.898,487,3.604,500,4.487,613,3.604,614,2.753,624,2.898,629,2.753,630,4.018,794,2.305,797,1.565,1146,4.755,1147,3.258,1150,3.491,1199,4.767,1200,4.767]],["title/classes/MockExchangeRateProcessor.html",[82,0.197,954,3.073]],["body/classes/MockExchangeRateProcessor.html",[3,0.164,4,0.164,5,0.136,18,1.045,22,0.012,28,2.04,38,2.935,66,0.293,81,0.199,82,0.284,86,0.008,87,0.008,90,2.04,92,2.51,95,1.457,130,0.955,151,2.13,159,2.633,164,2.398,165,2.398,166,2.51,176,3.746,228,2.13,240,1.655,283,0.899,294,2.633,348,3.117,371,2.51,373,2.931,376,3.339,378,3.339,379,3.117,394,3.619,395,2.931,407,2.205,408,2.51,409,3.339,414,3.117,415,3.339,416,3.339,418,3.339,419,3.339,420,4.438,421,2.772,533,4.809,534,2.772,535,2.931,536,4.438,537,3.619,542,2.51,550,3.619,552,3.619,937,3.339,938,4.142,939,4.985,940,4.142,941,4.438,942,4.438,943,3.896,944,3.339,945,3.992,946,3.896,947,3.992,948,3.339,949,4.438,950,3.619,951,3.619,952,3.619,953,3.619,954,4.985,955,3.992,956,3.619,957,3.992]],["title/classes/PaginationTransactionsDto.html",[82,0.197,1201,3.33]],["body/classes/PaginationTransactionsDto.html",[2,1.631,3,0.201,4,0.201,5,0.167,7,0.615,13,1.037,18,1.283,21,0.49,22,0.012,23,3.943,31,0.674,66,0.249,81,0.184,82,0.262,86,0.009,87,0.009,104,1.631,123,2.508,133,2.819,182,2.327,283,1.103,797,1.403,967,5.06,1160,3.596,1201,5.483,1202,6.049,1203,4.439,1204,5.594,1205,4.76,1206,5.594,1207,4.439,1208,5.594,1209,7.496,1210,5.594,1211,5.594]],["title/classes/ResetPasswordDto.html",[82,0.197,454,2.697]],["body/classes/ResetPasswordDto.html",[3,0.19,4,0.19,5,0.158,7,0.617,8,0.504,9,1.275,10,0.979,11,1.195,21,0.463,22,0.012,24,1.212,31,0.636,33,2.131,49,1.397,56,3.051,66,0.263,68,1.107,81,0.219,82,0.342,84,3.099,86,0.009,87,0.009,252,1.857,283,1.042,417,2.278,454,4.286,462,3.397,480,2.983,481,4.993,585,4.286,790,5.291,792,2.908,793,3.051,794,2.555,795,4.557,796,2.198,797,1.672,798,4.557,799,4.193,1212,5.291,1213,4.193,1214,5.284,1215,5.284]],["title/interfaces/Response.html",[309,2.423,826,2.029]],["body/interfaces/Response.html",[3,0.191,4,0.191,5,0.158,7,0.605,8,0.506,9,1.277,21,0.464,22,0.012,49,1.532,66,0.263,81,0.22,82,0.248,86,0.009,87,0.009,105,3.413,123,2.424,130,1.11,145,1.369,172,1.888,286,2.786,309,3.856,748,5.804,826,2.561,828,3.059,1216,4.204,1217,4.638,1218,4.638,1219,5.847,1220,4.204,1221,5.847,1222,5.847,1223,5.3,1224,3.88,1225,4.638,1226,5.847,1227,4.638,1228,4.638]],["title/classes/SelectAccountsDto.html",[82,0.197,113,3.073]],["body/classes/SelectAccountsDto.html",[1,2.446,2,2.004,3,0.167,4,0.167,5,0.139,7,0.596,8,0.444,9,1.174,10,1.046,11,1.277,13,1.448,21,0.602,22,0.012,24,1.576,31,0.828,47,3.271,49,1.286,66,0.221,81,0.153,82,0.218,86,0.008,87,0.008,113,4.497,133,2.343,251,2.686,252,1.634,283,0.917,797,1.54,1079,4.621,1084,2.446,1085,3.947,1086,4.699,1087,3.546,1089,4.179,1090,3.969,1091,3.969,1092,3.969,1093,3.783,1094,4.197,1095,2.827,1096,3.179,1097,3.179,1099,4.197,1100,4.197,1101,4.197,1102,4.197,1103,4.197,1104,4.197,1105,4.197,1106,4.197,1108,3.546,1109,3.546,1110,3.546,1111,3.969,1112,2.827,1229,4.072,1230,4.072,1231,3.406,1232,3.406]],["title/classes/SelectCategoriesDto.html",[82,0.197,676,3.073]],["body/classes/SelectCategoriesDto.html",[2,2.004,3,0.167,4,0.167,5,0.139,7,0.596,8,0.444,9,1.174,10,1.046,11,1.277,13,1.448,21,0.602,22,0.012,24,1.576,31,0.828,47,3.271,49,1.286,66,0.221,81,0.153,82,0.218,86,0.008,87,0.008,133,2.343,251,2.686,252,1.634,283,0.917,676,4.497,682,2.56,797,1.54,1079,4.621,1084,2.446,1085,3.947,1086,4.699,1087,3.546,1089,4.179,1090,3.969,1091,3.969,1092,3.969,1093,3.783,1094,4.197,1095,2.827,1096,3.179,1097,3.179,1099,4.197,1100,4.197,1101,4.197,1102,4.197,1103,4.197,1104,4.197,1105,4.197,1106,4.197,1108,3.546,1109,3.546,1110,3.546,1111,3.969,1112,2.827,1231,3.406,1232,3.406,1233,4.072,1234,4.072]],["title/classes/SelectProfileDto.html",[82,0.197,458,3.073]],["body/classes/SelectProfileDto.html",[3,0.202,4,0.202,5,0.168,7,0.599,8,0.535,9,1.324,10,0.927,11,1.132,13,1.283,21,0.492,22,0.012,24,1.286,31,0.676,47,3.096,66,0.249,78,1.738,79,3.606,81,0.185,82,0.263,86,0.009,87,0.009,133,2.826,252,1.971,283,1.106,458,5.068,797,1.736,850,3.606,1084,4.122,1087,3.996,1090,3.239,1091,3.239,1092,3.239,1093,3.087,1108,3.996,1109,3.996,1110,3.996,1111,3.239,1112,3.41,1235,4.911]],["title/classes/SelectTransactionsDto.html",[82,0.197,1236,3.073]],["body/classes/SelectTransactionsDto.html",[2,1.528,3,0.103,4,0.103,5,0.085,7,0.608,8,0.272,9,0.828,10,1.086,11,1.318,13,1.45,21,0.67,22,0.012,24,1.581,29,1.275,31,0.856,35,4.706,38,1.868,47,3.179,49,1.489,66,0.239,68,0.597,75,1.069,81,0.094,82,0.246,86,0.006,87,0.006,93,4.288,133,1.436,145,0.736,192,2.105,198,1.831,226,1.732,228,1.001,240,1.903,251,1.645,252,2.423,283,0.562,371,1.568,672,4.647,757,4.613,796,1.185,797,1.086,808,1.831,818,1.831,822,4.049,823,4.998,867,3.838,871,3.793,878,2.961,879,2.961,880,2.961,881,2.961,882,2.961,1079,3.829,1084,1.499,1085,2.785,1086,3.764,1087,2.502,1088,3.438,1089,3.186,1090,3.026,1091,3.026,1092,3.026,1093,2.885,1094,2.961,1095,1.732,1096,1.947,1097,1.947,1099,2.961,1100,2.961,1101,2.961,1102,2.961,1103,2.961,1104,2.961,1105,2.961,1106,2.961,1108,2.502,1109,2.502,1110,2.502,1111,3.026,1112,1.732,1122,4.288,1126,4.159,1127,4.159,1203,2.261,1205,1.732,1231,2.087,1232,2.087,1236,3.173,1237,5.808,1238,5.241,1239,4.332,1240,2.849,1241,2.849,1242,2.849,1243,2.849,1244,2.849,1245,4.332,1246,2.849,1247,2.849,1248,2.849,1249,2.849,1250,2.849,1251,2.849,1252,2.849,1253,2.849,1254,2.849,1255,2.849,1256,2.849,1257,2.849,1258,2.849,1259,2.849,1260,2.849,1261,2.849,1262,2.849,1263,2.849,1264,2.849,1265,2.849,1266,2.849]],["title/classes/SelectUserDto.html",[82,0.197,1267,3.33]],["body/classes/SelectUserDto.html",[2,1.635,3,0.202,4,0.202,5,0.168,7,0.599,8,0.535,9,1.324,10,0.927,11,1.132,13,1.283,21,0.492,22,0.012,24,1.286,31,0.676,47,3.096,66,0.249,78,1.738,81,0.185,82,0.263,86,0.009,87,0.009,133,2.826,252,1.971,283,1.106,797,1.736,884,4.108,1084,4.122,1087,3.996,1090,3.239,1091,3.239,1092,3.239,1093,3.087,1108,3.996,1109,3.996,1110,3.996,1111,3.239,1112,3.41,1267,5.492,1268,4.451]],["title/classes/SelectUsersDto.html",[82,0.197,1269,3.33]],["body/classes/SelectUsersDto.html",[2,2.004,3,0.167,4,0.167,5,0.139,7,0.596,8,0.444,9,1.174,10,1.046,11,1.277,13,1.448,21,0.602,22,0.012,24,1.576,31,0.828,47,3.271,49,1.286,66,0.221,78,1.441,81,0.153,82,0.218,86,0.008,87,0.008,133,2.343,251,2.686,252,1.634,283,0.917,797,1.54,1079,4.621,1084,2.446,1085,3.947,1086,4.699,1087,3.546,1089,4.179,1090,3.969,1091,3.969,1092,3.969,1093,3.783,1094,4.197,1095,2.827,1096,3.179,1097,3.179,1099,4.197,1100,4.197,1101,4.197,1102,4.197,1103,4.197,1104,4.197,1105,4.197,1106,4.197,1108,3.546,1109,3.546,1110,3.546,1111,3.969,1112,2.827,1231,3.406,1232,3.406,1268,3.691,1269,4.873,1270,4.072]],["title/modules/SendGridModule.html",[151,1.475,529,2.868]],["body/modules/SendGridModule.html",[3,0.122,4,0.122,5,0.101,7,0.651,10,0.453,13,1.182,18,1.461,21,0.558,22,0.012,31,0.767,49,0.709,66,0.244,81,0.111,82,0.158,86,0.007,87,0.007,94,0.986,95,1.081,104,1.857,106,1.748,115,3.541,123,2.313,130,0.709,145,2,151,2.239,153,1.572,164,2.589,165,1.779,166,2.709,201,1.953,288,3.351,407,2.38,408,2.709,420,5.472,421,3.527,529,4.355,571,4.984,737,4.309,828,1.953,956,4.604,1271,3.382,1272,7.472,1273,5.802,1274,4.922,1275,4.975,1276,3.382,1277,6.77,1278,5.802,1279,4.922,1280,3.382,1281,5.802,1282,4.922,1283,3.874,1284,3.382,1285,6.77,1286,5.802,1287,4.922,1288,3.382,1289,5.802,1290,3.382,1291,3.382,1292,5.174,1293,5.373,1294,2.962,1295,3.382,1296,3.164,1297,3.382,1298,3.382,1299,4.922,1300,5.802,1301,4.922,1302,5.802,1303,3.382,1304,3.382,1305,3.382]],["title/interfaces/SendGridModuleAsyncOptions.html",[826,2.029,1275,2.697]],["body/interfaces/SendGridModuleAsyncOptions.html",[3,0.182,4,0.182,5,0.151,8,0.484,9,1.242,13,1.526,21,0.739,22,0.012,23,2.665,40,1.839,49,1.501,58,1.901,66,0.258,81,0.236,86,0.009,87,0.009,107,2.141,130,1.062,407,3.653,408,4.158,421,4.593,554,3.711,756,4.754,797,1.628,826,3.464,828,2.926,1275,4.173,1283,4.355,1296,3.257,1306,3.711,1307,3.711,1308,5.152,1309,5.995,1310,3.711,1311,3.711,1312,4.021,1313,4.021,1314,4.021,1315,4.021,1316,4.021,1317,4.021,1318,4.021,1319,4.021]],["title/interfaces/SendGridModuleOptions.html",[826,2.029,1283,2.551]],["body/interfaces/SendGridModuleOptions.html",[3,0.182,4,0.182,5,0.151,8,0.484,9,1.242,13,1.482,21,0.728,22,0.012,23,3.768,40,2.742,49,1.636,58,2.688,66,0.258,81,0.236,86,0.009,87,0.009,107,2.141,130,1.062,187,5.152,407,2.45,408,2.789,421,3.08,554,5.532,797,1.271,826,3.464,828,2.926,1275,3.257,1283,4.593,1296,3.257,1306,3.711,1307,3.711,1308,4.021,1309,4.021,1310,3.711,1311,3.711,1312,4.021,1313,4.021,1314,5.995,1315,5.995,1316,4.021,1317,4.021,1318,4.021,1319,4.021]],["title/interfaces/SendGridOptionsFactory.html",[826,2.029,1296,2.697]],["body/interfaces/SendGridOptionsFactory.html",[3,0.194,4,0.194,5,0.161,8,0.515,21,0.646,22,0.012,23,2.837,31,0.65,40,1.958,49,1.545,58,2.023,66,0.265,81,0.243,86,0.009,87,0.009,94,1.968,106,1.48,107,2.431,130,1.13,407,2.608,408,2.968,421,3.279,554,3.949,797,1.352,826,3.565,828,3.114,1275,3.466,1283,4.698,1296,4.341,1306,4.946,1307,3.949,1308,4.28,1309,4.28,1310,3.949,1311,3.949,1312,4.28,1313,4.28,1314,4.28,1315,4.28,1316,4.28,1317,4.28,1318,6.133,1319,4.28,1320,5.393]],["title/injectables/SendGridService.html",[172,1.187,571,2.868]],["body/injectables/SendGridService.html",[3,0.14,4,0.14,5,0.116,8,0.37,9,1.038,10,0.991,11,1.109,13,1.257,18,1.554,21,0.594,22,0.012,31,0.859,40,1.407,58,2.953,66,0.273,81,0.128,82,0.182,86,0.007,87,0.007,94,1.581,95,2.363,104,1.976,105,3.272,106,1.717,107,2.235,115,2.521,130,0.812,145,1.752,172,1.534,173,1.734,182,2.256,192,1.557,228,1.907,239,3.153,240,2.59,288,3.992,289,4.964,293,3.133,309,3.133,407,1.874,571,3.708,752,2.839,797,1.361,828,2.239,1017,5.479,1160,2.492,1283,4.121,1292,2.839,1294,3.394,1310,4.964,1311,2.839,1321,3.394,1322,6.258,1323,5.425,1324,6.258,1325,6.258,1326,3.877,1327,3.877,1328,5.425,1329,3.877,1330,3.877,1331,3.877,1332,3.877,1333,3.877,1334,5.425,1335,3.877,1336,3.877,1337,3.877,1338,3.394,1339,5.425,1340,3.877,1341,3.877,1342,3.877,1343,3.877,1344,3.877,1345,3.877,1346,3.877,1347,3.877,1348,3.877,1349,3.877,1350,3.877,1351,3.877,1352,3.877,1353,3.877,1354,3.877,1355,5.425,1356,5.425,1357,3.877]],["title/classes/SendResetPasswordDto.html",[82,0.197,462,2.697]],["body/classes/SendResetPasswordDto.html",[3,0.201,4,0.201,5,0.167,7,0.615,10,0.749,11,0.915,22,0.012,33,2.208,49,1.172,56,3.23,66,0.27,68,1.172,81,0.227,82,0.351,84,2.6,86,0.009,87,0.009,252,1.966,283,1.103,417,2.412,454,3.596,462,4.441,480,3.091,481,3.824,585,3.596,790,4.439,792,3.079,793,3.23,794,2.705,795,4.722,796,2.327,797,1.733,798,4.722,799,4.439,1212,4.439,1213,4.439]],["title/entities/TransactionEntity.html",[0,1.685,1205,2.551]],["body/entities/TransactionEntity.html",[0,0.931,1,2.757,2,0.676,3,0.083,4,0.083,5,0.069,7,0.633,8,0.221,9,0.706,10,1.127,11,1.386,13,0.972,15,3.142,16,3.367,17,1.34,19,2.316,20,3.142,21,0.715,22,0.012,23,3.205,24,1.694,25,3.232,26,3.232,27,5.846,28,3.199,29,1.651,30,3.367,31,0.89,33,2.42,35,4.155,36,3.142,37,1.841,38,3.264,39,4.165,40,2.212,41,4.165,43,3.07,44,2.703,46,3.936,49,1.098,50,1.585,52,1.699,54,1.841,55,2.523,56,2.131,58,2.286,59,1.699,60,4.463,61,4.463,62,1.841,64,1.841,66,0.23,67,2.523,68,0.486,69,4.165,70,3.838,71,4.159,72,2.523,73,2.523,74,1.585,75,0.87,76,0.931,77,2.031,78,1.144,79,1.491,81,0.121,82,0.109,83,1.585,84,1.078,86,0.005,87,0.005,226,2.795,682,2.884,721,1.841,730,2.373,731,2.373,818,2.955,854,3.648,867,4.68,1093,2.031,1205,2.244,1358,1.841,1359,4.597,1360,4.597,1361,2.319,1362,5.24,1363,3.691,1364,2.319,1365,2.319,1366,2.319,1367,2.319,1368,2.319,1369,2.319,1370,2.319,1371,2.319,1372,2.319,1373,2.319,1374,5.24,1375,2.319,1376,2.319,1377,2.319,1378,2.319,1379,2.319,1380,2.031,1381,2.031,1382,2.319]],["title/controllers/TransactionsController.html",[88,1.95,1383,3.073]],["body/controllers/TransactionsController.html",[2,0.856,3,0.106,4,0.106,5,0.088,7,0.601,8,0.28,10,1.063,11,0.48,13,1.184,17,2.18,18,1.463,19,4.174,21,0.559,22,0.012,24,1.463,29,1.314,31,0.769,66,0.273,68,0.615,78,2.477,81,0.097,82,0.208,86,0.006,87,0.006,88,1.365,90,1.314,92,1.616,94,1.292,95,2.536,96,3.246,97,3.246,98,3.083,99,3.246,100,2.331,102,3.91,104,1.86,105,3.164,106,1.751,107,2.467,108,1.786,109,3.518,111,3.947,112,1.786,115,2.764,116,1.786,118,3.518,120,3.246,121,1.888,122,3.649,123,2.759,124,2.151,125,3.03,126,2.331,127,2.151,128,2.151,129,2.151,130,0.615,131,3.119,132,2.151,133,1.48,134,1.545,135,1.786,136,2.331,137,1.696,142,2.151,143,2.151,144,2.007,145,1.649,147,4.237,220,2.571,298,4.719,303,2.007,851,4.065,1205,1.786,1236,4.355,1383,3.246,1384,2.571,1385,2.571,1386,5.339,1387,2.937,1388,2.937,1389,4.432,1390,2.937,1391,5.339,1392,2.937,1393,2.937,1394,4.355,1395,2.937,1396,4.432,1397,4.355,1398,2.571,1399,2.937,1400,2.937,1401,2.937,1402,2.937,1403,2.937,1404,2.937,1405,2.937,1406,2.937]],["title/modules/TransactionsModule.html",[151,1.475,387,2.868]],["body/modules/TransactionsModule.html",[1,3.297,2,1.399,3,0.173,4,0.173,5,0.143,7,0.533,22,0.012,66,0.296,81,0.158,82,0.225,86,0.008,87,0.008,90,2.804,93,3.515,130,1.006,151,2.203,152,5.062,153,2.231,154,3.158,159,4.547,160,3.45,161,2.525,162,2.525,164,3.297,165,3.297,166,3.45,167,3.281,168,2.525,169,3.281,384,5.062,387,5.781,672,3.809,1205,2.918,1383,5.112,1397,6.162,1398,4.203,1407,4.203,1408,4.203,1409,4.8,1410,4.203,1411,4.8,1412,4.8,1413,4.8,1414,4.8]],["title/injectables/TransformInterceptor.html",[172,1.187,1224,3.073]],["body/injectables/TransformInterceptor.html",[3,0.186,4,0.186,5,0.154,7,0.614,8,0.493,13,0.958,18,1.185,21,0.453,22,0.012,31,0.622,49,1.083,66,0.26,81,0.216,82,0.242,86,0.009,87,0.009,94,1.916,104,1.506,105,2.834,106,1.418,123,2.386,130,1.083,145,1.335,172,1.859,173,2.311,286,2.718,309,2.984,748,4.1,826,2.498,1216,4.1,1217,4.524,1218,4.524,1219,6.33,1220,4.1,1221,6.662,1222,5.755,1223,6.038,1224,4.814,1225,5.755,1226,6.662,1227,5.755,1228,4.524,1415,6.573,1416,5.167]],["title/classes/UpdateAccountDto.html",[82,0.197,117,3.073]],["body/classes/UpdateAccountDto.html",[3,0.223,4,0.223,5,0.185,7,0.599,22,0.012,66,0.265,68,1.301,81,0.204,82,0.291,86,0.01,87,0.01,101,4.243,117,5.389,283,1.224,797,1.557,801,4.926,1417,5.435,1418,4.546,1419,4.546,1420,6.207,1421,6.207]],["title/classes/UpdateCategoryDto.html",[82,0.197,678,3.073]],["body/classes/UpdateCategoryDto.html",[3,0.223,4,0.223,5,0.185,7,0.599,22,0.012,66,0.265,68,1.301,81,0.204,82,0.291,86,0.01,87,0.01,283,1.224,673,4.243,678,5.389,797,1.557,815,4.926,1418,4.546,1419,4.546,1422,5.435,1423,6.207,1424,6.207]],["title/classes/UpdateEmailDto.html",[82,0.197,470,2.551]],["body/classes/UpdateEmailDto.html",[3,0.195,4,0.195,5,0.162,7,0.621,10,0.726,11,0.886,22,0.012,33,2.165,49,1.136,53,3.13,66,0.266,68,1.136,81,0.243,82,0.363,84,3.149,86,0.009,87,0.009,252,1.905,283,1.069,417,3.186,466,3.484,470,4.119,474,3.295,480,2.425,793,3.13,794,2.621,796,2.254,797,1.854,810,4.355,812,3.484,850,3.484,892,3.484,895,3.97,1425,3.97,1426,4.355,1427,5.377,1428,4.302]],["title/classes/UpdatePasswordDto.html",[82,0.197,474,2.551]],["body/classes/UpdatePasswordDto.html",[3,0.184,4,0.184,5,0.152,7,0.622,8,0.487,9,1.247,10,0.963,11,1.176,21,0.447,22,0.012,24,1.17,31,0.615,33,2.085,49,1.367,53,3.766,66,0.259,68,1.069,81,0.237,82,0.355,84,3.341,86,0.009,87,0.009,252,2.292,283,1.006,417,3.266,466,3.281,470,3.103,474,3.965,480,2.283,793,2.947,794,2.468,796,2.123,797,1.803,810,4.192,812,3.281,850,3.281,891,4.469,892,4.192,895,3.738,1425,4.777,1426,4.192,1427,5.176,1428,5.704,1429,5.104]],["title/classes/UpdateProfileDto.html",[82,0.197,466,2.697]],["body/classes/UpdateProfileDto.html",[3,0.194,4,0.194,5,0.161,7,0.62,10,0.723,11,0.882,22,0.012,33,2.158,49,1.13,53,3.114,66,0.265,68,1.13,81,0.243,82,0.362,84,3.139,86,0.009,87,0.009,252,1.895,283,1.063,417,3.179,466,4.341,470,3.279,474,3.279,480,2.413,793,3.114,794,2.608,796,2.243,797,1.938,810,4.341,812,3.466,850,3.466,892,3.466,895,3.949,1425,3.949,1426,4.74,1427,5.359,1428,4.28]],["title/classes/UpdateTransactionDto.html",[82,0.197,1394,3.073]],["body/classes/UpdateTransactionDto.html",[3,0.223,4,0.223,5,0.185,7,0.599,22,0.012,66,0.265,68,1.301,81,0.204,82,0.291,86,0.01,87,0.01,283,1.224,797,1.557,851,4.243,853,4.546,1394,5.389,1418,4.546,1419,4.546,1430,5.435,1431,6.207,1432,6.207]],["title/classes/UpdateUserDto.html",[82,0.197,1426,2.697]],["body/classes/UpdateUserDto.html",[3,0.223,4,0.223,5,0.185,7,0.599,22,0.012,66,0.265,68,1.301,81,0.204,82,0.291,86,0.01,87,0.01,283,1.224,792,3.416,797,1.557,884,4.546,1418,4.546,1419,4.546,1426,4.73,1433,5.435,1434,6.207,1435,6.207]],["title/entities/UserEntity.html",[0,1.685,78,1.3]],["body/entities/UserEntity.html",[0,1.133,2,0.823,3,0.102,4,0.102,5,0.084,7,0.627,8,0.269,9,0.823,10,1.122,11,1.369,15,3.561,17,1.519,20,3.561,21,0.69,22,0.012,24,1.664,27,3.15,28,1.924,31,0.874,33,2.264,35,4.018,36,3.983,38,3.129,39,3.983,40,2.804,41,3.983,43,3.462,44,3.15,45,3.766,46,4.075,47,1.924,49,1.385,50,1.929,52,2.067,53,2.484,55,3.983,56,3.365,66,0.238,67,3.561,68,0.591,69,4.287,72,2.94,73,2.94,74,1.929,75,1.059,76,1.133,78,1.333,81,0.093,82,0.132,83,1.929,84,1.312,85,3.766,86,0.006,87,0.006,95,0.902,107,0.931,131,2.708,145,0.729,192,1.133,227,3.816,236,1.365,304,2.067,334,4.562,417,2.246,428,3.349,480,2.331,579,3.543,612,2.94,649,3.413,721,2.24,889,5.102,892,1.814,1169,1.716,1436,2.471,1437,5.21,1438,2.822,1439,2.471,1440,2.822,1441,2.822,1442,2.822,1443,4.301,1444,4.301,1445,2.822,1446,2.822,1447,2.822,1448,2.822,1449,2.822,1450,2.822,1451,6.017,1452,5.827,1453,2.822,1454,2.471,1455,2.822,1456,4.301,1457,4.301,1458,4.301,1459,4.301,1460,2.822,1461,2.822,1462,2.822,1463,4.301,1464,2.822]],["title/entities/UserRefreshTokenEntity.html",[0,1.685,579,2.551]],["body/entities/UserRefreshTokenEntity.html",[0,1.548,2,1.124,3,0.139,4,0.139,5,0.115,7,0.608,8,0.368,9,1.033,10,1.111,11,1.356,15,4.265,17,1.819,20,4.265,21,0.678,22,0.012,24,1.633,29,1.725,31,0.858,33,2.161,35,4.111,36,4.265,38,2.69,39,4.622,40,2.455,41,4.622,49,1.417,50,2.635,53,3.121,55,3.694,56,3.121,58,2.028,59,2.824,60,3.958,61,3.958,66,0.243,67,4.265,68,0.808,69,3.694,70,3.958,72,3.694,73,3.694,74,2.635,75,1.447,78,1.675,81,0.127,82,0.253,83,2.635,86,0.007,87,0.007,131,2.9,428,4.011,579,3.285,629,3.603,1169,4.487,1439,3.376,1454,3.376,1465,6.462,1466,3.376,1467,3.855,1468,3.855,1469,3.855,1470,3.855,1471,3.855,1472,3.855,1473,3.855,1474,5.404,1475,3.855]],["title/injectables/UserRefreshTokensService.html",[172,1.187,484,2.551]],["body/injectables/UserRefreshTokensService.html",[0,2.4,2,0.647,3,0.08,4,0.08,5,0.066,7,0.594,8,0.212,9,0.682,10,1.073,11,0.73,13,1.211,18,1.497,21,0.59,22,0.012,24,0.509,28,3.092,29,0.994,31,0.811,40,2.032,58,2.528,66,0.235,75,0.833,76,0.892,81,0.073,82,0.167,86,0.005,87,0.005,94,1.039,95,2.486,96,2.716,97,2.716,98,2.579,99,2.716,104,1.903,106,1.723,107,2.372,108,1.35,111,3.804,112,1.35,115,3.663,116,1.35,123,2.69,130,0.465,145,1.786,168,1.168,172,1.008,173,0.994,178,3.053,180,3.053,182,1.483,184,3.233,189,1.627,190,5.063,192,2.248,193,5.269,194,4.378,195,4.725,197,1.627,198,4.037,200,3.271,201,1.283,202,3.053,204,3.495,207,1.518,208,3.287,216,1.627,217,1.627,218,1.627,219,1.518,221,1.627,222,1.119,228,2.368,236,2.707,238,2.611,239,3.012,240,2.17,243,1.518,245,1.518,247,1.627,248,1.627,258,2.611,259,1.627,260,1.627,262,1.627,269,1.627,270,1.627,271,2.059,274,1.627,275,2.611,278,2.611,281,2.611,484,2.168,579,1.35,609,1.945,610,1.763,612,1.518,629,2.059,892,1.428,1169,4.202,1476,6.052,1477,1.945,1478,5.598,1479,4.467,1480,2.221,1481,2.221,1482,2.221,1483,2.221,1484,2.221,1485,2.221,1486,2.221,1487,2.221,1488,2.221,1489,2.221,1490,3.565,1491,2.221,1492,2.221,1493,3.565,1494,2.221,1495,3.565,1496,2.221,1497,2.221,1498,3.565,1499,2.221,1500,3.565,1501,3.565,1502,2.221,1503,2.221,1504,2.221,1505,2.221,1506,2.221,1507,4.467,1508,2.221,1509,2.221,1510,2.221]],["title/modules/UsersModule.html",[151,1.475,388,2.697]],["body/modules/UsersModule.html",[2,1.536,3,0.19,4,0.19,5,0.157,7,0.557,22,0.012,66,0.276,78,1.633,81,0.173,82,0.247,86,0.009,87,0.009,130,1.104,151,2.339,153,2.45,154,3.354,160,3.664,161,2.772,162,2.772,164,3.501,165,2.772,166,3.664,167,3.602,168,2.772,388,5.419,484,5.183,485,5.183,579,4.047,1511,4.615,1512,4.615,1513,4.615,1514,5.271,1515,5.271,1516,5.271]],["title/injectables/UsersService.html",[172,1.187,485,2.551]],["body/injectables/UsersService.html",[0,2.027,2,0.633,3,0.078,4,0.078,5,0.065,7,0.592,8,0.207,9,0.67,10,1.069,11,0.72,13,1.201,17,1.471,18,1.485,21,0.586,22,0.012,24,0.498,28,3.14,29,0.972,31,0.805,38,1.51,40,2.01,58,2.221,66,0.213,75,0.815,76,0.873,78,0.673,81,0.072,82,0.164,86,0.005,87,0.005,94,1.021,95,2.456,96,2.676,97,2.13,98,2.541,99,2.676,104,1.888,106,1.708,107,2.358,108,2.13,111,4,112,1.321,115,3.671,116,1.321,123,2.676,130,0.455,145,1.774,168,1.143,172,0.991,173,0.972,178,2.394,180,3.008,182,1.457,184,3.197,189,1.591,190,4.559,192,2.223,193,4.743,194,3.697,195,4.967,197,2.565,198,4.001,200,2.565,201,1.255,202,3.008,204,4.427,207,1.485,208,4.001,216,1.591,217,1.591,218,1.591,219,1.485,221,1.591,222,1.095,228,2.35,236,2.677,238,2.565,239,3.136,240,2.26,243,1.485,245,2.394,247,1.591,248,1.591,249,2.78,250,1.724,251,1.255,252,1.231,253,1.724,254,1.724,255,1.724,256,1.724,257,1.724,258,2.565,259,1.591,260,1.591,262,1.591,269,1.591,270,1.591,271,2.541,274,1.591,275,2.565,278,2.565,281,2.565,485,2.13,648,1.902,711,3.067,1089,2.676,1517,1.902,1518,5.536,1519,4.401,1520,2.173,1521,2.173,1522,2.173,1523,2.173,1524,2.173,1525,2.173,1526,2.173,1527,2.173,1528,2.173,1529,3.503,1530,2.173,1531,4.401,1532,2.173,1533,3.503,1534,3.503,1535,2.173,1536,2.173,1537,2.173,1538,2.173,1539,2.173,1540,2.173,1541,4.401,1542,2.173,1543,2.173,1544,2.173,1545,5.048,1546,2.173,1547,2.173]],["title/classes/accounts1644744884181.html",[82,0.197,1548,3.33]],["body/classes/accounts1644744884181.html",[1,2.393,3,0.164,4,0.164,5,0.136,8,0.434,10,1.039,12,4.432,13,1.122,17,2.261,18,1.662,19,3.049,21,0.53,22,0.012,31,0.729,58,1.707,66,0.218,75,1.707,81,0.15,82,0.213,86,0.008,87,0.008,94,1.764,95,2.48,104,1.764,105,1.962,106,1.66,107,2.39,184,2.627,226,3.679,228,2.127,236,3.288,283,0.897,286,3.183,364,3.332,638,4.136,878,4.136,879,4.136,880,4.136,881,4.136,882,3.11,1380,3.984,1548,4.802,1549,5.396,1550,3.611,1551,5.396,1552,5.396,1553,5.396,1554,3.611,1555,6.284,1556,4.55,1557,3.611,1558,4.55,1559,4.432,1560,4.432,1561,4.432,1562,4.432,1563,4.432,1564,3.984,1565,4.802,1566,3.611,1567,4.55,1568,3.611,1569,3.611,1570,4.55]],["title/classes/categories1644767124120.html",[82,0.197,1571,3.33]],["body/classes/categories1644767124120.html",[3,0.162,4,0.162,5,0.134,8,0.429,10,1.036,13,1.113,17,2.253,18,1.653,19,3.023,21,0.632,22,0.012,31,0.723,58,1.685,66,0.216,75,1.685,81,0.148,82,0.21,86,0.008,87,0.008,94,1.749,95,2.471,104,1.749,105,1.936,106,1.646,107,2.378,184,2.594,228,2.108,236,3.266,283,0.886,286,3.156,682,2.472,719,5.28,727,3.289,730,2.887,731,2.887,818,3.857,878,4.101,879,4.101,880,4.101,881,4.101,882,3.07,1381,3.932,1551,5.361,1552,5.361,1553,5.361,1554,3.564,1555,6.263,1557,3.564,1559,4.394,1560,4.394,1561,4.394,1562,4.394,1563,4.394,1565,4.761,1566,3.564,1568,3.564,1569,3.564,1571,4.761,1572,5.361,1573,3.564,1574,4.491,1575,4.491,1576,3.932,1577,3.932,1578,3.932,1579,4.491,1580,4.491]],["title/changelog.html",[749,2.779,1581,3.066,1582,3.502]],["body/changelog.html",[22,0.01,29,2.659,81,0.196,86,0.01,87,0.01,293,3.432,400,5.203,630,3.432,1169,3.613,1385,5.203,1583,5.203,1584,8.181,1585,7.698,1586,7.169,1587,5.203,1588,5.943,1589,5.943,1590,5.943,1591,4.716,1592,5.943,1593,5.943,1594,5.943,1595,7.698,1596,5.943,1597,5.943,1598,5.943,1599,5.943,1600,7.169,1601,5.943,1602,5.943,1603,5.943,1604,5.203,1605,5.943,1606,5.943,1607,5.943,1608,5.943,1609,5.943,1610,5.943]],["title/coverage.html",[1611,4.547]],["body/coverage.html",[0,2.229,1,1.149,5,0.065,6,1.912,17,0.637,21,0.191,22,0.012,30,1.6,78,0.677,82,0.392,86,0.005,87,0.005,88,2.757,89,1.6,91,1.912,101,1.493,105,1.904,113,1.6,117,1.6,131,1.015,135,1.328,138,1.404,172,2.087,174,1.912,176,1.202,240,0.793,282,1.733,284,1.912,285,2.792,309,1.261,332,1.6,333,1.912,348,1.774,422,1.6,423,1.912,437,1.493,441,1.493,447,1.328,454,1.404,458,1.6,462,1.404,466,1.404,470,1.328,474,1.328,478,1.493,484,1.328,485,1.328,487,1.261,488,1.6,490,1.261,530,1.493,531,1.493,545,1.733,557,1.912,571,1.493,579,1.328,613,1.261,614,1.261,638,5.679,670,1.6,671,1.912,673,1.493,676,1.6,678,1.6,680,1.404,682,1.202,695,1.912,718,1.733,739,1.912,750,6.881,756,4.345,787,1.912,788,1.912,792,1.202,800,1.912,801,2.792,814,1.912,815,2.792,826,2.684,827,1.6,829,4.066,830,3.708,846,1.733,849,1.912,850,3.568,851,1.493,852,1.733,853,2.576,883,1.912,884,3.235,896,1.912,897,1.6,898,1.912,899,1.912,903,1.6,904,1.912,937,3.235,938,1.493,940,1.493,941,1.6,942,1.6,943,1.404,946,1.404,949,1.6,954,1.6,958,1.912,984,1.912,1019,1.733,1067,1.912,1079,1.328,1080,2.792,1081,3.08,1082,2.792,1083,2.792,1084,1.149,1123,2.792,1124,1.733,1138,1.733,1139,1.912,1142,1.912,1146,3.461,1147,3.461,1151,1.912,1163,1.912,1164,1.912,1169,2.139,1174,1.912,1175,1.912,1194,1.912,1201,1.733,1202,1.912,1203,2.792,1205,1.328,1207,1.733,1212,2.792,1213,2.792,1216,2.792,1224,1.6,1229,1.912,1230,1.912,1233,1.912,1234,1.912,1235,1.912,1236,1.6,1237,1.912,1267,1.733,1268,2.792,1269,1.733,1270,1.912,1275,1.404,1283,1.328,1292,1.6,1293,1.733,1296,1.404,1306,3.235,1307,3.235,1321,1.912,1358,1.733,1383,1.6,1384,1.912,1394,1.6,1397,1.6,1417,1.912,1422,1.912,1425,3.235,1426,1.404,1430,1.912,1433,1.912,1436,1.912,1465,1.912,1466,1.912,1476,1.912,1477,1.912,1517,1.912,1548,1.733,1549,2.792,1550,2.792,1571,1.733,1572,2.792,1573,2.792,1591,1.733,1611,1.733,1612,2.184,1613,2.184,1614,1.912,1615,7.466,1616,7.029,1617,1.912,1618,7.859,1619,6.489,1620,1.912,1621,5.551,1622,1.912,1623,1.912,1624,1.912,1625,1.912,1626,7.905,1627,2.792,1628,1.912,1629,1.912,1630,1.912,1631,1.912,1632,2.184,1633,2.184,1634,4.416,1635,2.792,1636,2.792,1637,1.733,1638,1.912,1639,1.912,1640,1.912,1641,1.912,1642,2.184,1643,2.184,1644,1.912,1645,2.184,1646,2.184,1647,2.184,1648,5.932,1649,2.184,1650,2.184,1651,4.86,1652,1.912,1653,1.912,1654,3.867,1655,3.08,1656,1.912,1657,1.912,1658,3.518,1659,2.184,1660,3.518,1661,2.184,1662,3.518,1663,2.184,1664,2.184,1665,2.184,1666,2.184,1667,3.518,1668,3.518,1669,3.518,1670,3.08,1671,1.912,1672,1.912,1673,2.184,1674,1.912,1675,1.912,1676,1.912]],["title/dependencies.html",[154,2.543,1677,3.066]],["body/dependencies.html",[22,0.012,29,2.229,68,1.044,75,1.87,82,0.301,86,0.009,87,0.009,130,1.044,154,2.51,168,2.621,243,3.406,303,5.131,339,4.362,347,3.954,392,4.362,395,3.203,397,4.362,414,3.406,534,3.904,535,4.128,536,3.649,539,3.203,541,3.954,612,3.406,745,4.362,796,2.072,939,3.649,977,3.954,1183,5.097,1184,3.954,1220,3.954,1338,4.362,1587,4.362,1604,4.362,1678,4.982,1679,7.107,1680,4.982,1681,4.982,1682,6.422,1683,4.982,1684,6.422,1685,6.422,1686,4.982,1687,4.982,1688,4.982,1689,4.982,1690,4.982,1691,4.982,1692,4.982,1693,4.982,1694,4.982,1695,4.982,1696,4.982,1697,4.982,1698,4.982,1699,4.982,1700,4.982,1701,4.982,1702,4.982,1703,4.982,1704,4.982,1705,4.982,1706,4.982,1707,4.982,1708,4.982,1709,4.982,1710,4.982,1711,4.982,1712,4.982,1713,4.982,1714,4.982]],["title/miscellaneous/enumerations.html",[1715,2.022,1716,4.419]],["body/miscellaneous/enumerations.html",[7,0.309,8,0.386,21,0.355,22,0.012,31,0.488,43,2.817,86,0.008,87,0.008,192,3.516,222,2.817,718,3.213,727,4.095,730,4.659,731,4.659,767,4.896,770,3.545,771,3.545,772,3.545,852,3.213,853,4.095,867,4.095,869,4.896,978,4.437,1358,3.213,1451,4.896,1715,2.338,1716,3.545,1717,4.049,1718,4.049,1719,4.049,1720,4.049,1721,4.049,1722,5.591,1723,3.545,1724,5.591,1725,4.049,1726,4.049,1727,5.591,1728,4.049,1729,4.049,1730,6.404,1731,5.083,1732,5.591,1733,4.049,1734,5.591,1735,5.591,1736,5.591,1737,4.049,1738,5.591,1739,5.591,1740,5.591,1741,5.591,1742,5.591,1743,5.591,1744,5.591,1745,5.591,1746,5.591,1747,4.049,1748,4.049,1749,5.591,1750,5.591,1751,5.591,1752,5.591,1753,5.591,1754,4.049,1755,4.049,1756,5.591,1757,5.591,1758,4.049,1759,4.049,1760,5.591,1761,5.591,1762,4.049,1763,4.049,1764,5.591,1765,5.591,1766,5.591,1767,5.591,1768,4.049,1769,5.591,1770,4.049,1771,5.591,1772,5.591]],["title/miscellaneous/functions.html",[1715,2.022,1773,4.006]],["body/miscellaneous/functions.html",[7,0.498,8,0.486,13,1.45,18,1.793,21,0.713,22,0.011,40,1.848,49,1.704,58,2.84,86,0.009,87,0.009,104,2.28,105,2.808,106,2.146,192,2.045,201,4.146,827,4.769,829,4.769,830,5.258,833,4.458,837,4.458,845,4.458,846,5.168,1095,3.095,1207,5.168,1620,4.458,1627,4.041,1630,5.702,1631,5.702,1640,4.458,1641,6.286,1671,5.702,1672,5.702,1674,5.702,1715,2.94,1773,4.041,1774,5.091,1775,6.286,1776,5.091,1777,4.458,1778,5.091,1779,5.091,1780,5.091,1781,5.091,1782,6.512,1783,5.091]],["title/index.html",[8,0.334,749,2.779,1581,3.066]],["body/index.html",[22,0.01,86,0.01,87,0.01]],["title/modules.html",[153,2.663]],["body/modules.html",[22,0.01,86,0.01,87,0.01,152,3.777,153,2.731,159,3.393,380,4.304,383,4.017,384,3.777,385,4.017,386,4.017,387,4.017,388,3.777,529,4.017,1117,6.234,1784,8.464,1785,8.464,1786,8.464,1787,8.572,1788,7.12]],["title/overview.html",[1789,5.017]],["body/overview.html",[2,1.141,22,0.012,86,0.007,87,0.007,90,1.751,138,4.892,152,5.069,153,1.819,154,2.751,155,3.426,156,3.426,157,3.426,158,3.426,159,4.483,160,3.005,161,2.058,162,2.058,173,1.751,176,4.188,283,0.772,348,3.056,380,6.167,381,3.426,382,3.426,383,5.646,384,4.892,385,5.068,386,4.299,387,5.567,388,5.134,484,4.626,485,4.626,490,4.394,525,3.426,526,3.426,527,3.426,528,3.426,529,4.299,530,4.299,531,4.299,585,2.515,636,3.426,680,4.892,689,3.426,690,3.426,691,3.426,733,3.426,734,3.426,735,3.426,828,2.26,934,3.426,935,3.426,936,3.426,1397,5.573,1407,3.426,1408,3.426,1410,3.426,1511,3.426,1512,3.426,1513,3.426,1789,3.426,1790,5.46,1791,3.913,1792,3.913]],["title/properties.html",[9,0.965,1677,3.066]],["body/properties.html",[7,0.486,9,1.216,22,0.011,75,2.386,86,0.01,87,0.01,184,3.671,303,4.346,763,5.566,1583,5.566,1793,6.358,1794,6.358,1795,6.358,1796,6.358,1797,7.462,1798,6.358,1799,6.358,1800,6.358,1801,6.358]],["title/miscellaneous/typealiases.html",[1715,2.022,1802,5.047]],["body/miscellaneous/typealiases.html",[8,0.589,21,0.709,22,0.01,86,0.01,87,0.01,187,6.208,223,5.37,1002,6.42,1010,6.42,1018,6.42,1715,3.563,1803,6.17,1804,8.094,1805,8.094,1806,7.332,1807,7.332,1808,7.332]],["title/unit-test.html",[1731,3.579,1809,3.949]],["body/unit-test.html",[5,0.196,22,0.01,86,0.01,87,0.01,240,2.388,1611,5.22,1614,5.759,1675,5.759,1676,5.759,1731,5.22,1773,5.22,1809,5.759,1810,6.577,1811,6.577]],["title/classes/user1615673396368.html",[82,0.197,1637,3.33]],["body/classes/user1615673396368.html",[3,0.175,4,0.175,5,0.145,8,0.463,10,1.058,13,1.171,17,2.046,18,1.448,21,0.554,22,0.012,31,0.761,58,1.822,66,0.227,75,1.822,78,1.505,79,3.121,81,0.16,82,0.228,86,0.008,87,0.008,94,1.841,95,2.525,104,1.841,105,2.093,106,1.733,107,2.451,184,2.804,228,2.22,236,3.394,283,0.957,286,3.322,417,2.723,480,2.172,888,3.853,1551,5.571,1552,5.571,1553,5.571,1554,3.853,1555,6.383,1557,3.853,1559,3.556,1560,3.556,1561,3.556,1562,3.556,1563,3.556,1565,5.012,1566,3.853,1568,3.853,1569,3.853,1635,5.571,1636,3.853,1637,5.012,1812,4.855,1813,4.855,1814,4.251,1815,4.855,1816,4.855]],["title/miscellaneous/variables.html",[1715,2.022,1817,4.419]],["body/miscellaneous/variables.html",[7,0.425,8,0.246,12,2.942,17,2.061,18,1.381,19,2.801,21,0.685,22,0.012,23,2.593,30,2.942,38,2.597,40,2.93,49,1.606,58,1.849,78,0.8,86,0.005,87,0.005,105,2.87,131,1.867,145,1.274,169,1.765,192,3.33,202,1.765,226,2.442,228,1.732,240,1.458,245,1.765,305,1.765,307,2.261,328,3.517,348,2.561,362,2.049,364,1.891,417,1.732,424,2.261,480,1.155,545,3.187,585,1.66,638,3.369,719,4.072,730,1.66,731,1.66,752,1.891,753,3.187,818,2.582,829,1.891,830,2.942,878,3.8,879,3.8,880,3.8,881,3.8,882,2.745,888,2.049,937,1.891,940,3.369,941,2.942,942,3.61,943,3.574,949,2.942,950,2.049,951,2.049,952,2.049,953,2.049,967,2.942,1019,3.187,1031,2.261,1085,1.66,1086,1.66,1089,1.57,1122,1.891,1124,3.187,1223,2.049,1292,3.61,1293,3.911,1549,2.049,1550,3.187,1559,4.411,1560,4.411,1561,4.411,1562,4.411,1563,4.411,1564,2.261,1572,2.049,1573,3.187,1576,2.261,1577,2.261,1578,2.261,1591,3.187,1615,2.261,1617,2.261,1622,2.261,1623,3.517,1624,2.261,1625,3.517,1627,2.049,1628,3.517,1629,3.517,1635,2.049,1636,3.187,1638,2.261,1639,3.517,1644,2.261,1651,4.315,1652,3.517,1653,3.517,1654,4.868,1655,2.261,1656,4.315,1657,4.315,1670,2.261,1715,1.491,1723,5.274,1775,2.261,1777,2.261,1814,2.261,1817,2.261,1818,2.582,1819,4.016,1820,2.582,1821,2.582,1822,2.582,1823,2.582,1824,4.016,1825,2.582,1826,2.582,1827,4.016,1828,2.582,1829,4.016,1830,4.016,1831,4.016,1832,2.582,1833,2.582,1834,2.582,1835,2.582,1836,4.016,1837,2.582,1838,2.582,1839,2.582,1840,4.929,1841,2.582,1842,2.582,1843,2.582,1844,2.582,1845,2.582,1846,2.582,1847,2.582,1848,2.582,1849,2.582,1850,2.582,1851,2.582,1852,2.582,1853,2.582,1854,2.582,1855,4.016,1856,2.582,1857,2.582,1858,4.016,1859,2.582,1860,2.582,1861,2.582,1862,2.582,1863,2.582,1864,2.582,1865,2.582,1866,2.582,1867,2.582,1868,2.582,1869,2.582,1870,2.582]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/accounts1644744884181.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1712,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["0.26.1",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":1606,"title":{},"body":{"changelog.html":{}}}],["0.3.4",{"_index":1714,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1599,"title":{},"body":{"changelog.html":{}}}],["0.4.1",{"_index":1707,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":1593,"title":{},"body":{"changelog.html":{}}}],["0.5.1",{"_index":1587,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["0.5.2",{"_index":1583,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["0.5.3",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1626,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1661,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1658,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1621,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1659,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1669,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1673,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":1594,"title":{},"body":{"changelog.html":{}}}],["04",{"_index":1600,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":1585,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":1586,"title":{},"body":{"changelog.html":{}}}],["067f2f3e",{"_index":1559,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["07",{"_index":1607,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":1601,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":362,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateTransactionDto.html":{},"miscellaneous/variables.html":{}}}],["1/1",{"_index":1618,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["100",{"_index":1615,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["100).tostring",{"_index":1854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11/13",{"_index":1643,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["123456",{"_index":790,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["14",{"_index":1791,"title":{},"body":{"overview.html":{}}}],["14/19",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["15/19",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["16.0.0",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":364,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateTransactionDto.html":{},"classes/accounts1644744884181.html":{},"miscellaneous/variables.html":{}}}],["2.0.0",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1616,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{}}}],["2022",{"_index":1584,"title":{},"body":{"changelog.html":{}}}],["256",{"_index":1374,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["29d7404b1bca",{"_index":882,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["29d7404b1bcb",{"_index":1564,"title":{},"body":{"classes/accounts1644744884181.html":{},"miscellaneous/variables.html":{}}}],["29d7404b1d54",{"_index":1577,"title":{},"body":{"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["2b$08$s7ozpkbrfwdac0wjrzi3wunhwbzzdk4chx3ea.2aztsl0vebkhpo",{"_index":1814,"title":{},"body":{"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["2})@apiproperty({example",{"_index":858,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["3.6.0",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":365,"title":{},"body":{"controllers/AppController.html":{}}}],["31",{"_index":367,"title":{},"body":{"controllers/AppController.html":{}}}],["32",{"_index":720,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["320",{"_index":889,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/UserEntity.html":{}}}],["34e532f",{"_index":1598,"title":{},"body":{"changelog.html":{}}}],["39",{"_index":1792,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1708,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":1699,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1619,"title":{},"body":{"coverage.html":{}}}],["4029",{"_index":1561,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["48ea",{"_index":880,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":1790,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":1704,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["6.0.5",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1706,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1663,"title":{},"body":{"coverage.html":{}}}],["64",{"_index":53,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["7.0.1",{"_index":1701,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["7.3.0",{"_index":1713,"title":{},"body":{"dependencies.html":{}}}],["7.6.1",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["73",{"_index":1665,"title":{},"body":{"coverage.html":{}}}],["78",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["7b47a5f",{"_index":1605,"title":{},"body":{"changelog.html":{}}}],["7bit",{"_index":841,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["7e62cab",{"_index":1610,"title":{},"body":{"changelog.html":{}}}],["8",{"_index":892,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{}}}],["8.0.0",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["8.0.8",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["8.4.1",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":1710,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1662,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":1650,"title":{},"body":{"coverage.html":{}}}],["84",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["8631",{"_index":879,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["88",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["9/10",{"_index":1668,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1667,"title":{},"body":{"coverage.html":{}}}],["93d6",{"_index":1562,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["98fd",{"_index":881,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["__dirname",{"_index":932,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["_err",{"_index":1168,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["absolute",{"_index":765,"title":{},"body":{"injectables/ConfigService.html":{}}}],["acc",{"_index":1031,"title":{},"body":{"injectables/ExchangeRateService.html":{},"miscellaneous/variables.html":{}}}],["acc.push(current.base",{"_index":1053,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["acc[current.base",{"_index":1033,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["acc[key",{"_index":1866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessors",{"_index":1088,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{}}}],["account",{"_index":226,"title":{},"body":{"injectables/AccountsService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"classes/accounts1644744884181.html":{},"miscellaneous/variables.html":{}}}],["account.balance).tofixed(2",{"_index":232,"title":{},"body":{"injectables/AccountsService.html":{}}}],["account.dto",{"_index":1420,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["account.dto.ts",{"_index":801,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["account.dto.ts:16",{"_index":807,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:23",{"_index":803,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:30",{"_index":805,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account_already_exist",{"_index":1754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["account_already_exists",{"_index":1755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["account_not_found",{"_index":1757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accountentity",{"_index":1,"title":{"entities/AccountEntity.html":{}},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/SelectAccountsDto.html":{},"entities/TransactionEntity.html":{},"modules/TransactionsModule.html":{},"classes/accounts1644744884181.html":{},"coverage.html":{}}}],["accountentityrepository",{"_index":175,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts",{"_index":93,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/SelectTransactionsDto.html":{},"modules/TransactionsModule.html":{}}}],["accounts.controller",{"_index":170,"title":{},"body":{"modules/AccountsModule.html":{}}}],["accounts.dto.ts",{"_index":1230,"title":{},"body":{"classes/SelectAccountsDto.html":{},"coverage.html":{}}}],["accounts.map((account",{"_index":266,"title":{},"body":{"injectables/AccountsService.html":{}}}],["accounts.service",{"_index":139,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{}}}],["accounts.ts",{"_index":1550,"title":{},"body":{"classes/accounts1644744884181.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["accounts.ts:25",{"_index":1558,"title":{},"body":{"classes/accounts1644744884181.html":{}}}],["accounts.ts:31",{"_index":1556,"title":{},"body":{"classes/accounts1644744884181.html":{}}}],["accounts/entities",{"_index":1412,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["accounts1644744884181",{"_index":1548,"title":{"classes/accounts1644744884181.html":{}},"body":{"classes/accounts1644744884181.html":{},"coverage.html":{}}}],["accounts?.length",{"_index":1265,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["accounts_not_found",{"_index":1756,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["accountscontroller",{"_index":89,"title":{"controllers/AccountsController.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"coverage.html":{}}}],["accountsmodule",{"_index":152,"title":{"modules/AccountsModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["accountsservice",{"_index":138,"title":{"injectables/AccountsService.html":{}},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"coverage.html":{},"overview.html":{}}}],["activated",{"_index":1772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["add",{"_index":1537,"title":{},"body":{"injectables/UsersService.html":{}}}],["addbalanceinbasecurrency",{"_index":177,"title":{},"body":{"injectables/AccountsService.html":{}}}],["addbalanceinbasecurrency(undefined",{"_index":186,"title":{},"body":{"injectables/AccountsService.html":{}}}],["added",{"_index":1596,"title":{},"body":{"changelog.html":{}}}],["admin@gmail.com",{"_index":888,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["affected",{"_index":281,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["aliases",{"_index":1803,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexceptionfilter",{"_index":282,"title":{"classes/AllExceptionFilter.html":{}},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["amount",{"_index":854,"title":{},"body":{"classes/CreateTransactionDto.html":{},"injectables/ExchangeRateService.html":{},"entities/TransactionEntity.html":{}}}],["amountinaccountcurrency",{"_index":1359,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["amountinbasecurrency",{"_index":1360,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["api",{"_index":1345,"title":{},"body":{"injectables/SendGridService.html":{}}}],["apibearerauth",{"_index":120,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["apibody",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{}}}],["apihideproperty",{"_index":67,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apihideproperty()@column({type",{"_index":1447,"title":{},"body":{"entities/UserEntity.html":{}}}],["apihideproperty()@manytoone(undefined",{"_index":59,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apihideproperty()@onetomany(undefined",{"_index":1449,"title":{},"body":{"entities/UserEntity.html":{}}}],["apikey",{"_index":554,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["apiproperty",{"_index":33,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apiproperty()@column({type",{"_index":25,"title":{},"body":{"entities/AccountEntity.html":{},"entities/TransactionEntity.html":{}}}],["apiproperty()@isenum(currencyenum",{"_index":901,"title":{},"body":{"classes/CurrencyBaseParamDto.html":{}}}],["apiproperty({enum",{"_index":44,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{}}}],["apiproperty({maxlength",{"_index":52,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{}}}],["apiproperty({readonly",{"_index":36,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["apiproperty({type",{"_index":1093,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"entities/TransactionEntity.html":{}}}],["apipropertyoptional",{"_index":823,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{}}}],["apipropertyoptional({type",{"_index":1239,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["apitags",{"_index":121,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ExchangerateController.html":{},"controllers/TransactionsController.html":{}}}],["apitags('accounts",{"_index":140,"title":{},"body":{"controllers/AccountsController.html":{}}}],["apitags('auth",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('categories",{"_index":683,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apitags('exchangerate",{"_index":1074,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["apitags('status",{"_index":350,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('transactions",{"_index":1399,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["app.controller",{"_index":405,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":396,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":332,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":770,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["appmodule",{"_index":380,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":1319,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["argumentshost",{"_index":295,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["array",{"_index":1829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.reduce((result",{"_index":1832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arraymaxsize",{"_index":1250,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["arraymaxsize(2",{"_index":1257,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["arraymaxsize(object.values(transactiontypeenum).length",{"_index":1254,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["arrayminsize",{"_index":1251,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["arrayminsize(2",{"_index":1256,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["asc",{"_index":1085,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":95,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["auth",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["auth.constants",{"_index":546,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["auth/guards",{"_index":136,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["auth_forbidden",{"_index":1743,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_incorrect_confirmation_email_code",{"_index":1745,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_incorrect_credentials",{"_index":1739,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_invalid_refresh_token",{"_index":1740,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_invalid_token",{"_index":1741,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_pass",{"_index":376,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["auth_passwords_do_not_match",{"_index":1746,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["auth_unauthorized",{"_index":1742,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["authcontroller",{"_index":422,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1156,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('jwt",{"_index":1158,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authmodule",{"_index":383,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1800,"title":{},"body":{"properties.html":{}}}],["authservice",{"_index":490,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1117,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"modules.html":{}}}],["await",{"_index":236,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["axios",{"_index":939,"title":{},"body":{"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"dependencies.html":{}}}],["axios.constants.ts",{"_index":1652,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["axios_instance_token",{"_index":940,"title":{},"body":{"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["axiosinstance",{"_index":996,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["b2f58ae4f489",{"_index":1563,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["b936",{"_index":1560,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["backend",{"_index":1798,"title":{},"body":{"properties.html":{}}}],["backend.git",{"_index":1799,"title":{},"body":{"properties.html":{}}}],["badgatewayexception",{"_index":1017,"title":{},"body":{"injectables/ExchangeRateService.html":{},"injectables/SendGridService.html":{}}}],["badgatewayexception(errortypeenum.exchangerate_not_found_from_api",{"_index":1048,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["badgatewayexception(errortypeenum.exchangerate_not_found_from_cache",{"_index":1036,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["badrequestexception",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["badrequestexception(errortypeenum.auth_incorrect_confirmation_email_code",{"_index":655,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(errortypeenum.auth_incorrect_credentials",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["badrequestexception(errortypeenum.auth_passwords_do_not_match",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(errortypeenum.new_password_and_old_password_cannot_be_same",{"_index":666,"title":{},"body":{"injectables/AuthService.html":{}}}],["balance",{"_index":12,"title":{},"body":{"entities/AccountEntity.html":{},"classes/CreateAccountDto.html":{},"classes/accounts1644744884181.html":{},"miscellaneous/variables.html":{}}}],["balanceinbasecurrency",{"_index":14,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{}}}],["bar",{"_index":1849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base",{"_index":900,"title":{},"body":{"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"injectables/ExchangeRateService.html":{}}}],["basecurrency",{"_index":227,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/UserEntity.html":{}}}],["based",{"_index":763,"title":{},"body":{"injectables/ConfigService.html":{},"properties.html":{}}}],["bcrypt",{"_index":612,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"dependencies.html":{}}}],["bcrypt.hash(this.password",{"_index":1464,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeinsert",{"_index":1457,"title":{},"body":{"entities/UserEntity.html":{}}}],["beforeupdate",{"_index":1458,"title":{},"body":{"entities/UserEntity.html":{}}}],["between",{"_index":1252,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["between(...date",{"_index":1261,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["bigint",{"_index":26,"title":{},"body":{"entities/AccountEntity.html":{},"entities/TransactionEntity.html":{}}}],["body",{"_index":122,"title":{},"body":{"controllers/AccountsController.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["boolean",{"_index":775,"title":{},"body":{"injectables/ConfigService.html":{}}}],["bootstrap",{"_index":1641,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brackets",{"_index":1253,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["brackets((qb",{"_index":1259,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["branches",{"_index":1810,"title":{},"body":{"unit-test.html":{}}}],["broodd",{"_index":1801,"title":{},"body":{"properties.html":{}}}],["browse",{"_index":1787,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1784,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{}}}],["buffer.readuint32be(0x0f",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{}}}],["bug",{"_index":1588,"title":{},"body":{"changelog.html":{}}}],["bull",{"_index":977,"title":{},"body":{"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":394,"title":{},"body":{"modules/AppModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["bullmodule.forrootasync",{"_index":413,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":950,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"miscellaneous/variables.html":{}}}],["cache",{"_index":534,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"dependencies.html":{}}}],["cache.constants.ts",{"_index":1653,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_auth_prefix",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_exchangerate_prefix",{"_index":941,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cache_manager",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExchangeRateService.html":{}}}],["cachecode",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{}}}],["cachemanager",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExchangeRateService.html":{}}}],["cachemodule",{"_index":537,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["cachemodule.registerasync",{"_index":550,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["callhandler",{"_index":1221,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["calling",{"_index":1118,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["cascade",{"_index":61,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["catch",{"_index":271,"title":{},"body":{"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":292,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":1141,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["categories",{"_index":672,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/SelectTransactionsDto.html":{},"modules/TransactionsModule.html":{}}}],["categories.controller",{"_index":693,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.dto.ts",{"_index":1234,"title":{},"body":{"classes/SelectCategoriesDto.html":{},"coverage.html":{}}}],["categories.service",{"_index":681,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories.ts",{"_index":1573,"title":{},"body":{"classes/categories1644767124120.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categories.ts:27",{"_index":1575,"title":{},"body":{"classes/categories1644767124120.html":{}}}],["categories.ts:33",{"_index":1574,"title":{},"body":{"classes/categories1644767124120.html":{}}}],["categories1644767124120",{"_index":1571,"title":{"classes/categories1644767124120.html":{}},"body":{"classes/categories1644767124120.html":{},"coverage.html":{}}}],["categories?.length",{"_index":1263,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["categories_not_found",{"_index":1760,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["categoriescontroller",{"_index":670,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":384,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":680,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":818,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["category.dto",{"_index":1423,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":815,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:14",{"_index":821,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:22",{"_index":819,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:31",{"_index":817,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category_already_exist",{"_index":1758,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["category_already_exists",{"_index":1759,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["category_not_found",{"_index":1761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["categoryentity",{"_index":682,"title":{"entities/CategoryEntity.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/SelectCategoriesDto.html":{},"entities/TransactionEntity.html":{},"classes/categories1644767124120.html":{},"coverage.html":{}}}],["categoryentityrepository",{"_index":696,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categorytypeenum",{"_index":727,"title":{},"body":{"entities/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/categories1644767124120.html":{},"miscellaneous/enumerations.html":{}}}],["categorytypeenum.expense",{"_index":1576,"title":{},"body":{"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["categorytypeenum.income",{"_index":1578,"title":{},"body":{"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["changelog",{"_index":1582,"title":{"changelog.html":{}},"body":{}}],["checked",{"_index":774,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checking",{"_index":769,"title":{},"body":{"injectables/ConfigService.html":{}}}],["class",{"_index":82,"title":{"classes/AllExceptionFilter.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"classes/ExchangeRateProcessor.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"coverage.html":{},"dependencies.html":{},"classes/user1615673396368.html":{}}}],["classes",{"_index":283,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"classes/ExchangeRateProcessor.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"overview.html":{},"classes/user1615673396368.html":{}}}],["classref",{"_index":1780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["classserializerinterceptor",{"_index":129,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["clientresponse",{"_index":1336,"title":{},"body":{"injectables/SendGridService.html":{}}}],["cluster_accountsmodule",{"_index":155,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_exports",{"_index":157,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_imports",{"_index":158,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_accountsmodule_providers",{"_index":156,"title":{},"body":{"modules/AccountsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":381,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":382,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":525,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":527,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":526,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":689,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_exports",{"_index":690,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":691,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":733,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":735,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_providers",{"_index":734,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_exchangeratemodule",{"_index":934,"title":{},"body":{"modules/ExchangeRateModule.html":{},"overview.html":{}}}],["cluster_exchangeratemodule_exports",{"_index":935,"title":{},"body":{"modules/ExchangeRateModule.html":{},"overview.html":{}}}],["cluster_exchangeratemodule_providers",{"_index":936,"title":{},"body":{"modules/ExchangeRateModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":1407,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_exports",{"_index":1410,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":1409,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":1408,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1511,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1512,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1513,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["color",{"_index":719,"title":{},"body":{"entities/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["column",{"_index":69,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["column.transformer.ts",{"_index":1639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["columns",{"_index":1109,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["common",{"_index":250,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["compare",{"_index":611,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["compare(data",{"_index":650,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(ppid",{"_index":1192,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["compress",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["concat(message",{"_index":331,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["concat(value",{"_index":1127,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{}}}],["conditions",{"_index":111,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ExchangerateController.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["config",{"_index":349,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/ConfigService.html":{}}}],["config.service",{"_index":738,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configmode",{"_index":767,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["configmodule",{"_index":385,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":348,"title":{"injectables/ConfigService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('cache_auth_ttl",{"_index":551,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('cache_exchangerate_ttl",{"_index":955,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["configservice.get('is_heroku_worker",{"_index":957,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["configservice.get('jwt_secret_access_token",{"_index":1198,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret_refresh_token",{"_index":1190,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["configservice.get('redis_has_password",{"_index":418,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["configservice.get('redis_host",{"_index":415,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["configservice.get('redis_password",{"_index":419,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["configservice.get('redis_port",{"_index":416,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["configservice.get('redis_tls",{"_index":552,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["configservice.get('sendgrid_api_key",{"_index":555,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('sendgrid_api_sender",{"_index":556,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('throttle_limit",{"_index":412,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('throttle_ttl",{"_index":410,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('typeorm_cache",{"_index":920,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_database",{"_index":916,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_drop_schema",{"_index":924,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_host",{"_index":914,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_logging",{"_index":922,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_migrations_run",{"_index":928,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_name",{"_index":912,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_password",{"_index":919,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_port",{"_index":915,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_ssl",{"_index":911,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_synchronize",{"_index":926,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_type",{"_index":913,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('typeorm_username",{"_index":918,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getdest('store_dest",{"_index":840,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["configuration",{"_index":740,"title":{},"body":{"injectables/ConfigService.html":{}}}],["confirmationemaildto",{"_index":478,"title":{"classes/ConfirmationEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["conflictexception",{"_index":216,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["conflictexception(errortypeenum.account_already_exist",{"_index":241,"title":{},"body":{"injectables/AccountsService.html":{}}}],["conflictexception(errortypeenum.category_already_exist",{"_index":710,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["conflictexception(errortypeenum.user_already_exist",{"_index":1534,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception(errortypeenum.user_refresh_token_already_exist",{"_index":1501,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["connection",{"_index":1565,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["connection.getrepository(accountentity",{"_index":1567,"title":{},"body":{"classes/accounts1644744884181.html":{}}}],["connection.getrepository(accountentity).delete(data.map",{"_index":1570,"title":{},"body":{"classes/accounts1644744884181.html":{}}}],["connection.getrepository(categoryentity",{"_index":1579,"title":{},"body":{"classes/categories1644767124120.html":{}}}],["connection.getrepository(categoryentity).delete(data.map",{"_index":1580,"title":{},"body":{"classes/categories1644767124120.html":{}}}],["connection.getrepository(userentity",{"_index":1815,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.getrepository(userentity).delete(data.map",{"_index":1816,"title":{},"body":{"classes/user1615673396368.html":{}}}],["connection.synchronize",{"_index":1566,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["console.error(e",{"_index":1569,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["const",{"_index":228,"title":{},"body":{"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/SelectTransactionsDto.html":{},"injectables/SendGridService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":944,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["constructor",{"_index":182,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationTransactionsDto.html":{},"injectables/SendGridService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["constructor([result",{"_index":1210,"title":{},"body":{"classes/PaginationTransactionsDto.html":{}}}],["constructor(accountentityrepository",{"_index":183,"title":{},"body":{"injectables/AccountsService.html":{}}}],["constructor(cachemanager",{"_index":994,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["constructor(categoryentityrepository",{"_index":697,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(configservice",{"_index":1177,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(exchangerateservice",{"_index":962,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["constructor(options",{"_index":1326,"title":{},"body":{"injectables/SendGridService.html":{}}}],["constructor(private",{"_index":144,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"classes/ExchangeRateProcessor.html":{},"controllers/ExchangerateController.html":{},"controllers/TransactionsController.html":{}}}],["constructor(undefined",{"_index":1204,"title":{},"body":{"classes/PaginationTransactionsDto.html":{}}}],["constructor(userentityrepository",{"_index":1520,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userrefreshtokenentityrepository",{"_index":1480,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["constructor(userrefreshtokensservice",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":1225,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":88,"title":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ExchangerateController.html":{},"controllers/TransactionsController.html":{}},"body":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/ExchangerateController.html":{},"controllers/TransactionsController.html":{},"coverage.html":{}}}],["controller('accounts",{"_index":141,"title":{},"body":{"controllers/AccountsController.html":{}}}],["controller('auth",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":684,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('exchangerate",{"_index":1075,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["controller('status",{"_index":351,"title":{},"body":{"controllers/AppController.html":{}}}],["controller('transactions",{"_index":1400,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["controllers",{"_index":90,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"modules/ExchangeRateModule.html":{},"controllers/ExchangerateController.html":{},"classes/MockExchangeRateProcessor.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"overview.html":{}}}],["convert.type.ts",{"_index":1807,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["count",{"_index":1209,"title":{},"body":{"classes/PaginationTransactionsDto.html":{}}}],["coverage",{"_index":1611,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["create",{"_index":1419,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["createaccountdto",{"_index":101,"title":{"classes/CreateAccountDto.html":{}},"body":{"controllers/AccountsController.html":{},"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["createasyncoptionsprovider",{"_index":1273,"title":{},"body":{"modules/SendGridModule.html":{}}}],["createasyncoptionsprovider(options",{"_index":1274,"title":{},"body":{"modules/SendGridModule.html":{}}}],["createasyncproviders",{"_index":1278,"title":{},"body":{"modules/SendGridModule.html":{}}}],["createasyncproviders(options",{"_index":1279,"title":{},"body":{"modules/SendGridModule.html":{}}}],["createcategorydto",{"_index":673,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createdat",{"_index":15,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["createdatecolumn",{"_index":72,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["createmockfile",{"_index":1674,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockfile(data",{"_index":845,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"miscellaneous/functions.html":{}}}],["createmockfilemeta",{"_index":846,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmockfilemeta(data",{"_index":837,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"miscellaneous/functions.html":{}}}],["createmockfilereturn",{"_index":827,"title":{"interfaces/CreateMockFileReturn.html":{}},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createone",{"_index":96,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["createone(data",{"_index":100,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["createone(entitylike",{"_index":189,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["createoneexportcsv",{"_index":1386,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["createoneexportcsv(rep",{"_index":1388,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["createparamdecorator((data",{"_index":1868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createprofiledto",{"_index":441,"title":{"classes/CreateProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":1504,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["createrepmock",{"_index":1672,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createrepmock(mimetype",{"_index":1778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createsendgridoptions",{"_index":1318,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["createtoken",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createtoken(@body",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtoken(data",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{}}}],["createtoken(undefined",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtransactiondto",{"_index":851,"title":{"classes/CreateTransactionDto.html":{}},"body":{"classes/CreateTransactionDto.html":{},"controllers/TransactionsController.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["createtransactiontype",{"_index":869,"title":{},"body":{"classes/CreateTransactionDto.html":{},"miscellaneous/enumerations.html":{}}}],["createuser",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createuser(@body",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(data",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["createuserdto",{"_index":792,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["credentialsdto",{"_index":437,"title":{"classes/CredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"coverage.html":{}}}],["cron",{"_index":1059,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["cross",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["crypto",{"_index":610,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"injectables/UserRefreshTokensService.html":{}}}],["crypto.randombytes(64",{"_index":843,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["crypto.randombytes(8).tostring('hex",{"_index":838,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["csv",{"_index":1604,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["ctx",{"_index":305,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getrequest",{"_index":308,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":310,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currencies",{"_index":1004,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["currencies.join",{"_index":1046,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["currencies.map((base",{"_index":1043,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["currencies.reduce",{"_index":1052,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["currencies.some((value",{"_index":1065,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["currency",{"_index":1038,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["currency.dto.ts",{"_index":899,"title":{},"body":{"classes/CurrencyBaseParamDto.html":{},"coverage.html":{}}}],["currency.dto.ts:8",{"_index":902,"title":{},"body":{"classes/CurrencyBaseParamDto.html":{}}}],["currencybaseparamdto",{"_index":897,"title":{"classes/CurrencyBaseParamDto.html":{}},"body":{"classes/CurrencyBaseParamDto.html":{},"controllers/ExchangerateController.html":{},"coverage.html":{}}}],["currencycode",{"_index":16,"title":{},"body":{"entities/AccountEntity.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTransactionDto.html":{},"entities/TransactionEntity.html":{}}}],["currencyenum",{"_index":43,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"injectables/ExchangeRateService.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["currencyenum.uah",{"_index":85,"title":{},"body":{"entities/AccountEntity.html":{},"entities/UserEntity.html":{}}}],["currencyenum})@column({type",{"_index":1371,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["currencyrate",{"_index":229,"title":{},"body":{"injectables/AccountsService.html":{}}}],["currencyrateapi",{"_index":1002,"title":{},"body":{"injectables/ExchangeRateService.html":{},"miscellaneous/typealiases.html":{}}}],["currencyratecache",{"_index":1018,"title":{},"body":{"injectables/ExchangeRateService.html":{},"miscellaneous/typealiases.html":{}}}],["currencyratecacherecord",{"_index":223,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"miscellaneous/typealiases.html":{}}}],["currencyrateconvert",{"_index":1010,"title":{},"body":{"injectables/ExchangeRateService.html":{},"miscellaneous/typealiases.html":{}}}],["currencyratedto",{"_index":903,"title":{"classes/CurrencyRateDto.html":{}},"body":{"classes/CurrencyRateDto.html":{},"controllers/ExchangerateController.html":{},"coverage.html":{}}}],["current",{"_index":1032,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["current.base",{"_index":1055,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["current.rates",{"_index":1034,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["current_timestamp",{"_index":41,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["custom",{"_index":1538,"title":{},"body":{"injectables/UsersService.html":{}}}],["d2727cf0",{"_index":878,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":105,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"interfaces/CreateMockFileReturn.html":{},"interfaces/Response.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["data.email",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.password",{"_index":668,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":398,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":386,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":35,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["deacivated",{"_index":1771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":24,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"classes/ExchangeRateProcessor.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"classes/UpdatePasswordDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["deepmerge",{"_index":1339,"title":{},"body":{"injectables/SendGridService.html":{}}}],["deepmerge(this.options.default",{"_index":1341,"title":{},"body":{"injectables/SendGridService.html":{}}}],["default",{"_index":40,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultjoboptions",{"_index":951,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":31,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdatePasswordDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/enumerations.html":{},"classes/user1615673396368.html":{}}}],["delete",{"_index":126,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["delete(':id",{"_index":109,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["delete(accountentity",{"_index":280,"title":{},"body":{"injectables/AccountsService.html":{}}}],["delete(categoryentity",{"_index":717,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["delete(userentity",{"_index":1547,"title":{},"body":{"injectables/UsersService.html":{}}}],["delete(userrefreshtokenentity",{"_index":1510,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["deletedat",{"_index":1437,"title":{},"body":{"entities/UserEntity.html":{}}}],["deletedatecolumn",{"_index":1459,"title":{},"body":{"entities/UserEntity.html":{}}}],["deleteone",{"_index":97,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["deleteone(conditions",{"_index":108,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":154,"title":{"dependencies.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/ExchangeRateModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":1086,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":7,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":1730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["digits",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["directions",{"_index":1104,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["directory",{"_index":762,"title":{},"body":{"injectables/ConfigService.html":{}}}],["dirname",{"_index":908,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dirname(__dirname",{"_index":929,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["disk",{"_index":356,"title":{},"body":{"controllers/AppController.html":{}}}],["diskhealthindicator",{"_index":343,"title":{},"body":{"controllers/AppController.html":{}}}],["documentation",{"_index":1612,"title":{},"body":{"coverage.html":{}}}],["dot",{"_index":1843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dotenv",{"_index":745,"title":{},"body":{"injectables/ConfigService.html":{},"dependencies.html":{}}}],["dotnotation",{"_index":1124,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dotnotation(this.asc",{"_index":1130,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["dotnotation(this.desc",{"_index":1131,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["down",{"_index":1552,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["down(undefined",{"_index":1554,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["dropschema",{"_index":923,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dto",{"_index":137,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"controllers/ExchangerateController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/TransactionsController.html":{}}}],["dynamicmodule",{"_index":1285,"title":{},"body":{"modules/SendGridModule.html":{}}}],["e10d148",{"_index":1592,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":1126,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{}}}],["eager",{"_index":1362,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["elation.field",{"_index":1097,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["email",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["email.dto.ts",{"_index":788,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:15",{"_index":791,"title":{},"body":{"classes/ConfirmationEmailDto.html":{}}}],["encoding",{"_index":831,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["encrypted",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["encrypted).catch",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"modules/DatabaseModule.html":{},"classes/FindManyOptionsDto.html":{},"classes/PaginationTransactionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["entity",{"_index":0,"title":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["entity('accounts",{"_index":80,"title":{},"body":{"entities/AccountEntity.html":{}}}],["entity('categories",{"_index":732,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["entity('transactions",{"_index":1382,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["entity('user_refresh_tokens",{"_index":1475,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["entity('users",{"_index":1461,"title":{},"body":{"entities/UserEntity.html":{}}}],["entity_relation_field",{"_index":256,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["entitylike",{"_index":193,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":46,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"injectables/ConfigService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{}}}],["enumerations",{"_index":1716,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":304,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"entities/UserEntity.html":{}}}],["env",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["env/.env.${process.env.node_env",{"_index":778,"title":{},"body":{"injectables/ConfigService.html":{}}}],["environment",{"_index":751,"title":{},"body":{"injectables/ConfigService.html":{}}}],["err",{"_index":971,"title":{},"body":{"classes/ExchangeRateProcessor.html":{},"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":293,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ConfigService.html":{},"classes/ExchangeRateProcessor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/SendGridService.html":{},"changelog.html":{}}}],["error('sendgrid",{"_index":1344,"title":{},"body":{"injectables/SendGridService.html":{}}}],["errortypeenum",{"_index":222,"title":{},"body":{"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["errortypeenum.internal_server_error",{"_index":318,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["eur",{"_index":1735,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["every_6th_hour",{"_index":1019,"title":{},"body":{"injectables/ExchangeRateService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":252,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"injectables/UsersService.html":{}}}],["exception",{"_index":297,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":285,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:12",{"_index":1140,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.filter.ts:16",{"_index":291,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.filter.ts:18",{"_index":296,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exception.getresponse",{"_index":316,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":313,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":329,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["exceptionfilter",{"_index":287,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exchangerate",{"_index":169,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"controllers/ExchangerateController.html":{},"modules/TransactionsModule.html":{},"miscellaneous/variables.html":{}}}],["exchangerate.controller",{"_index":945,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["exchangerate.processor",{"_index":947,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["exchangerate.service",{"_index":948,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"controllers/ExchangerateController.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["exchangerate/types",{"_index":224,"title":{},"body":{"injectables/AccountsService.html":{}}}],["exchangerate_module",{"_index":1656,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["exchangerate_module_options",{"_index":1657,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["exchangerate_not_found_from_api",{"_index":1767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["exchangerate_not_found_from_cache",{"_index":1766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["exchangerate_processor",{"_index":942,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exchangerate_queue",{"_index":943,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exchangeratecontroller",{"_index":938,"title":{"controllers/ExchangerateController.html":{}},"body":{"modules/ExchangeRateModule.html":{},"controllers/ExchangerateController.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{}}}],["exchangeratemodule",{"_index":159,"title":{"modules/ExchangeRateModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["exchangerateprocessor",{"_index":946,"title":{"classes/ExchangeRateProcessor.html":{}},"body":{"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{}}}],["exchangerateprocessorenum",{"_index":978,"title":{},"body":{"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"miscellaneous/enumerations.html":{}}}],["exchangerateprocessorenum.update_currency_rates",{"_index":1058,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["exchangeratequeuemodule",{"_index":949,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["exchangerateservice",{"_index":176,"title":{"injectables/ExchangeRateService.html":{}},"body":{"injectables/AccountsService.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"overview.html":{}}}],["exclude",{"_index":1474,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["exclude()@apihideproperty()@column({type",{"_index":1469,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["executioncontext",{"_index":1223,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["expect(fs.existssync(filepath)).toequal(true",{"_index":848,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["expense",{"_index":730,"title":{},"body":{"entities/CategoryEntity.html":{},"classes/CreateTransactionDto.html":{},"entities/TransactionEntity.html":{},"classes/categories1644767124120.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresinaccesstoken",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresinrefreshtoken",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":81,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"changelog.html":{},"classes/user1615673396368.html":{}}}],["exports",{"_index":166,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["expose",{"_index":1121,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["extends",{"_index":797,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":1181,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1197,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.frombodyfield('refreshtoken",{"_index":1188,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["false",{"_index":28,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["false})@column({type",{"_index":54,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{}}}],["false})@joincolumn",{"_index":62,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{}}}],["false})@manytoone(undefined",{"_index":1361,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["fastify",{"_index":303,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TransactionsController.html":{},"dependencies.html":{},"properties.html":{}}}],["fastify.util.ts",{"_index":1671,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fastifyreply",{"_index":298,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{},"controllers/TransactionsController.html":{}}}],["features",{"_index":1595,"title":{},"body":{"changelog.html":{}}}],["field",{"_index":1095,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{},"miscellaneous/functions.html":{}}}],["fields",{"_index":1100,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"coverage.html":{},"unit-test.html":{},"classes/user1615673396368.html":{}}}],["file.util.ts",{"_index":830,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":760,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{}}}],["filepath",{"_index":832,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["filter",{"_index":1597,"title":{},"body":{"changelog.html":{}}}],["filter(([key",{"_index":1857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter((key",{"_index":1864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":178,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["find(optionsorconditions",{"_index":197,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findmanyoptions",{"_index":198,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectTransactionsDto.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findmanyoptions['order",{"_index":1129,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["findmanyoptions['where",{"_index":1258,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["findmanyoptionsdto",{"_index":1079,"title":{"classes/FindManyOptionsDto.html":{}},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["findmanyoptionsdto:28",{"_index":1231,"title":{},"body":{"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["findmanyoptionsdto:43",{"_index":1232,"title":{},"body":{"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoneoptions",{"_index":208,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoneoptionsdto",{"_index":1084,"title":{"classes/FindOneOptionsDto.html":{}},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["findoneoptionsdto:23",{"_index":1112,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["findoptionsorder",{"_index":1855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findoptionsselect",{"_index":1135,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["findoptionsutils",{"_index":221,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.extractfindmanyoptionsalias(optionsorconditions",{"_index":247,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["findoptionsutils.isfindmanyoptions(optionsorconditions",{"_index":253,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":195,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["fixes",{"_index":1589,"title":{},"body":{"changelog.html":{}}}],["flat",{"_index":1703,"title":{},"body":{"dependencies.html":{}}}],["float",{"_index":1590,"title":{},"body":{"changelog.html":{}}}],["floatintcolumntransformer",{"_index":30,"title":{},"body":{"entities/AccountEntity.html":{},"entities/TransactionEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["floattoint",{"_index":1625,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["floattoint(value",{"_index":1852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flow",{"_index":1609,"title":{},"body":{"changelog.html":{}}}],["foo",{"_index":1848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.bar",{"_index":1845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.bar.sub",{"_index":1847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foo.other",{"_index":1846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["foreach(([key",{"_index":1859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["form",{"_index":1116,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["found",{"_index":1346,"title":{},"body":{"injectables/SendGridService.html":{}}}],["fs",{"_index":836,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["fs.writefilesync(filepath",{"_index":847,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["function",{"_index":756,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"coverage.html":{}}}],["functions",{"_index":1773,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"unit-test.html":{}}}],["generateaccesstoken",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(undefined",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateandcreateone",{"_index":1479,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["generateandcreateone(entitylike",{"_index":1485,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["generatecode",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatecode(digits",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":754,"title":{},"body":{"injectables/ConfigService.html":{}}}],["generaterefreshtoken",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(undefined",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetokens(user",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator.util",{"_index":1291,"title":{},"body":{"modules/SendGridModule.html":{}}}],["get(':base",{"_index":1072,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["get('export/csv",{"_index":1389,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["get('profile",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile')@apibearerauth()@useguards(jwtauthguard",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('record",{"_index":1070,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["get()@healthcheck",{"_index":335,"title":{},"body":{"controllers/AppController.html":{}}}],["get(key",{"_index":746,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getdest",{"_index":742,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getdest(key",{"_index":759,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getmode",{"_index":743,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getmode(mode",{"_index":766,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getoneorfail",{"_index":270,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["getorder",{"_index":1113,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["getselect",{"_index":1133,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["getter",{"_index":1115,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["getting",{"_index":749,"title":{"changelog.html":{},"index.html":{}},"body":{"injectables/ConfigService.html":{}}}],["getwhere",{"_index":1248,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["given",{"_index":1106,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["global",{"_index":737,"title":{},"body":{"modules/ConfigModule.html":{},"modules/SendGridModule.html":{}}}],["graph",{"_index":1788,"title":{},"body":{"modules.html":{}}}],["guards",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlerequest",{"_index":1152,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["handlerequest(_err",{"_index":1166,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["handlerequest(err",{"_index":1154,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hash",{"_index":1492,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["hash(refreshidentifier",{"_index":1496,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["hashpassword",{"_index":1462,"title":{},"body":{"entities/UserEntity.html":{}}}],["health",{"_index":355,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheck",{"_index":340,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckresult",{"_index":341,"title":{},"body":{"controllers/AppController.html":{}}}],["healthcheckservice",{"_index":342,"title":{},"body":{"controllers/AppController.html":{}}}],["helmet",{"_index":1700,"title":{},"body":{"dependencies.html":{}}}],["homepage",{"_index":1796,"title":{},"body":{"properties.html":{}}}],["host",{"_index":294,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/HttpExceptionFilter.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["host.switchtohttp",{"_index":306,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["html",{"_index":663,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception",{"_index":300,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":1138,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/broodd/budgetify",{"_index":1797,"title":{},"body":{"properties.html":{}}}],["httpstatus",{"_index":299,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["httpstatus.internal_server_error",{"_index":314,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["id",{"_index":17,"title":{"classes/ID.html":{}},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/CreateTransactionDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1613,"title":{},"body":{"coverage.html":{}}}],["image/png",{"_index":842,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["implement",{"_index":1608,"title":{},"body":{"changelog.html":{}}}],["implemented",{"_index":1602,"title":{},"body":{"changelog.html":{}}}],["implements",{"_index":286,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ExchangeRateService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["import",{"_index":66,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["imports",{"_index":165,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["in(accounts",{"_index":1266,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["in(categories",{"_index":1264,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["in(types",{"_index":1262,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["income",{"_index":731,"title":{},"body":{"entities/CategoryEntity.html":{},"classes/CreateTransactionDto.html":{},"entities/TransactionEntity.html":{},"classes/categories1644767124120.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdatePasswordDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["inherited",{"_index":1111,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["initial",{"_index":1603,"title":{},"body":{"changelog.html":{}}}],["initialobject",{"_index":1831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialvalue",{"_index":1830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inject",{"_index":407,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{}}}],["inject(axios_instance_token",{"_index":1020,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["inject(cache_manager",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExchangeRateService.html":{}}}],["inject(sendgrid_module_options",{"_index":1342,"title":{},"body":{"injectables/SendGridService.html":{}}}],["injectable",{"_index":172,"title":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/SendGridService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"injectables/SendGridService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":173,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/SendGridService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectqueue",{"_index":1016,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["injectqueue(exchangerate_queue",{"_index":1021,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["injectrepository",{"_index":218,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(accountentity",{"_index":213,"title":{},"body":{"injectables/AccountsService.html":{}}}],["injectrepository(categoryentity",{"_index":705,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(userentity",{"_index":1529,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(userrefreshtokenentity",{"_index":1490,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["instance",{"_index":995,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["instanceof",{"_index":312,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["instancetoplain",{"_index":219,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"classes/FindManyOptionsDto.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["int",{"_index":1591,"title":{},"body":{"changelog.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["intercept",{"_index":1415,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1227,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":826,"title":{"interfaces/CreateMockFileReturn.html":{},"interfaces/Response.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}},"body":{"interfaces/CreateMockFileReturn.html":{},"interfaces/Response.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":828,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"interfaces/Response.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"overview.html":{}}}],["interfaces/config.interface",{"_index":777,"title":{},"body":{"injectables/ConfigService.html":{}}}],["internal_server_error",{"_index":1738,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["isarray",{"_index":1119,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["isarray()@isoptional()@isstring({each",{"_index":1090,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["isdate",{"_index":871,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{}}}],["isemail",{"_index":894,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@apiproperty({example",{"_index":887,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isempty",{"_index":1064,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["isenum",{"_index":808,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/SelectTransactionsDto.html":{}}}],["isenum(categorytypeenum",{"_index":824,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isenum(categorytypeenum)@apiproperty({enum",{"_index":820,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isenum(createtransactiontype",{"_index":876,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["isenum(createtransactiontype)@apiproperty({enum",{"_index":868,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["isenum(currencyenum",{"_index":813,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{}}}],["isenum(currencyenum)@apiproperty({enum",{"_index":804,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["isenum(transactiontypeenum",{"_index":1245,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["isnotempty",{"_index":1120,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["isnumber",{"_index":809,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateTransactionDto.html":{}}}],["isnumber()@apiproperty({example",{"_index":802,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["isoptional",{"_index":822,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{}}}],["isoptional()@apipropertyoptional({example",{"_index":865,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["isoptional()@isdate()@apiproperty({example",{"_index":863,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["isoptional()@isdate({each",{"_index":1242,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["isoptional()@isenum(currencyenum)@apiproperty({enum",{"_index":885,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional()@isenum(currencyenum)@apipropertyoptional({enum",{"_index":861,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["isoptional()@minlength(1)@maxlength(32)@apipropertyoptional({example",{"_index":816,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isoptional()@transform",{"_index":1238,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["ispositive",{"_index":872,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["ispositive()@isnumber({maxdecimalplaces",{"_index":857,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["isstring",{"_index":795,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["isstring()@length(6)@apiproperty({example",{"_index":1214,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["isuuid",{"_index":1145,"title":{},"body":{"classes/ID.html":{}}}],["isuuid()@apiproperty",{"_index":1143,"title":{},"body":{"classes/ID.html":{}}}],["job",{"_index":966,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["job.id",{"_index":981,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["jobid",{"_index":1060,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["join",{"_index":776,"title":{},"body":{"injectables/ConfigService.html":{}}}],["join(process.cwd",{"_index":780,"title":{},"body":{"injectables/ConfigService.html":{}}}],["joincolumn",{"_index":71,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{}}}],["json.parse",{"_index":758,"title":{},"body":{"injectables/ConfigService.html":{}}}],["json.parse(data",{"_index":1028,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["json.parse(result",{"_index":1037,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["json.parse(variable",{"_index":786,"title":{},"body":{"injectables/ConfigService.html":{}}}],["json.stringify",{"_index":1054,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["jwt",{"_index":1184,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtaccesstokenpayloaddto",{"_index":613,"title":{"classes/JwtAccessTokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtaccesstokenpayloaddto:32",{"_index":1172,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["jwtaccesstokenpayloaddto:37",{"_index":1173,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["jwtauthguard",{"_index":135,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/TransactionsController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1187,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshguard",{"_index":488,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokendto",{"_index":447,"title":{"classes/JwtRefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtrefreshtokenpayloaddto",{"_index":614,"title":{"classes/JwtRefreshTokenPayloadDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":530,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":531,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttokensdto",{"_index":487,"title":{"classes/JwtTokensDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["key",{"_index":752,"title":{},"body":{"injectables/ConfigService.html":{},"classes/FindOneOptionsDto.html":{},"injectables/SendGridService.html":{},"miscellaneous/variables.html":{}}}],["key.startswith('__",{"_index":1858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyof",{"_index":1136,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["last",{"_index":1862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["left",{"_index":1316,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["length",{"_index":56,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["length(6",{"_index":799,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["length(6)@isstring()@apiproperty({example",{"_index":789,"title":{},"body":{"classes/ConfirmationEmailDto.html":{}}}],["limit",{"_index":411,"title":{},"body":{"modules/AppModule.html":{}}}],["limited",{"_index":755,"title":{},"body":{"injectables/ConfigService.html":{}}}],["lines",{"_index":1811,"title":{},"body":{"unit-test.html":{}}}],["literal",{"_index":187,"title":{},"body":{"injectables/AccountsService.html":{},"interfaces/SendGridModuleOptions.html":{},"miscellaneous/typealiases.html":{}}}],["loadeagerrelations",{"_index":204,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["logger",{"_index":289,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"injectables/SendGridService.html":{}}}],["logger(allexceptionfilter.name",{"_index":290,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logger(exchangerateprocessor.name",{"_index":964,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["logger(exchangerateservice.name",{"_index":1015,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["logger(sendgridservice.name",{"_index":1334,"title":{},"body":{"injectables/SendGridService.html":{}}}],["logger://').pathname",{"_index":321,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["logging",{"_index":921,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["logout",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@user",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(user",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{}}}],["maildatarequired",{"_index":1310,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{}}}],["mailservice",{"_index":1322,"title":{},"body":{"injectables/SendGridService.html":{}}}],["manager",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"dependencies.html":{}}}],["many",{"_index":1081,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"coverage.html":{}}}],["manytoone",{"_index":70,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["map",{"_index":1217,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["map((data",{"_index":1029,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["matching",{"_index":87,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["maxdecimalplaces",{"_index":877,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["maxlength",{"_index":84,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{}}}],["maxlength(32",{"_index":825,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["maxlength(64",{"_index":812,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["memory",{"_index":354,"title":{},"body":{"controllers/AppController.html":{}}}],["memoryhealthindicator",{"_index":344,"title":{},"body":{"controllers/AppController.html":{}}}],["mergeintoentity",{"_index":274,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["mergewithdefaultmaildata",{"_index":1323,"title":{},"body":{"injectables/SendGridService.html":{}}}],["mergewithdefaultmaildata(data",{"_index":1328,"title":{},"body":{"injectables/SendGridService.html":{}}}],["message",{"_index":315,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["metadata",{"_index":243,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["metadata.name",{"_index":248,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["method",{"_index":322,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ConfigService.html":{}}}],["methods",{"_index":94,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["microservice",{"_index":357,"title":{},"body":{"controllers/AppController.html":{}}}],["microservicehealthindicator",{"_index":346,"title":{},"body":{"controllers/AppController.html":{}}}],["migrationinterface",{"_index":1551,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["migrations",{"_index":931,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrations/*.{ts,js",{"_index":933,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["migrationsrun",{"_index":927,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["mimetype",{"_index":833,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"miscellaneous/functions.html":{}}}],["minlength",{"_index":810,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(1",{"_index":811,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{}}}],["minlength(1)@maxlength(64)@apiproperty({example",{"_index":806,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{}}}],["minlength(8",{"_index":895,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(8)@maxlength(64)@apiproperty({minlength",{"_index":891,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["miscellaneous",{"_index":1715,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mockexchangerateprocessor",{"_index":954,"title":{"classes/MockExchangeRateProcessor.html":{}},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{}}}],["mode",{"_index":773,"title":{},"body":{"injectables/ConfigService.html":{}}}],["modes",{"_index":772,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["module",{"_index":151,"title":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"modules/SendGridModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["module.interface.ts",{"_index":1307,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{}}}],["module.interface.ts:13",{"_index":1320,"title":{},"body":{"interfaces/SendGridOptionsFactory.html":{}}}],["moduleinit",{"_index":985,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["modulemetadata",{"_index":1312,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["modules",{"_index":153,"title":{"modules.html":{}},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"modules/SendGridModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/**/*.entity.{ts,js",{"_index":930,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["modules/accounts",{"_index":402,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth",{"_index":404,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/categories",{"_index":401,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/exchangerate",{"_index":399,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/transactions",{"_index":400,"title":{},"body":{"modules/AppModule.html":{},"changelog.html":{}}}],["modules/users",{"_index":403,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":18,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"injectables/ConfigService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["nest.js",{"_index":1794,"title":{},"body":{"properties.html":{}}}],["nestinterceptor",{"_index":1222,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs/bull",{"_index":395,"title":{},"body":{"modules/AppModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"classes/MockExchangeRateProcessor.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":130,"title":{},"body":{"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MockExchangeRateProcessor.html":{},"interfaces/Response.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces",{"_index":1313,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["nestjs/common/utils/random",{"_index":1290,"title":{},"body":{"modules/SendGridModule.html":{}}}],["nestjs/core",{"_index":397,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":339,"title":{},"body":{"controllers/AppController.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":68,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"entities/CategoryEntity.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":347,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":392,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":168,"title":{},"body":{"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/DatabaseModule.html":{},"modules/TransactionsModule.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":240,"title":{},"body":{"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateTransactionDto.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/SelectTransactionsDto.html":{},"injectables/SendGridService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"unit-test.html":{},"miscellaneous/variables.html":{}}}],["new_password_and_old_password_cannot_be_same",{"_index":1744,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["next",{"_index":1226,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1228,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["node:url",{"_index":302,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["nodemailer",{"_index":1705,"title":{},"body":{"dependencies.html":{}}}],["notation",{"_index":1844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notation.helper.ts",{"_index":1623,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":217,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(errortypeenum.account_not_found",{"_index":272,"title":{},"body":{"injectables/AccountsService.html":{}}}],["notfoundexception(errortypeenum.accounts_not_found",{"_index":263,"title":{},"body":{"injectables/AccountsService.html":{}}}],["notfoundexception(errortypeenum.categories_not_found",{"_index":714,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["notfoundexception(errortypeenum.category_not_found",{"_index":715,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["notfoundexception(errortypeenum.user_not_found",{"_index":1545,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception(errortypeenum.user_refresh_token_not_found",{"_index":1507,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["notfoundexception(errortypeenum.user_refresh_tokens_not_found",{"_index":1506,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["notfoundexception(errortypeenum.users_not_found",{"_index":1543,"title":{},"body":{"injectables/UsersService.html":{}}}],["null",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullable",{"_index":27,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{}}}],["nulls",{"_index":1861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":23,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTransactionDto.html":{},"classes/PaginationTransactionsDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"entities/TransactionEntity.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":753,"title":{},"body":{"injectables/ConfigService.html":{},"classes/FindManyOptionsDto.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":371,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/SelectTransactionsDto.html":{}}}],["object.assign(this",{"_index":1211,"title":{},"body":{"classes/PaginationTransactionsDto.html":{}}}],["object.entries(order",{"_index":1856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(order",{"_index":1863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.values(currencyenum",{"_index":1041,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["object.values(transactiontypeenum",{"_index":1255,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["objectpath",{"_index":1833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectpath.split",{"_index":1835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":1219,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["oldpassword",{"_index":1428,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["oldrefreshtoken",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["oldrefreshtoken.id",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["ondelete",{"_index":60,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["one",{"_index":1123,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["onetomany",{"_index":1456,"title":{},"body":{"entities/UserEntity.html":{}}}],["onmoduleinit",{"_index":986,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["onqueuecompleted",{"_index":959,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["onqueuecompleted(job",{"_index":965,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["onqueuefailed",{"_index":960,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["onqueuefailed(job",{"_index":970,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["onwer",{"_index":277,"title":{},"body":{"injectables/AccountsService.html":{}}}],["operating",{"_index":771,"title":{},"body":{"injectables/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["optional",{"_index":13,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateTransactionDto.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationTransactionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"injectables/SendGridService.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["options",{"_index":115,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/FindManyOptionsDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["options).catch",{"_index":238,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["options.apikey",{"_index":1343,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.dto.ts",{"_index":1083,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:23",{"_index":1132,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:28",{"_index":1098,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:29",{"_index":1134,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":1107,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.dto.ts:49",{"_index":1114,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["options.imports",{"_index":1297,"title":{},"body":{"modules/SendGridModule.html":{}}}],["options.inject",{"_index":1303,"title":{},"body":{"modules/SendGridModule.html":{}}}],["options.substitutionwrappers",{"_index":1349,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.substitutionwrappers.left",{"_index":1351,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.substitutionwrappers.right",{"_index":1352,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.timeout",{"_index":1347,"title":{},"body":{"injectables/SendGridService.html":{}}}],["options.useclass",{"_index":1302,"title":{},"body":{"modules/SendGridModule.html":{}}}],["options.useexisting",{"_index":1299,"title":{},"body":{"modules/SendGridModule.html":{}}}],["options.usefactory",{"_index":1300,"title":{},"body":{"modules/SendGridModule.html":{}}}],["options.where",{"_index":259,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["options/find",{"_index":1082,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["optionsfactory",{"_index":1304,"title":{},"body":{"modules/SendGridModule.html":{}}}],["optionsfactory.createsendgridoptions",{"_index":1305,"title":{},"body":{"modules/SendGridModule.html":{}}}],["optionsorconditions",{"_index":200,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["optionsorconditions.loadeagerrelations",{"_index":254,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["optionsorconditions.order",{"_index":1541,"title":{},"body":{"injectables/UsersService.html":{}}}],["order",{"_index":1089,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["order.helper.ts",{"_index":1628,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["order[key",{"_index":1867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ordered",{"_index":1094,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["out",{"_index":162,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/ExchangeRateModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out')@useguards(jwtrefreshguard)@apibody({type",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1789,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":19,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/variables.html":{}}}],["owner.basecurrency",{"_index":268,"title":{},"body":{"injectables/AccountsService.html":{}}}],["owner.id",{"_index":147,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["package",{"_index":1677,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginationmixin",{"_index":1207,"title":{},"body":{"classes/PaginationTransactionsDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["paginationmixin(classref",{"_index":1779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginationmixin(transactionentity",{"_index":1208,"title":{},"body":{"classes/PaginationTransactionsDto.html":{}}}],["paginationtransactionsdto",{"_index":1201,"title":{"classes/PaginationTransactionsDto.html":{}},"body":{"classes/PaginationTransactionsDto.html":{},"coverage.html":{}}}],["param",{"_index":123,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"controllers/ExchangerateController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationTransactionsDto.html":{},"interfaces/Response.html":{},"modules/SendGridModule.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["parameters",{"_index":104,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationTransactionsDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["params",{"_index":324,"title":{},"body":{"classes/AllExceptionFilter.html":{},"injectables/ExchangeRateService.html":{}}}],["parsefloat((currencyrate",{"_index":231,"title":{},"body":{"injectables/AccountsService.html":{}}}],["parseint((parsefloat(value.tofixed(2",{"_index":1853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":58,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"interfaces/CreateMockFileReturn.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"entities/TransactionEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["partialtype",{"_index":1418,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createaccountdto",{"_index":1421,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["partialtype(createcategorydto",{"_index":1424,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createtransactiondto",{"_index":1432,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["partialtype(createuserdto",{"_index":1435,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["parts",{"_index":1834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parts.length",{"_index":1837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parts.shift",{"_index":1839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passport",{"_index":1183,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1185,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1186,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":417,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateProfileDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"modules/DatabaseModule.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["password.dto.ts",{"_index":1213,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":1215,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["patch",{"_index":124,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["patch(':id",{"_index":118,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["patch('profile",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile')@apibearerauth()@useguards(jwtauthguard",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/email",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/email')@apibearerauth()@useguards(jwtauthguard",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/password",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('profile/password')@apibearerauth()@useguards(jwtauthguard",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":352,"title":{},"body":{"controllers/AppController.html":{},"injectables/ConfigService.html":{},"modules/DatabaseModule.html":{}}}],["payload",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{}}}],["pg",{"_index":1709,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":1308,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["picktype",{"_index":794,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["picktype(createuserdto",{"_index":798,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{}}}],["picktype(jwttokensdto",{"_index":1150,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{}}}],["picktype(updateuserdto",{"_index":1427,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["place",{"_index":249,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["plaintoinstance",{"_index":220,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/TransactionsController.html":{}}}],["plaintoinstance(accountentity",{"_index":233,"title":{},"body":{"injectables/AccountsService.html":{}}}],["plaintoinstance(createtransactiondto",{"_index":1402,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["png",{"_index":839,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["poduction",{"_index":1729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["port",{"_index":373,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["post",{"_index":102,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["post('confirmation",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('log",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reset",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{}}}],["ppid",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{}}}],["prefix",{"_index":92,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/ExchangeRateModule.html":{},"controllers/ExchangerateController.html":{},"classes/MockExchangeRateProcessor.html":{},"controllers/TransactionsController.html":{}}}],["primarygeneratedcolumn",{"_index":74,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":83,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["priority",{"_index":1105,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["private",{"_index":288,"title":{},"body":{"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{}}}],["process",{"_index":976,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["process(exchangerateprocessorenum.update_currency_rates",{"_index":973,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["process.env['node_env",{"_index":782,"title":{},"body":{"injectables/ConfigService.html":{}}}],["process.env[filename",{"_index":779,"title":{},"body":{"injectables/ConfigService.html":{}}}],["process.env[key",{"_index":783,"title":{},"body":{"injectables/ConfigService.html":{}}}],["processor",{"_index":975,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["processor(exchangerate_queue",{"_index":979,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["processor.enum.ts",{"_index":1724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["production",{"_index":1732,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["profile.dto.ts",{"_index":850,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/SelectProfileDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:25",{"_index":1429,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["promise",{"_index":107,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["promise.all(promises).catch",{"_index":1047,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["promises",{"_index":1042,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["properties",{"_index":9,"title":{"properties.html":{}},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"injectables/SendGridService.html":{},"entities/TransactionEntity.html":{},"classes/UpdatePasswordDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["property",{"_index":1540,"title":{},"body":{"injectables/UsersService.html":{}}}],["provide",{"_index":420,"title":{},"body":{"modules/AppModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{}}}],["provider",{"_index":1277,"title":{},"body":{"modules/SendGridModule.html":{}}}],["providers",{"_index":164,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":10,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["qb",{"_index":245,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["qb.addorderby(key",{"_index":1860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["qb.addselect('__custom",{"_index":1539,"title":{},"body":{"injectables/UsersService.html":{}}}],["qb.andwhere",{"_index":261,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{}}}],["qb.getmany().catch",{"_index":262,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["qb.leftjoinandselect('entity.relation_field",{"_index":255,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["qb.setfindoptions(optionsorconditions",{"_index":257,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["qb.where",{"_index":1260,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["qb.where(options.where",{"_index":260,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["query",{"_index":125,"title":{},"body":{"controllers/AccountsController.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["queryrunner",{"_index":1555,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["querysearch",{"_index":1631,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["querysearch(field",{"_index":1781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["queue",{"_index":997,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["queue.constants.ts",{"_index":1654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["randombytes",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserRefreshTokensService.html":{}}}],["randombytes(16).tostring('hex",{"_index":1494,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["randombytes(size",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{}}}],["randomstringgenerator",{"_index":1289,"title":{},"body":{"modules/SendGridModule.html":{}}}],["rate",{"_index":1806,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["rate.type.ts",{"_index":1805,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["rates",{"_index":225,"title":{},"body":{"injectables/AccountsService.html":{},"classes/CurrencyRateDto.html":{},"injectables/ExchangeRateService.html":{}}}],["rates[account.currencycode][basecurrency",{"_index":230,"title":{},"body":{"injectables/AccountsService.html":{}}}],["rates[currency",{"_index":1040,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["readonly",{"_index":11,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":317,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/CurrencyRateDto.html":{},"classes/HttpExceptionFilter.html":{}}}],["redis",{"_index":414,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"dependencies.html":{}}}],["redisoptions",{"_index":338,"title":{},"body":{"controllers/AppController.html":{}}}],["redisstore",{"_index":533,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["reduce",{"_index":1030,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["reduce((acc",{"_index":1865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1711,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1159,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["refresh",{"_index":1169,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"changelog.html":{},"coverage.html":{}}}],["refresh.guard.ts",{"_index":1164,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.guard.ts:12",{"_index":1165,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh.guard.ts:27",{"_index":1167,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["refresh.strategy.ts",{"_index":1175,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:18",{"_index":1178,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refresh.strategy.ts:38",{"_index":1180,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshhash",{"_index":1495,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["refreshidentifier",{"_index":1493,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["refreshtoken",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{}}}],["refreshtoken.id",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken.ppid",{"_index":1193,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["refreshtokenid",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{}}}],["refreshtokens",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["refreshtokens(@user",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(user",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{}}}],["register",{"_index":1281,"title":{},"body":{"modules/SendGridModule.html":{}}}],["register(options",{"_index":1282,"title":{},"body":{"modules/SendGridModule.html":{}}}],["registerasync",{"_index":1286,"title":{},"body":{"modules/SendGridModule.html":{}}}],["registerasync(options",{"_index":1287,"title":{},"body":{"modules/SendGridModule.html":{}}}],["rejectunauthorized",{"_index":379,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["relation",{"_index":251,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{}}}],["removeoncomplete",{"_index":952,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"miscellaneous/variables.html":{}}}],["removeonfail",{"_index":953,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"miscellaneous/variables.html":{}}}],["rep",{"_index":1391,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["repeat",{"_index":1062,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["repository",{"_index":184,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"properties.html":{},"classes/user1615673396368.html":{}}}],["repository.save(data).catch((e",{"_index":1568,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["request",{"_index":307,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":327,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.method",{"_index":323,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.params",{"_index":325,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.query",{"_index":326,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["request.user",{"_index":328,"title":{},"body":{"classes/AllExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":1870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":1396,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["reset",{"_index":161,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/ExchangeRateModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetpassword",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(@body",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(data",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassworddto",{"_index":454,"title":{"classes/ResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["response",{"_index":309,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionFilter.html":{},"injectables/ExchangeRateService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/Response.html":{},"injectables/SendGridService.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.body.errors",{"_index":1355,"title":{},"body":{"injectables/SendGridService.html":{}}}],["response.map((value",{"_index":1049,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["response.status(statuscode).send",{"_index":330,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["result",{"_index":967,"title":{},"body":{"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"classes/PaginationTransactionsDto.html":{},"miscellaneous/variables.html":{}}}],["result.map((data",{"_index":1027,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["results",{"_index":86,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1110,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["return",{"_index":145,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/Response.html":{},"classes/SelectTransactionsDto.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":106,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"miscellaneous/functions.html":{},"classes/user1615673396368.html":{}}}],["right",{"_index":1317,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["rxjs",{"_index":1220,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1218,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["same",{"_index":1099,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["savealltocache",{"_index":987,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["savealltocache(currencies",{"_index":1001,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["saveoptions",{"_index":190,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["search",{"_index":1783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["search.helper.ts",{"_index":1630,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["searchalias",{"_index":1782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretaccesstoken",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":1189,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["secretrefreshtoken",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{},"classes/FindOneOptionsDto.html":{},"entities/UserEntity.html":{}}}],["selectaccountsdto",{"_index":113,"title":{"classes/SelectAccountsDto.html":{}},"body":{"controllers/AccountsController.html":{},"classes/SelectAccountsDto.html":{},"coverage.html":{}}}],["selectall",{"_index":98,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/ExchangerateController.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["selectall(options",{"_index":112,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["selectallasrecord",{"_index":1068,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["selectallfromapi",{"_index":988,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selectallfromcache",{"_index":989,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selectallfromcacheasrecord",{"_index":990,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selectallwithbasebalance",{"_index":179,"title":{},"body":{"injectables/AccountsService.html":{}}}],["selectallwithbasebalance(owner",{"_index":205,"title":{},"body":{"injectables/AccountsService.html":{}}}],["selectcategoriesdto",{"_index":676,"title":{"classes/SelectCategoriesDto.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/SelectCategoriesDto.html":{},"coverage.html":{}}}],["selectfromapiandsavetocache",{"_index":991,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selection",{"_index":1087,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["selectone",{"_index":180,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"controllers/ExchangerateController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["selectone(@param",{"_index":1077,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["selectone(conditions",{"_index":207,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"controllers/ExchangerateController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["selectonebyrepository",{"_index":1519,"title":{},"body":{"injectables/UsersService.html":{}}}],["selectonebyrepository(conditions",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["selectoneconvert",{"_index":992,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selectoneconvert(undefined",{"_index":1009,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selectonefromcache",{"_index":993,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selectonefromcache(base",{"_index":1012,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["selectonewithbasebalance",{"_index":181,"title":{},"body":{"injectables/AccountsService.html":{}}}],["selectonewithbasebalance(conditions",{"_index":210,"title":{},"body":{"injectables/AccountsService.html":{}}}],["selectprofiledto",{"_index":458,"title":{"classes/SelectProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/SelectProfileDto.html":{},"coverage.html":{}}}],["selectquerybuilder",{"_index":202,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["selecttransactionsdto",{"_index":1236,"title":{"classes/SelectTransactionsDto.html":{}},"body":{"classes/SelectTransactionsDto.html":{},"controllers/TransactionsController.html":{},"coverage.html":{}}}],["selectuser",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["selectuser(undefined",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["selectuserdto",{"_index":1267,"title":{"classes/SelectUserDto.html":{}},"body":{"classes/SelectUserDto.html":{},"coverage.html":{}}}],["selectusersdto",{"_index":1269,"title":{"classes/SelectUsersDto.html":{}},"body":{"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["sendgrid.constants",{"_index":1294,"title":{},"body":{"modules/SendGridModule.html":{},"injectables/SendGridService.html":{}}}],["sendgrid.service",{"_index":1295,"title":{},"body":{"modules/SendGridModule.html":{}}}],["sendgrid/client/src/response",{"_index":1337,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendgrid/helpers/classes/mail",{"_index":1311,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{}}}],["sendgrid/mail",{"_index":1338,"title":{},"body":{"injectables/SendGridService.html":{},"dependencies.html":{}}}],["sendgrid_module",{"_index":1293,"title":{},"body":{"modules/SendGridModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendgrid_module_options",{"_index":1292,"title":{},"body":{"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendgridmodule",{"_index":529,"title":{"modules/SendGridModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/SendGridModule.html":{},"modules.html":{},"overview.html":{}}}],["sendgridmodule.registerasync",{"_index":553,"title":{},"body":{"modules/AuthModule.html":{}}}],["sendgridmoduleasyncoptions",{"_index":1275,"title":{"interfaces/SendGridModuleAsyncOptions.html":{}},"body":{"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{}}}],["sendgridmoduleoptions",{"_index":1283,"title":{"interfaces/SendGridModuleOptions.html":{}},"body":{"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"coverage.html":{}}}],["sendgridoptionsfactory",{"_index":1296,"title":{"interfaces/SendGridOptionsFactory.html":{}},"body":{"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{}}}],["sendgridservice",{"_index":571,"title":{"injectables/SendGridService.html":{}},"body":{"injectables/AuthService.html":{},"modules/SendGridModule.html":{},"injectables/SendGridService.html":{},"coverage.html":{}}}],["sendmail",{"_index":1324,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendmail(data",{"_index":1330,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendmultiplemail",{"_index":1325,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendmultiplemail(data",{"_index":1332,"title":{},"body":{"injectables/SendGridService.html":{}}}],["sendresetpassword",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendresetpassword(@body",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendresetpassword(data",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendresetpassworddto",{"_index":462,"title":{"classes/SendResetPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["service",{"_index":741,"title":{},"body":{"injectables/ConfigService.html":{}}}],["services",{"_index":1515,"title":{},"body":{"modules/UsersModule.html":{}}}],["set",{"_index":1051,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["setfindoptions(optionsorconditions",{"_index":1505,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["setfindorder",{"_index":1629,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["setfindorder(qb",{"_index":1542,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":1795,"title":{},"body":{"properties.html":{}}}],["size",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["sorting",{"_index":1102,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"modules/AccountsModule.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateProfileDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CredentialsDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["specific",{"_index":764,"title":{},"body":{"injectables/ConfigService.html":{}}}],["specified",{"_index":1101,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["specifies",{"_index":1108,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["src/.../1615673396368",{"_index":1820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1644744884181",{"_index":1821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../1644767124120",{"_index":1822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.constants.ts",{"_index":1818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../category.entity.ts",{"_index":1717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../config.interface.ts",{"_index":1718,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../create",{"_index":1719,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../currency",{"_index":1804,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../currency.enum.ts",{"_index":1720,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../dot",{"_index":1823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":1721,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../exchangerate",{"_index":1723,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../exchangerate.constants.ts",{"_index":1824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../exchangerate.module.ts",{"_index":1819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../float",{"_index":1825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../number.helper.ts",{"_index":1826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pagination.dto.ts",{"_index":1776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../query",{"_index":1777,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../sendgrid.constants.ts",{"_index":1827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../transaction.entity.ts",{"_index":1725,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user",{"_index":1726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":1828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":333,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:50",{"_index":336,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":389,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/decorators",{"_index":132,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["src/common/decorators/user.decorator.ts",{"_index":1617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto",{"_index":133,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/CategoriesController.html":{},"classes/CreateTransactionDto.html":{},"classes/PaginationTransactionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"controllers/TransactionsController.html":{}}}],["src/common/dto/find",{"_index":1080,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"coverage.html":{}}}],["src/common/dto/id/id.dto.ts",{"_index":1142,"title":{},"body":{"classes/ID.html":{},"coverage.html":{}}}],["src/common/dto/id/id.dto.ts:13",{"_index":1144,"title":{},"body":{"classes/ID.html":{}}}],["src/common/dto/pagination/pagination.dto.ts",{"_index":1620,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/enums",{"_index":76,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CreateAccountDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["src/common/enums/currency.enum.ts",{"_index":1733,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/enums/error",{"_index":1737,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/filters/all",{"_index":284,"title":{},"body":{"classes/AllExceptionFilter.html":{},"coverage.html":{}}}],["src/common/filters/http",{"_index":1139,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/common/helpers",{"_index":1125,"title":{},"body":{"classes/FindManyOptionsDto.html":{}}}],["src/common/helpers/dot",{"_index":1622,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/number.helper.ts",{"_index":1624,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/query",{"_index":1627,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/common/interceptors/transform.interceptor.ts",{"_index":1216,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/common/interceptors/transform.interceptor.ts:22",{"_index":1416,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/config",{"_index":542,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CreateMockFileReturn.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["src/config/config.module.ts",{"_index":736,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service.ts",{"_index":739,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/config/config.service.ts:11",{"_index":744,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:27",{"_index":761,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:37",{"_index":768,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:46",{"_index":747,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/interfaces/config.interface.ts",{"_index":1728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/database/database.module.ts",{"_index":907,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migrations/1615673396368",{"_index":1635,"title":{},"body":{"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1644744884181",{"_index":1549,"title":{},"body":{"classes/accounts1644744884181.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/migrations/1644767124120",{"_index":1572,"title":{},"body":{"classes/categories1644767124120.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/transformers",{"_index":77,"title":{},"body":{"entities/AccountEntity.html":{},"entities/TransactionEntity.html":{}}}],["src/database/transformers/float",{"_index":1638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/accounts/accounts.controller.ts",{"_index":91,"title":{},"body":{"controllers/AccountsController.html":{},"coverage.html":{}}}],["src/modules/accounts/accounts.controller.ts:46",{"_index":103,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/modules/accounts/accounts.controller.ts:58",{"_index":114,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/modules/accounts/accounts.controller.ts:71",{"_index":119,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/modules/accounts/accounts.controller.ts:84",{"_index":110,"title":{},"body":{"controllers/AccountsController.html":{}}}],["src/modules/accounts/accounts.module.ts",{"_index":163,"title":{},"body":{"modules/AccountsModule.html":{}}}],["src/modules/accounts/accounts.service.ts",{"_index":174,"title":{},"body":{"injectables/AccountsService.html":{},"coverage.html":{}}}],["src/modules/accounts/accounts.service.ts:110",{"_index":203,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:127",{"_index":206,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:143",{"_index":209,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:161",{"_index":211,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:185",{"_index":212,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:207",{"_index":196,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:26",{"_index":185,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:33",{"_index":214,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:34",{"_index":215,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:43",{"_index":188,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:65",{"_index":191,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/accounts.service.ts:84",{"_index":199,"title":{},"body":{"injectables/AccountsService.html":{}}}],["src/modules/accounts/dto/create",{"_index":800,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{}}}],["src/modules/accounts/dto/select",{"_index":1229,"title":{},"body":{"classes/SelectAccountsDto.html":{},"coverage.html":{}}}],["src/modules/accounts/dto/update",{"_index":1417,"title":{},"body":{"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["src/modules/accounts/entities",{"_index":1380,"title":{},"body":{"entities/TransactionEntity.html":{},"classes/accounts1644744884181.html":{}}}],["src/modules/accounts/entities/account.entity.ts",{"_index":6,"title":{},"body":{"entities/AccountEntity.html":{},"coverage.html":{}}}],["src/modules/accounts/entities/account.entity.ts:27",{"_index":51,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/accounts/entities/account.entity.ts:34",{"_index":57,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/accounts/entities/account.entity.ts:41",{"_index":48,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/accounts/entities/account.entity.ts:52",{"_index":32,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/accounts/entities/account.entity.ts:63",{"_index":63,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/accounts/entities/account.entity.ts:74",{"_index":42,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/accounts/entities/account.entity.ts:85",{"_index":65,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/accounts/entities/account.entity.ts:91",{"_index":34,"title":{},"body":{"entities/AccountEntity.html":{}}}],["src/modules/auth/auth.constants.ts",{"_index":1644,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:104",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:113",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:122",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:134",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:149",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:164",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:179",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:58",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:67",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:78",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:90",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":532,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:108",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:119",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:131",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:141",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:162",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:172",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:190",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:211",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:226",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:240",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:34",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:35",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:36",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:37",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:65",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:81",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:97",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/confirmation",{"_index":787,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/create",{"_index":849,"title":{},"body":{"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/credentials.dto.ts",{"_index":896,"title":{},"body":{"classes/CredentialsDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/jwt",{"_index":1146,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/reset",{"_index":1212,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/select",{"_index":1235,"title":{},"body":{"classes/SelectProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/dto/update",{"_index":1425,"title":{},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt",{"_index":1163,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts",{"_index":1151,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:12",{"_index":1153,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:28",{"_index":1155,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/modules/auth/strategies/jwt",{"_index":1174,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":1194,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:16",{"_index":1195,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:36",{"_index":1196,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/categories/categories.controller.ts",{"_index":671,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/modules/categories/categories.controller.ts:46",{"_index":674,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.controller.ts:58",{"_index":677,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.controller.ts:71",{"_index":679,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.controller.ts:84",{"_index":675,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/modules/categories/categories.module.ts",{"_index":692,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/modules/categories/categories.service.ts",{"_index":695,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/modules/categories/categories.service.ts:100",{"_index":703,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:118",{"_index":704,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:139",{"_index":700,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:23",{"_index":698,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:30",{"_index":706,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:38",{"_index":699,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:56",{"_index":701,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/categories.service.ts:82",{"_index":702,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/modules/categories/dto/create",{"_index":814,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/modules/categories/dto/select",{"_index":1233,"title":{},"body":{"classes/SelectCategoriesDto.html":{},"coverage.html":{}}}],["src/modules/categories/dto/update",{"_index":1422,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/modules/categories/entities",{"_index":1381,"title":{},"body":{"entities/TransactionEntity.html":{},"classes/categories1644767124120.html":{}}}],["src/modules/categories/entities/category.entity.ts",{"_index":718,"title":{},"body":{"entities/CategoryEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/categories/entities/category.entity.ts:29",{"_index":724,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["src/modules/categories/entities/category.entity.ts:36",{"_index":728,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["src/modules/categories/entities/category.entity.ts:43",{"_index":725,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["src/modules/categories/entities/category.entity.ts:50",{"_index":722,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["src/modules/categories/entities/category.entity.ts:61",{"_index":726,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["src/modules/categories/entities/category.entity.ts:72",{"_index":723,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["src/modules/categories/entities/category.entity.ts:83",{"_index":729,"title":{},"body":{"entities/CategoryEntity.html":{}}}],["src/modules/exchangerate/constants/exchangerate",{"_index":1651,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exchangerate/constants/exchangerate.constants.ts",{"_index":1655,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exchangerate/dto/currency.dto.ts",{"_index":904,"title":{},"body":{"classes/CurrencyRateDto.html":{},"coverage.html":{}}}],["src/modules/exchangerate/dto/currency.dto.ts:6",{"_index":905,"title":{},"body":{"classes/CurrencyRateDto.html":{}}}],["src/modules/exchangerate/dto/currency.dto.ts:9",{"_index":906,"title":{},"body":{"classes/CurrencyRateDto.html":{}}}],["src/modules/exchangerate/dto/params",{"_index":898,"title":{},"body":{"classes/CurrencyBaseParamDto.html":{},"coverage.html":{}}}],["src/modules/exchangerate/enums/exchangerate",{"_index":1768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/exchangerate/exchangerate.controller.ts",{"_index":1067,"title":{},"body":{"controllers/ExchangerateController.html":{},"coverage.html":{}}}],["src/modules/exchangerate/exchangerate.controller.ts:14",{"_index":1069,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["src/modules/exchangerate/exchangerate.controller.ts:19",{"_index":1071,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["src/modules/exchangerate/exchangerate.controller.ts:24",{"_index":1073,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["src/modules/exchangerate/exchangerate.module.ts",{"_index":937,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/exchangerate/exchangerate.processor.ts",{"_index":958,"title":{},"body":{"classes/ExchangeRateProcessor.html":{},"coverage.html":{}}}],["src/modules/exchangerate/exchangerate.processor.ts:11",{"_index":963,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["src/modules/exchangerate/exchangerate.processor.ts:16",{"_index":968,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["src/modules/exchangerate/exchangerate.processor.ts:21",{"_index":972,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["src/modules/exchangerate/exchangerate.processor.ts:26",{"_index":974,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts",{"_index":984,"title":{},"body":{"injectables/ExchangeRateService.html":{},"coverage.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:101",{"_index":999,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:28",{"_index":998,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:37",{"_index":1014,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:40",{"_index":1000,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:44",{"_index":1008,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:49",{"_index":1006,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:54",{"_index":1007,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:64",{"_index":1013,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:71",{"_index":1011,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:76",{"_index":1005,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/exchangerate.service.ts:91",{"_index":1003,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["src/modules/exchangerate/types/currency",{"_index":1808,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/modules/transactions/dto/create",{"_index":852,"title":{},"body":{"classes/CreateTransactionDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/transactions/dto/pagination",{"_index":1202,"title":{},"body":{"classes/PaginationTransactionsDto.html":{},"coverage.html":{}}}],["src/modules/transactions/dto/select",{"_index":1237,"title":{},"body":{"classes/SelectTransactionsDto.html":{},"coverage.html":{}}}],["src/modules/transactions/dto/update",{"_index":1430,"title":{},"body":{"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts",{"_index":1358,"title":{},"body":{"entities/TransactionEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:101",{"_index":1377,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:108",{"_index":1373,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:119",{"_index":1370,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:130",{"_index":1379,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:136",{"_index":1367,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:142",{"_index":1366,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:34",{"_index":1376,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:41",{"_index":1378,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:52",{"_index":1365,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:59",{"_index":1375,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:66",{"_index":1372,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:78",{"_index":1369,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/entities/transaction.entity.ts:90",{"_index":1364,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["src/modules/transactions/transactions.controller.ts",{"_index":1384,"title":{},"body":{"controllers/TransactionsController.html":{},"coverage.html":{}}}],["src/modules/transactions/transactions.controller.ts:107",{"_index":1392,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/modules/transactions/transactions.controller.ts:49",{"_index":1387,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/modules/transactions/transactions.controller.ts:64",{"_index":1393,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/modules/transactions/transactions.controller.ts:77",{"_index":1390,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/modules/transactions/transactions.controller.ts:90",{"_index":1395,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/modules/transactions/transactions.module.ts",{"_index":1411,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/modules/transactions/transactions.service.ts",{"_index":1664,"title":{},"body":{"coverage.html":{}}}],["src/modules/users/dto/create",{"_index":883,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/select",{"_index":1268,"title":{},"body":{"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["src/modules/users/dto/update",{"_index":1433,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/users/entities",{"_index":79,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"injectables/JwtRefreshGuard.html":{},"classes/SelectProfileDto.html":{},"entities/TransactionEntity.html":{},"classes/user1615673396368.html":{}}}],["src/modules/users/entities/user",{"_index":1465,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts",{"_index":1436,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/modules/users/entities/user.entity.ts:104",{"_index":1442,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:30",{"_index":1446,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:37",{"_index":1453,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:44",{"_index":1445,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:51",{"_index":1448,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:58",{"_index":1438,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:77",{"_index":1450,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:87",{"_index":1440,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/entities/user.entity.ts:97",{"_index":1455,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/modules/users/enums/user",{"_index":1770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/users/services/user",{"_index":1476,"title":{},"body":{"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts",{"_index":1517,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts:103",{"_index":1527,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:117",{"_index":1526,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:135",{"_index":1528,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:156",{"_index":1523,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:22",{"_index":1521,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:29",{"_index":1530,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:37",{"_index":1522,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:55",{"_index":1524,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:88",{"_index":1525,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.module.ts",{"_index":1514,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/sendgrid",{"_index":548,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/sendgrid/interfaces/sendgrid",{"_index":1306,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.constants.ts",{"_index":1670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/sendgrid/sendgrid.module.ts",{"_index":1271,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:20",{"_index":1284,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:37",{"_index":1288,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:55",{"_index":1280,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.module.ts:73",{"_index":1276,"title":{},"body":{"modules/SendGridModule.html":{}}}],["src/sendgrid/sendgrid.service.ts",{"_index":1321,"title":{},"body":{"injectables/SendGridService.html":{},"coverage.html":{}}}],["src/sendgrid/sendgrid.service.ts:14",{"_index":1335,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:16",{"_index":1329,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:19",{"_index":1327,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:38",{"_index":1331,"title":{},"body":{"injectables/SendGridService.html":{}}}],["src/sendgrid/sendgrid.service.ts:48",{"_index":1333,"title":{},"body":{"injectables/SendGridService.html":{}}}],["ssl",{"_index":910,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["started",{"_index":1581,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["statements",{"_index":1614,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":1272,"title":{},"body":{"modules/SendGridModule.html":{}}}],["status",{"_index":334,"title":{},"body":{"controllers/AppController.html":{},"entities/UserEntity.html":{}}}],["status.enum.ts",{"_index":1727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statuscode",{"_index":311,"title":{},"body":{"classes/AllExceptionFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["store",{"_index":536,"title":{},"body":{"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"dependencies.html":{}}}],["strategies",{"_index":544,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1182,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":835,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream.readable",{"_index":834,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["stream.readable.from(buffer.tostring",{"_index":844,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{}}}],["string",{"_index":49,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AuthService.html":{},"entities/CategoryEntity.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"injectables/ExchangeRateService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"classes/SendResetPasswordDto.html":{},"entities/TransactionEntity.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":1850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subject",{"_index":661,"title":{},"body":{"injectables/AuthService.html":{}}}],["substitutionwrappers",{"_index":1315,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["super",{"_index":1160,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/PaginationTransactionsDto.html":{},"injectables/SendGridService.html":{}}}],["support",{"_index":1785,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1786,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1702,"title":{},"body":{"dependencies.html":{}}}],["symbols",{"_index":1045,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["synchronize",{"_index":925,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["t",{"_index":748,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1676,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1675,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["target",{"_index":1836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[part",{"_index":1840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["target[parts[0",{"_index":1842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["terminusmodule",{"_index":393,"title":{},"body":{"modules/AppModule.html":{}}}],["test",{"_index":1731,"title":{"unit-test.html":{}},"body":{"miscellaneous/enumerations.html":{},"unit-test.html":{}}}],["test/.../mock",{"_index":1775,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test/utils/mock",{"_index":829,"title":{},"body":{"interfaces/CreateMockFileReturn.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["text",{"_index":662,"title":{},"body":{"injectables/AuthService.html":{}}}],["then((account",{"_index":273,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountentityrepository.create(entitylike",{"_index":235,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountentityrepository.createquerybuilder",{"_index":246,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountentityrepository.manager.transaction(async",{"_index":234,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountentityrepository.merge(mergeintoentity",{"_index":276,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountentityrepository.metadata",{"_index":244,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountentityrepository.save(entity",{"_index":237,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.accountsservice.createone",{"_index":146,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.deleteone",{"_index":150,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.selectallwithbasebalance(owner",{"_index":148,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.accountsservice.updateone",{"_index":149,"title":{},"body":{"controllers/AccountsController.html":{}}}],["this.addbalanceinbasecurrency",{"_index":267,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.authservice.createtoken(data",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createuser(data",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatetokens(user",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(data",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendresetpassword(data",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updateemail(data",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(data",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateemailcode(data",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser",{"_index":1191,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["this.cachemanager.del(id",{"_index":667,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.get(user.id",{"_index":654,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.set(id",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cachemanager.store.get(base).catch",{"_index":1035,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.cachemanager.store.mget(object.values(currencyenum",{"_index":1026,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.cachemanager.store.mset(...set",{"_index":1056,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.categoriesservice.createone",{"_index":685,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deleteone",{"_index":688,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.selectall(options",{"_index":686,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updateone",{"_index":687,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryentityrepository.create(entitylike",{"_index":708,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryentityrepository.createquerybuilder",{"_index":713,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryentityrepository.manager.transaction(async",{"_index":707,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryentityrepository.merge(mergeintoentity",{"_index":716,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryentityrepository.metadata",{"_index":712,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryentityrepository.save(entity",{"_index":709,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.configservice.get('jwt_expires_access_token",{"_index":619,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_expires_refresh_token",{"_index":617,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret_access_token",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_secret_refresh_token",{"_index":621,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('redis_host",{"_index":372,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_password",{"_index":377,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_port",{"_index":374,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.get('redis_tls",{"_index":375,"title":{},"body":{"controllers/AppController.html":{}}}],["this.configservice.getdest('store_dest",{"_index":353,"title":{},"body":{"controllers/AppController.html":{}}}],["this.createasyncoptionsprovider(options",{"_index":1301,"title":{},"body":{"modules/SendGridModule.html":{}}}],["this.createasyncproviders(options",{"_index":1298,"title":{},"body":{"modules/SendGridModule.html":{}}}],["this.createone",{"_index":1497,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.disk.checkstorage('disk",{"_index":359,"title":{},"body":{"controllers/AppController.html":{}}}],["this.exchangerateprocessor.add",{"_index":1061,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.exchangerateprocessor.removerepeatable",{"_index":1057,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.exchangerateservice.selectallfromcache",{"_index":1076,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["this.exchangerateservice.selectallfromcacheasrecord",{"_index":264,"title":{},"body":{"injectables/AccountsService.html":{},"controllers/ExchangerateController.html":{}}}],["this.exchangerateservice.selectfromapiandsavetocache",{"_index":983,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["this.exchangerateservice.selectonefromcache(conditions.base",{"_index":1078,"title":{},"body":{"controllers/ExchangerateController.html":{}}}],["this.expiresinaccesstoken",{"_index":618,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.expiresinrefreshtoken",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.find(instancetoplain(options",{"_index":258,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["this.generateaccesstoken(user",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatecode",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken(user",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetokens(user",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.get(key",{"_index":781,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.health.check",{"_index":358,"title":{},"body":{"controllers/AppController.html":{}}}],["this.instance.get('https://api.exchangerate.host/latest",{"_index":1044,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.jwtservice.sign(payload",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":319,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["this.logger.error('onqueuefailed",{"_index":982,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["this.logger.error(error",{"_index":1023,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.logger.error(error.message",{"_index":1356,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.logger.verbose('onqueuecompleted",{"_index":980,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["this.memory.checkheap('memory_heap",{"_index":363,"title":{},"body":{"controllers/AppController.html":{}}}],["this.memory.checkrss('memory_rss",{"_index":366,"title":{},"body":{"controllers/AppController.html":{}}}],["this.microservice.pingcheck('redis",{"_index":369,"title":{},"body":{"controllers/AppController.html":{}}}],["this.moduleinit().catch((error",{"_index":1022,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.options.default",{"_index":1340,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.password",{"_index":1463,"title":{},"body":{"entities/UserEntity.html":{}}}],["this.path",{"_index":360,"title":{},"body":{"controllers/AppController.html":{}}}],["this.savealltocache(rates",{"_index":1025,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.secretaccesstoken",{"_index":622,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.secretrefreshtoken",{"_index":620,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.selectall(options",{"_index":265,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.selectallfromapi",{"_index":1024,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.selectallfromcache",{"_index":1063,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.selectfromapiandsavetocache",{"_index":1066,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.selection?.map((key",{"_index":1137,"title":{},"body":{"classes/FindOneOptionsDto.html":{}}}],["this.selectone",{"_index":711,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/UsersService.html":{}}}],["this.selectone(conditions",{"_index":275,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["this.selectonefromcache(base",{"_index":1039,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["this.selectonewithbasebalance",{"_index":242,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.selectonewithbasebalance(conditions",{"_index":279,"title":{},"body":{"injectables/AccountsService.html":{}}}],["this.send(this.mergewithdefaultmaildata(data)).catch",{"_index":1354,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.sendgridservice.sendmail",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sendmultiple(this.mergewithdefaultmaildata(data)).catch",{"_index":1357,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.setapikey(options.apikey",{"_index":1353,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.setsubstitutionwrappers",{"_index":1350,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.settimeout(options.timeout",{"_index":1348,"title":{},"body":{"injectables/SendGridService.html":{}}}],["this.transactionsservice.createone",{"_index":1401,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.createoneexportcsv(rep",{"_index":1404,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.deleteone",{"_index":1406,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.selectallwithbasebalance(owner",{"_index":1403,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.updateone",{"_index":1405,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.typeorm.pingcheck('database",{"_index":368,"title":{},"body":{"controllers/AppController.html":{}}}],["this.userentityrepository.create(entitylike",{"_index":1532,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.createquerybuilder",{"_index":1536,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.findoneorfail",{"_index":1544,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.manager.transaction(async",{"_index":1531,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.merge(mergeintoentity",{"_index":1546,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.metadata",{"_index":1535,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userentityrepository.save(entity",{"_index":1533,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrefreshtokenentityrepository",{"_index":1503,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.create(entitylike",{"_index":1499,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.manager.transaction",{"_index":1509,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.manager.transaction(async",{"_index":1498,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.merge(mergeintoentity",{"_index":1508,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.metadata",{"_index":1502,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokenentityrepository.save(entity",{"_index":1500,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["this.userrefreshtokensservice.deleteone",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userrefreshtokensservice.generateandcreateone",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createone(data",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.selectone",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.selectone(data",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateone",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.validateemailcode(data",{"_index":664,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(data.oldpassword",{"_index":669,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(data.password",{"_index":665,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepassword(password",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{}}}],["thresholdpercent",{"_index":361,"title":{},"body":{"controllers/AppController.html":{}}}],["throttlerguard",{"_index":390,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":391,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":406,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":239,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"injectables/ExchangeRateService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/SendGridService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["timeout",{"_index":1314,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["timestamptz",{"_index":39,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["tls",{"_index":378,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["token",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/JwtTokensDto.html":{},"changelog.html":{}}}],["token.entity",{"_index":1460,"title":{},"body":{"entities/UserEntity.html":{}}}],["token.entity.ts",{"_index":1466,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{},"coverage.html":{}}}],["token.entity.ts:21",{"_index":1468,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:29",{"_index":1470,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:38",{"_index":1472,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:48",{"_index":1467,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["token.entity.ts:58",{"_index":1471,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["tokens",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens')@useguards(jwtrefreshguard)@apibody({type",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.dto.ts",{"_index":1147,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{},"classes/JwtRefreshTokenDto.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"classes/JwtTokensDto.html":{},"coverage.html":{}}}],["tokens.dto.ts:11",{"_index":1200,"title":{},"body":{"classes/JwtTokensDto.html":{}}}],["tokens.dto.ts:17",{"_index":1199,"title":{},"body":{"classes/JwtTokensDto.html":{}}}],["tokens.dto.ts:32",{"_index":1148,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{}}}],["tokens.dto.ts:37",{"_index":1149,"title":{},"body":{"classes/JwtAccessTokenPayloadDto.html":{}}}],["tokens.dto.ts:47",{"_index":1171,"title":{},"body":{"classes/JwtRefreshTokenPayloadDto.html":{}}}],["tokens.service.ts",{"_index":1477,"title":{},"body":{"injectables/UserRefreshTokensService.html":{},"coverage.html":{}}}],["tokens.service.ts:100",{"_index":1488,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:118",{"_index":1489,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:137",{"_index":1483,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:24",{"_index":1481,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:31",{"_index":1491,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:39",{"_index":1486,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:54",{"_index":1482,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:70",{"_index":1484,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["tokens.service.ts:85",{"_index":1487,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["toplainonly",{"_index":1128,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{}}}],["transaction",{"_index":194,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["transaction.dto",{"_index":1431,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts",{"_index":853,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["transaction.dto.ts:24",{"_index":870,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:32",{"_index":859,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:40",{"_index":862,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:48",{"_index":864,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:55",{"_index":866,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:63",{"_index":860,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:71",{"_index":856,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction_already_exist",{"_index":1762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transaction_already_exists",{"_index":1763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transaction_not_found",{"_index":1765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transactionalentitymanager",{"_index":278,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["transactionentity",{"_index":1205,"title":{"entities/TransactionEntity.html":{}},"body":{"classes/PaginationTransactionsDto.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["transactions",{"_index":1385,"title":{},"body":{"controllers/TransactionsController.html":{},"changelog.html":{}}}],["transactions.controller",{"_index":1413,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions.dto.ts",{"_index":1203,"title":{},"body":{"classes/PaginationTransactionsDto.html":{},"classes/SelectTransactionsDto.html":{},"coverage.html":{}}}],["transactions.dto.ts:22",{"_index":1247,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["transactions.dto.ts:33",{"_index":1244,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["transactions.dto.ts:41",{"_index":1241,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["transactions.dto.ts:49",{"_index":1240,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["transactions.dto.ts:54",{"_index":1249,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["transactions.dto.ts:8",{"_index":1206,"title":{},"body":{"classes/PaginationTransactionsDto.html":{}}}],["transactions.service",{"_index":1398,"title":{},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{}}}],["transactions_not_found",{"_index":1764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transactionscontroller",{"_index":1383,"title":{"controllers/TransactionsController.html":{}},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["transactionsmodule",{"_index":387,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsservice",{"_index":1397,"title":{},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"coverage.html":{},"overview.html":{}}}],["transactiontypeenum",{"_index":867,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["transactiontypeenum.expense",{"_index":874,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transactiontypeenum.income",{"_index":875,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transform",{"_index":1122,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{},"miscellaneous/variables.html":{}}}],["transformer",{"_index":29,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"classes/CreateTransactionDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"changelog.html":{},"dependencies.html":{}}}],["transforminterceptor",{"_index":1224,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["transport",{"_index":337,"title":{},"body":{"controllers/AppController.html":{}}}],["transport.redis",{"_index":370,"title":{},"body":{"controllers/AppController.html":{}}}],["true",{"_index":38,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"modules/ExchangeRateModule.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/MockExchangeRateProcessor.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["true})@arraymaxsize(undefined.length)@apipropertyoptional({example",{"_index":1246,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["true})@arrayminsize(2)@arraymaxsize(2)@type(undefined)@apipropertyoptional({example",{"_index":1243,"title":{},"body":{"classes/SelectTransactionsDto.html":{}}}],["true})@column({type",{"_index":721,"title":{},"body":{"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{}}}],["true})@createdatecolumn({readonly",{"_index":37,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{}}}],["true})@createdatecolumn({type",{"_index":1439,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["true})@deletedatecolumn",{"_index":1441,"title":{},"body":{"entities/UserEntity.html":{}}}],["true})@isnotempty({each",{"_index":1091,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["true})@joincolumn",{"_index":1363,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["true})@manytoone(undefined",{"_index":1368,"title":{},"body":{"entities/TransactionEntity.html":{}}}],["true})@primarygeneratedcolumn('uuid",{"_index":50,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["true})@transform",{"_index":1092,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{}}}],["true})@updatedatecolumn({readonly",{"_index":64,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{}}}],["true})@updatedatecolumn({type",{"_index":1454,"title":{},"body":{"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["try",{"_index":785,"title":{},"body":{"injectables/ConfigService.html":{}}}],["ttl",{"_index":409,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{}}}],["two",{"_index":1103,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["type",{"_index":21,"title":{},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"injectables/ConfigService.html":{},"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"interfaces/CreateMockFileReturn.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/CurrencyRateDto.html":{},"modules/DatabaseModule.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/ID.html":{},"classes/JwtAccessTokenPayloadDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"classes/JwtRefreshTokenPayloadDto.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/JwtTokensDto.html":{},"classes/PaginationTransactionsDto.html":{},"classes/ResetPasswordDto.html":{},"interfaces/Response.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{},"injectables/SendGridService.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdatePasswordDto.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["type.enum.ts",{"_index":1722,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":1802,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror(`the",{"_index":784,"title":{},"body":{"injectables/ConfigService.html":{}}}],["typeof",{"_index":1841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeorm",{"_index":75,"title":{},"body":{"entities/AccountEntity.html":{},"injectables/AccountsService.html":{},"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"dependencies.html":{},"properties.html":{},"classes/user1615673396368.html":{}}}],["typeormhealthindicator",{"_index":345,"title":{},"body":{"controllers/AppController.html":{}}}],["typeormmodule",{"_index":167,"title":{},"body":{"modules/AccountsModule.html":{},"modules/CategoriesModule.html":{},"modules/DatabaseModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([accountentity",{"_index":171,"title":{},"body":{"modules/AccountsModule.html":{}}}],["typeormmodule.forfeature([categoryentity",{"_index":694,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([transactionentity",{"_index":1414,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":1516,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":909,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":757,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ExchangeRateService.html":{},"controllers/ExchangerateController.html":{},"classes/SelectTransactionsDto.html":{}}}],["uah",{"_index":1734,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unauthorizedexception",{"_index":1157,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_invalid_refresh_token",{"_index":1170,"title":{},"body":{"injectables/JwtRefreshGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_invalid_token",{"_index":1161,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception(errortypeenum.auth_unauthorized",{"_index":1162,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["undefined",{"_index":47,"title":{},"body":{"entities/AccountEntity.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"classes/CreateTransactionDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectProfileDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"entities/UserEntity.html":{}}}],["undefined})@column({type",{"_index":45,"title":{},"body":{"entities/AccountEntity.html":{},"entities/UserEntity.html":{}}}],["unique",{"_index":1444,"title":{},"body":{"entities/UserEntity.html":{}}}],["uniqueitems",{"_index":1443,"title":{},"body":{"entities/UserEntity.html":{}}}],["unit",{"_index":1809,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["up",{"_index":1553,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["up(undefined",{"_index":1557,"title":{},"body":{"classes/accounts1644744884181.html":{},"classes/categories1644767124120.html":{},"classes/user1615673396368.html":{}}}],["update_currency_rates",{"_index":1769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updateaccountdto",{"_index":117,"title":{"classes/UpdateAccountDto.html":{}},"body":{"controllers/AccountsController.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["updatecategorydto",{"_index":678,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecurrencyrates",{"_index":961,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["updatedat",{"_index":20,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["updatedatecolumn",{"_index":73,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["updateemail",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemail(data",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateemaildto",{"_index":470,"title":{"classes/UpdateEmailDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updateone",{"_index":99,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["updateone(conditions",{"_index":116,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/TransactionsController.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["updatepassword",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassword(data",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":474,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updateprofiledto",{"_index":466,"title":{"classes/UpdateProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updatetransactiondto",{"_index":1394,"title":{"classes/UpdateTransactionDto.html":{}},"body":{"controllers/TransactionsController.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuser(data",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserdto",{"_index":1426,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["updateuseremail",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuseremail(data",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserpassword",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserpassword(data",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{}}}],["url",{"_index":301,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["url(request.url",{"_index":320,"title":{},"body":{"classes/AllExceptionFilter.html":{}}}],["usd",{"_index":1736,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["use",{"_index":1096,"title":{},"body":{"classes/FindManyOptionsDto.html":{},"classes/SelectAccountsDto.html":{},"classes/SelectCategoriesDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SelectUsersDto.html":{}}}],["useclass",{"_index":421,"title":{},"body":{"modules/AppModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["useexisting",{"_index":1309,"title":{},"body":{"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["usefactory",{"_index":408,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{},"interfaces/SendGridModuleAsyncOptions.html":{},"interfaces/SendGridModuleOptions.html":{},"interfaces/SendGridOptionsFactory.html":{}}}],["useguards",{"_index":127,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["useguards(jwtauthguard",{"_index":142,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["useguards(jwtrefreshguard",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":128,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":143,"title":{},"body":{"controllers/AccountsController.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["user",{"_index":131,"title":{},"body":{"controllers/AccountsController.html":{},"classes/AllExceptionFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/TransactionsController.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":1434,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts",{"_index":884,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SelectUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":890,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":893,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":886,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1473,"title":{},"body":{"entities/UserRefreshTokenEntity.html":{}}}],["user.id",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.migration.ts",{"_index":1636,"title":{},"body":{"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["user.migration.ts:14",{"_index":1813,"title":{},"body":{"classes/user1615673396368.html":{}}}],["user.migration.ts:20",{"_index":1812,"title":{},"body":{"classes/user1615673396368.html":{}}}],["user.password",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.refreshtokens",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["user1615673396368",{"_index":1637,"title":{"classes/user1615673396368.html":{}},"body":{"coverage.html":{},"classes/user1615673396368.html":{}}}],["user_already_exist",{"_index":1747,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_already_exists",{"_index":1748,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_not_found",{"_index":1750,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_token_already_exist",{"_index":1751,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_token_not_found",{"_index":1753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["user_refresh_tokens_not_found",{"_index":1752,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["userentity",{"_index":78,"title":{"entities/UserEntity.html":{}},"body":{"entities/AccountEntity.html":{},"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/CategoryEntity.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/SelectProfileDto.html":{},"classes/SelectUserDto.html":{},"classes/SelectUsersDto.html":{},"entities/TransactionEntity.html":{},"controllers/TransactionsController.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/user1615673396368.html":{},"miscellaneous/variables.html":{}}}],["userentityrepository",{"_index":1518,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":917,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["userrefreshtoken",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrefreshtokenentity",{"_index":579,"title":{"entities/UserRefreshTokenEntity.html":{}},"body":{"injectables/AuthService.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userrefreshtokenentityrepository",{"_index":1478,"title":{},"body":{"injectables/UserRefreshTokensService.html":{}}}],["userrefreshtokensservice",{"_index":484,"title":{"injectables/UserRefreshTokensService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserRefreshTokensService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["users",{"_index":543,"title":{},"body":{"modules/AuthModule.html":{}}}],["users.dto.ts",{"_index":1270,"title":{},"body":{"classes/SelectUsersDto.html":{},"coverage.html":{}}}],["users/dto",{"_index":793,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateProfileDto.html":{},"classes/CredentialsDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{}}}],["users/entities",{"_index":134,"title":{},"body":{"controllers/AccountsController.html":{},"injectables/AccountsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/TransactionsController.html":{}}}],["users/services",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["users_not_found",{"_index":1749,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["usersmodule",{"_index":388,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":485,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstatusenum",{"_index":1451,"title":{},"body":{"entities/UserEntity.html":{},"miscellaneous/enumerations.html":{}}}],["userstatusenum.activated",{"_index":1452,"title":{},"body":{"entities/UserEntity.html":{}}}],["usevalue",{"_index":956,"title":{},"body":{"modules/ExchangeRateModule.html":{},"classes/MockExchangeRateProcessor.html":{},"modules/SendGridModule.html":{}}}],["validate",{"_index":1176,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(undefined",{"_index":1179,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validateemailcode",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["validateemailcode(@body",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{}}}],["validateemailcode(data",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["validatenested",{"_index":873,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["validatenested()@type(undefined)@apiproperty({type",{"_index":855,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["validatepassword",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepassword(data",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(conditions",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":796,"title":{},"body":{"classes/ConfirmationEmailDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/CreateUserDto.html":{},"classes/CurrencyBaseParamDto.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/ID.html":{},"classes/ResetPasswordDto.html":{},"classes/SelectTransactionsDto.html":{},"classes/SendResetPasswordDto.html":{},"classes/UpdateEmailDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateProfileDto.html":{},"dependencies.html":{}}}],["value",{"_index":192,"title":{},"body":{"injectables/AccountsService.html":{},"classes/AllExceptionFilter.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"classes/ExchangeRateProcessor.html":{},"injectables/ExchangeRateService.html":{},"classes/FindManyOptionsDto.html":{},"classes/FindOneOptionsDto.html":{},"classes/SelectTransactionsDto.html":{},"injectables/SendGridService.html":{},"entities/UserEntity.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.data",{"_index":1050,"title":{},"body":{"injectables/ExchangeRateService.html":{}}}],["value.tostring().padstart(digits",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{}}}],["valuetransformer",{"_index":1851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["varchar",{"_index":55,"title":{},"body":{"entities/AccountEntity.html":{},"entities/CategoryEntity.html":{},"entities/TransactionEntity.html":{},"entities/UserEntity.html":{},"entities/UserRefreshTokenEntity.html":{}}}],["variable",{"_index":750,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["variables",{"_index":1817,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1793,"title":{},"body":{"properties.html":{}}}],["void",{"_index":969,"title":{},"body":{"classes/ExchangeRateProcessor.html":{}}}],["where(conditions",{"_index":269,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/CategoriesService.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{}}}],["yes",{"_index":201,"title":{},"body":{"injectables/AccountsService.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ConfigService.html":{},"modules/SendGridModule.html":{},"injectables/UserRefreshTokensService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":160,"title":{},"body":{"modules/AccountsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/ExchangeRateModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/AccountEntity.html":{"url":"entities/AccountEntity.html","title":"entity - AccountEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  AccountEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/accounts/entities/account.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                balance\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                balanceInBaseCurrency\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                currencyCode\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'bigint', nullable: false, transformer: FloatIntColumnTransformer})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:52\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        balanceInBaseCurrency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:91\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:74\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currencyCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: CurrencyEnum, default: undefined})@Column({type: 'enum', enum: CurrencyEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:41\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:27\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 64, nullable: false})@Column({type: 'varchar', length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:34\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:63\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/entities/account.entity.ts:85\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { CurrencyEnum } from 'src/common/enums';\nimport { FloatIntColumnTransformer } from 'src/database/transformers';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\n@Entity('accounts')\nexport class AccountEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 64, nullable: false })\n  @Column({ type: 'varchar', length: 64, nullable: false })\n  public readonly name: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: CurrencyEnum, default: CurrencyEnum.UAH })\n  @Column({ type: 'enum', enum: CurrencyEnum, default: CurrencyEnum.UAH })\n  public readonly currencyCode: CurrencyEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  @Column({\n    type: 'bigint',\n    nullable: false,\n    transformer: FloatIntColumnTransformer,\n  })\n  public readonly balance: number;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn()\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly balanceInBaseCurrency?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountsController.html":{"url":"controllers/AccountsController.html","title":"controller - AccountsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/accounts/accounts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                accounts\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(data: CreateAccountDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/accounts/accounts.controller.ts:46\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/accounts/accounts.controller.ts:84\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectAccountsDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/accounts/accounts.controller.ts:58\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectAccountsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateAccountDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/accounts/accounts.controller.ts:71\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { UserEntity } from '../users/entities';\nimport { JwtAuthGuard } from '../auth/guards';\n\nimport { CreateAccountDto, UpdateAccountDto, SelectAccountsDto } from './dto';\nimport { AccountsService } from './accounts.service';\nimport { AccountEntity } from './entities';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@ApiTags('accounts')\n@Controller('accounts')\n@UseGuards(JwtAuthGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AccountsController {\n  /**\n   * [description]\n   * @param accountsService\n   */\n  constructor(private readonly accountsService: AccountsService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post()\n  public async createOne(\n    @Body() data: CreateAccountDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.accountsService.createOne({ ...data, owner: { id: owner.id } }, owner);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  public async selectAll(\n    @Query() options: SelectAccountsDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.accountsService.selectAllWithBaseBalance(owner, options);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  @Patch(':id')\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateAccountDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.accountsService.updateOne({ ...conditions, owner: { id: owner.id } }, owner, data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  public async deleteOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.accountsService.deleteOne({ ...conditions, owner: { id: owner.id } }, owner);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountsModule.html":{"url":"modules/AccountsModule.html","title":"module - AccountsModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_imports\n\n\n\n\nExchangeRateModule\n\nExchangeRateModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nExchangeRateModule->AccountsModule\n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/accounts/accounts.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ExchangeRateModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { ExchangeRateModule } from '../exchangerate';\n\nimport { AccountsController } from './accounts.controller';\nimport { AccountsService } from './accounts.service';\nimport { AccountEntity } from './entities';\n\n/**\n * [description]\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([AccountEntity]), ExchangeRateModule],\n  controllers: [AccountsController],\n  providers: [AccountsService],\n  exports: [AccountsService],\n})\nexport class AccountsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountsService.html":{"url":"injectables/AccountsService.html","title":"injectable - AccountsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccountsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/accounts/accounts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                accountEntityRepository\n                            \n                            \n                                    Public\n                                    Readonly\n                                exchangeRateService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addBalanceInBaseCurrency\n                            \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectAllWithBaseBalance\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneWithBaseBalance\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountEntityRepository: Repository, exchangeRateService: ExchangeRateService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/accounts/accounts.service.ts:26\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exchangeRateService\n                                                  \n                                                        \n                                                                        ExchangeRateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addBalanceInBaseCurrency\n                        \n                    \n                \n            \n            \n                \n                    \n                    addBalanceInBaseCurrency(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:43\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AccountEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, owner: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:65\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere, owner: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:207\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:84\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions, owner?: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:110\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAllWithBaseBalance\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllWithBaseBalance(owner: Partial, options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:127\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:143\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneWithBaseBalance\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneWithBaseBalance(conditions: FindOptionsWhere, owner: Partial, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:161\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, owner: Partial, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/accounts/accounts.service.ts:185\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        accountEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(AccountEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/accounts.service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        exchangeRateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ExchangeRateService\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/accounts.service.ts:34\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain, plainToInstance } from 'class-transformer';\nimport {\n  Repository,\n  SaveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { CurrencyEnum, ErrorTypeEnum } from 'src/common/enums';\n\nimport { CurrencyRateCacheRecord } from '../exchangerate/types';\nimport { ExchangeRateService } from '../exchangerate';\n\nimport { AccountEntity } from './entities';\nimport { UserEntity } from '../users/entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class AccountsService {\n  /**\n   * [description]\n   * @param accountEntityRepository\n   */\n  constructor(\n    @InjectRepository(AccountEntity)\n    public readonly accountEntityRepository: Repository,\n    public readonly exchangeRateService: ExchangeRateService,\n  ) {}\n\n  /**\n   * [description]\n   * @param rates\n   * @param account\n   * @param baseCurrency\n   */\n  public addBalanceInBaseCurrency({\n    rates,\n    account,\n    baseCurrency,\n  }: {\n    rates: CurrencyRateCacheRecord;\n    account: Partial;\n    baseCurrency: CurrencyEnum;\n  }): AccountEntity {\n    const currencyRate = rates[account.currencyCode][baseCurrency];\n    const balanceInBaseCurrency = parseFloat((currencyRate * account.balance).toFixed(2));\n    return plainToInstance(AccountEntity, {\n      ...account,\n      balanceInBaseCurrency,\n    });\n  }\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    owner: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.accountEntityRepository.manager.transaction(async () => {\n      const entity = this.accountEntityRepository.create(entityLike);\n      const { id } = await this.accountEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.ACCOUNT_ALREADY_EXIST);\n      });\n\n      return this.selectOneWithBaseBalance({ id }, owner, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.accountEntityRepository.metadata;\n    const qb = this.accountEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    /**\n     * Place for common relation\n     * @example\n     */\n    /* if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      qb.leftJoinAndSelect('Entity.relation_field', 'Entity_relation_field')\n    } */\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n    owner?: Partial,\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    if (options.where) qb.where(options.where);\n    if (owner) qb.andWhere({ owner });\n\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.ACCOUNTS_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAllWithBaseBalance(\n    owner: Partial,\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    const rates = await this.exchangeRateService.selectAllFromCacheAsRecord();\n    const accounts = await this.selectAll(options, owner);\n    return accounts.map((account) =>\n      this.addBalanceInBaseCurrency({ rates, account, baseCurrency: owner.baseCurrency }),\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(instanceToPlain(options))\n      .where(conditions)\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.ACCOUNT_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   * @param options\n   */\n  public async selectOneWithBaseBalance(\n    conditions: FindOptionsWhere,\n    owner: Partial,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    const rates = await this.exchangeRateService.selectAllFromCacheAsRecord();\n    return this.find(instanceToPlain(options))\n      .where(conditions)\n      .getOneOrFail()\n      .then((account) =>\n        this.addBalanceInBaseCurrency({ rates, account, baseCurrency: owner.baseCurrency }),\n      )\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.ACCOUNT_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param owner\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    owner: Partial,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.accountEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.accountEntityRepository.merge(mergeIntoEntity, entityLike);\n      const { id } = await this.accountEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.ACCOUNT_ALREADY_EXIST);\n      });\n\n      return this.selectOneWithBaseBalance({ id }, owner, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param onwer\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n    owner: Partial,\n  ): Promise {\n    return this.accountEntityRepository.manager.transaction(async (transactionalEntityManager) => {\n      const entity = await this.selectOneWithBaseBalance(conditions, owner);\n      await transactionalEntityManager\n        .delete(AccountEntity, conditions)\n        .then(({ affected }) => {\n          if (!affected) throw new NotFoundException(ErrorTypeEnum.ACCOUNT_NOT_FOUND);\n        })\n        .catch(() => {\n          throw new NotFoundException(ErrorTypeEnum.ACCOUNT_NOT_FOUND);\n        });\n      return entity;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionFilter.html":{"url":"classes/AllExceptionFilter.html","title":"class - AllExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/all-exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Logger\n\n                    \n                \n                \n                    \n                        Default value : new Logger(AllExceptionFilter.name)\n                    \n                \n                    \n                        \n                                Defined in src/common/filters/all-exception.filter.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/all-exception.filter.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     FastifyReply\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Catch,\n  Logger,\n  HttpStatus,\n  ArgumentsHost,\n  HttpException,\n  ExceptionFilter,\n} from '@nestjs/common';\nimport { URL } from 'node:url';\nimport { FastifyReply } from 'fastify';\n\nimport { ErrorTypeEnum } from '../enums';\n\n@Catch()\nexport class AllExceptionFilter implements ExceptionFilter {\n  private readonly logger: Logger = new Logger(AllExceptionFilter.name);\n\n  catch(exception: Error, host: ArgumentsHost): FastifyReply {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n\n    const statusCode =\n      exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const { message, error } =\n      exception instanceof HttpException\n        ? (exception.getResponse() as Record)\n        : {\n            message: ErrorTypeEnum.INTERNAL_SERVER_ERROR,\n            error: ErrorTypeEnum.INTERNAL_SERVER_ERROR,\n          };\n\n    this.logger.error(\n      {\n        url: new URL(request.url, 'logger://').pathname,\n        method: request.method,\n        params: request.params,\n        query: request.query,\n        body: request.body,\n        user: request.user,\n        statusCode,\n        message,\n      },\n      exception.stack,\n    );\n\n    return response.status(statusCode).send({ error, statusCode, message: [].concat(message) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                status\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        status\n                        \n                    \n                \n            \n            \n                \n                    \n                    status()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:50\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Transport, RedisOptions } from '@nestjs/microservices';\nimport { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport {\n  HealthCheck,\n  HealthCheckResult,\n  HealthCheckService,\n  DiskHealthIndicator,\n  MemoryHealthIndicator,\n  TypeOrmHealthIndicator,\n  MicroserviceHealthIndicator,\n} from '@nestjs/terminus';\n\nimport { ConfigService } from './config';\n\n/**\n * [description]\n */\n@ApiTags('status')\n@Controller('status')\nexport class AppController {\n  /**\n   * [description]\n   * @private\n   */\n  private readonly path = this.configService.getDest('STORE_DEST');\n\n  /**\n   * [description]\n   * @param configService\n   * @param typeorm\n   * @param memory\n   * @param health\n   * @param disk\n   */\n  constructor(\n    private readonly microservice: MicroserviceHealthIndicator,\n    private readonly configService: ConfigService,\n    private readonly typeorm: TypeOrmHealthIndicator,\n    private readonly memory: MemoryHealthIndicator,\n    private readonly health: HealthCheckService,\n    private readonly disk: DiskHealthIndicator,\n  ) {}\n\n  /**\n   * [description]\n   */\n  @Get()\n  @HealthCheck()\n  public status(): Promise {\n    return this.health.check([\n      () => this.disk.checkStorage('disk', { path: this.path, thresholdPercent: 1 }),\n      () => this.memory.checkHeap('memory_heap', 2 ** 30),\n      () => this.memory.checkRSS('memory_rss', 2 ** 31),\n      () => this.typeorm.pingCheck('database'),\n      () =>\n        this.microservice.pingCheck('redis', {\n          transport: Transport.REDIS,\n          options: Object.assign(\n            {\n              host: this.configService.get('REDIS_HOST'),\n              port: this.configService.get('REDIS_PORT'),\n            },\n            this.configService.get('REDIS_TLS') && {\n              auth_pass: this.configService.get('REDIS_PASSWORD'),\n              tls: { rejectUnauthorized: false },\n            },\n          ),\n        }),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAccountsModule\n\nAccountsModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nExchangeRateModule\n\nExchangeRateModule\n\nAppModule -->\n\nExchangeRateModule->AppModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ExchangeRateModule\n                        \n                        \n                            TransactionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { BullModule } from '@nestjs/bull';\nimport { APP_GUARD } from '@nestjs/core';\nimport { Module } from '@nestjs/common';\n\nimport { ConfigModule, ConfigService } from './config';\nimport { DatabaseModule } from './database';\n\nimport { ExchangeRateModule } from './modules/exchangerate';\nimport { TransactionsModule } from './modules/transactions';\nimport { CategoriesModule } from './modules/categories';\nimport { AccountsModule } from './modules/accounts';\nimport { UsersModule } from './modules/users';\nimport { AuthModule } from './modules/auth';\n\nimport { AppController } from './app.controller';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TerminusModule,\n    ThrottlerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        ttl: configService.get('THROTTLE_TTL'),\n        limit: configService.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    BullModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n          password: configService.get('REDIS_HAS_PASSWORD')\n            ? configService.get('REDIS_PASSWORD')\n            : undefined,\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    DatabaseModule,\n    ConfigModule,\n    AuthModule,\n    UsersModule,\n    AccountsModule,\n    CategoriesModule,\n    TransactionsModule,\n    ExchangeRateModule,\n  ],\n  controllers: [AppController],\n  providers: [{ provide: APP_GUARD, useClass: ThrottlerGuard }],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                logOut\n                            \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                selectUser\n                            \n                            \n                                    Public\n                                    Async\n                                sendResetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserEmail\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserPassword\n                            \n                            \n                                    Public\n                                    Async\n                                validateEmailCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(data: CredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('log-out')@UseGuards(JwtRefreshGuard)@ApiBody({type: JwtRefreshTokenDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:78\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshTokens(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@UseGuards(JwtRefreshGuard)@ApiBody({type: JwtRefreshTokenDto})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:113\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectUser(undefined: UserEntity, options: SelectProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:134\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                SelectProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendResetPassword(data: SendResetPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send-reset-password')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:104\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SendResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(data: UpdateProfileDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:149\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUserEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserEmail(data: UpdateEmailDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile/email')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:179\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUserPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserPassword(data: UpdatePasswordDto, user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile/password')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:164\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateEmailCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateEmailCode(data: ConfirmationEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirmation-email-code')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:122\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ConfirmationEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Query,\n  Patch,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\n\nimport { UserRefreshTokensService, UsersService } from '../users/services';\nimport { UserEntity } from '../users/entities';\n\nimport {\n  JwtTokensDto,\n  CredentialsDto,\n  UpdateEmailDto,\n  CreateProfileDto,\n  SelectProfileDto,\n  ResetPasswordDto,\n  UpdateProfileDto,\n  UpdatePasswordDto,\n  JwtRefreshTokenDto,\n  SendResetPasswordDto,\n  ConfirmationEmailDto,\n} from './dto';\nimport { JwtAuthGuard, JwtRefreshGuard } from './guards';\nimport { AuthService } from './auth.service';\n\n/**\n * [description]\n */\n@ApiTags('auth')\n@Controller('auth')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthController {\n  /**\n   * [description]\n   * @param usersService\n   * @param authService\n   */\n  constructor(\n    private readonly userRefreshTokensService: UserRefreshTokensService,\n    private readonly usersService: UsersService,\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('signin')\n  public async createToken(@Body() data: CredentialsDto): Promise {\n    return this.authService.createToken(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('signup')\n  public async createUser(@Body() data: CreateProfileDto): Promise {\n    return this.authService.createUser(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('log-out')\n  @UseGuards(JwtRefreshGuard)\n  @ApiBody({ type: JwtRefreshTokenDto })\n  public async logOut(@User() user: UserEntity): Promise {\n    const [refreshToken] = user.refreshTokens;\n    await this.userRefreshTokensService.deleteOne({ id: refreshToken.id, user: { id: user.id } });\n  }\n\n  /**\n   * [description]\n   * @param user\n   */\n  @Post('refresh-tokens')\n  @UseGuards(JwtRefreshGuard)\n  @ApiBody({ type: JwtRefreshTokenDto })\n  public async refreshTokens(@User() user: UserEntity): Promise {\n    const [oldRefreshToken] = user.refreshTokens;\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({\n      id: oldRefreshToken.id,\n      user: { id: user.id },\n    });\n    return this.authService.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('send-reset-password')\n  public async sendResetPassword(@Body() data: SendResetPasswordDto): Promise {\n    return this.authService.sendResetPassword(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('reset-password')\n  public async resetPassword(@Body() data: ResetPasswordDto): Promise {\n    return this.authService.resetPassword(data);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post('confirmation-email-code')\n  public async validateEmailCode(@Body() data: ConfirmationEmailDto): Promise {\n    await this.authService.validateEmailCode(data);\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param options\n   */\n  @Get('profile')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async selectUser(\n    @User() { id }: UserEntity,\n    @Query() options: SelectProfileDto,\n  ): Promise {\n    return this.usersService.selectOne({ id }, options);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUser(\n    @Body() data: UpdateProfileDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.usersService.updateOne({ id: user.id }, data);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile/password')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUserPassword(\n    @Body() data: UpdatePasswordDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.authService.updatePassword(data, user);\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param data\n   */\n  @Patch('profile/email')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  public async updateUserEmail(\n    @Body() data: UpdateEmailDto,\n    @User() user: UserEntity,\n  ): Promise {\n    return this.authService.updateEmail(data, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSendGridModule\n\nSendGridModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSendGridModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SendGridModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { ConfigService } from 'src/config';\n\nimport { UsersModule } from '../users';\n\nimport { JwtRefreshTokenStrategy, JwtStrategy } from './strategies';\n\nimport { CACHE_AUTH_PREFIX } from './auth.constants';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { SendGridModule } from 'src/sendgrid';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({}),\n    CacheModule.registerAsync({\n      useFactory: async (configService: ConfigService) =>\n        Object.assign(\n          {\n            store: redisStore,\n            prefix: CACHE_AUTH_PREFIX,\n            ttl: configService.get('CACHE_AUTH_TTL'),\n            host: configService.get('REDIS_HOST'),\n            port: configService.get('REDIS_PORT'),\n          },\n          configService.get('REDIS_HAS_PASSWORD') && {\n            auth_pass: configService.get('REDIS_PASSWORD'),\n          },\n          configService.get('REDIS_TLS') && {\n            tls: {\n              rejectUnauthorized: false,\n            },\n          },\n        ),\n      inject: [ConfigService],\n    }),\n    SendGridModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        apiKey: configService.get('SENDGRID_API_KEY'),\n        default: {\n          from: configService.get('SENDGRID_API_SENDER'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, JwtRefreshTokenStrategy],\n  exports: [PassportModule, JwtModule, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                expiresInAccessToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                expiresInRefreshToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretAccessToken\n                            \n                            \n                                    Private\n                                    Readonly\n                                secretRefreshToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                    Public\n                                generateCode\n                            \n                            \n                                    Public\n                                generateRefreshToken\n                            \n                            \n                                    Public\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                resetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                sendResetPassword\n                            \n                            \n                                    Public\n                                    Async\n                                updateEmail\n                            \n                            \n                                    Public\n                                    Async\n                                updatePassword\n                            \n                            \n                                    Public\n                                    Async\n                                validateEmailCode\n                            \n                            \n                                    Public\n                                    Async\n                                validatePassword\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRefreshTokensService: UserRefreshTokensService, sendGridService: SendGridService, configService: ConfigService, usersService: UsersService, jwtService: JwtService, cacheManager: Cache)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:37\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRefreshTokensService\n                                                  \n                                                        \n                                                                        UserRefreshTokensService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sendGridService\n                                                  \n                                                        \n                                                                        SendGridService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(undefined: CredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:119\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: CreateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:131\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(undefined: UserEntity, undefined: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:65\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateCode(digits: number, size: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        6\n                                    \n\n                                \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        20\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(undefined: UserEntity, undefined: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:81\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTokens(user: UserEntity, userRefreshToken: UserRefreshTokenEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:97\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRefreshToken\n                                    \n                                                UserRefreshTokenEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtTokensDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(data: ResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:211\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendResetPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendResetPassword(data: SendResetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:190\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                SendResetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEmail(data: UpdateEmailDto, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:240\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(data: UpdatePasswordDto, user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:226\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateEmailCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateEmailCode(data: ConfirmationEmailDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:172\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                ConfirmationEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(data: string, encrypted: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:162\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encrypted\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(conditions: FindOptionsWhere, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:141\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiresInAccessToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        expiresInRefreshToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretAccessToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        secretRefreshToken\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/auth/auth.service.ts:36\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, CACHE_MANAGER, Inject, Injectable } from '@nestjs/common';\nimport { FindOneOptions, FindOptionsWhere } from 'typeorm';\nimport { ConfigService } from 'src/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Cache } from 'cache-manager';\n\nimport { randomBytes } from 'crypto';\nimport { compare } from 'bcrypt';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { SendGridService } from 'src/sendgrid';\n\nimport { UserEntity, UserRefreshTokenEntity } from '../users/entities';\nimport { UserRefreshTokensService, UsersService } from '../users/services';\n\nimport {\n  JwtTokensDto,\n  CredentialsDto,\n  UpdateEmailDto,\n  CreateProfileDto,\n  ResetPasswordDto,\n  UpdatePasswordDto,\n  SendResetPasswordDto,\n  ConfirmationEmailDto,\n  JwtAccessTokenPayloadDto,\n  JwtRefreshTokenPayloadDto,\n} from './dto';\n\n/**\n * [description]\n */\n@Injectable()\nexport class AuthService {\n  private readonly expiresInRefreshToken;\n  private readonly expiresInAccessToken;\n  private readonly secretRefreshToken;\n  private readonly secretAccessToken;\n\n  /**\n   * [description]\n   * @param configService\n   * @param usersService\n   * @param jwtService\n   */\n  constructor(\n    private readonly userRefreshTokensService: UserRefreshTokensService,\n    private readonly sendGridService: SendGridService,\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    @Inject(CACHE_MANAGER)\n    private cacheManager: Cache,\n  ) {\n    this.expiresInRefreshToken = this.configService.get('JWT_EXPIRES_REFRESH_TOKEN');\n    this.expiresInAccessToken = this.configService.get('JWT_EXPIRES_ACCESS_TOKEN');\n    this.secretRefreshToken = this.configService.get('JWT_SECRET_REFRESH_TOKEN');\n    this.secretAccessToken = this.configService.get('JWT_SECRET_ACCESS_TOKEN');\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param userRefreshToken\n   */\n  public generateAccessToken(\n    { id }: UserEntity,\n    { id: refreshTokenId }: UserRefreshTokenEntity,\n  ): string {\n    const payload: JwtAccessTokenPayloadDto = { id, refreshTokenId };\n    return this.jwtService.sign(payload, {\n      expiresIn: this.expiresInAccessToken,\n      secret: this.secretAccessToken,\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   * @param userRefreshToken\n   */\n  public generateRefreshToken(\n    { id }: UserEntity,\n    { id: refreshTokenId, ppid }: UserRefreshTokenEntity,\n  ): string {\n    const payload: JwtRefreshTokenPayloadDto = { id, refreshTokenId, ppid };\n    return this.jwtService.sign(payload, {\n      expiresIn: this.expiresInRefreshToken,\n      secret: this.secretRefreshToken,\n    });\n  }\n\n  /**\n   * [description]\n   * @param user\n   * @param userRefreshToken\n   */\n  public generateTokens(user: UserEntity, userRefreshToken: UserRefreshTokenEntity): JwtTokensDto {\n    const token = this.generateAccessToken(user, userRefreshToken);\n    const refreshToken = this.generateRefreshToken(user, userRefreshToken);\n    return { token, refreshToken };\n  }\n\n  /**\n   * [description]\n   * @param digits\n   * @param size\n   */\n  public generateCode(digits = 6, size = 20): string {\n    const buffer = randomBytes(size);\n    const value = buffer.readUInt32BE(0x0f) % 10 ** digits;\n    return value.toString().padStart(digits, '0');\n  }\n\n  /**\n   * [description]\n   * @param email\n   * @param password\n   */\n  public async createToken({ email, password }: CredentialsDto): Promise {\n    const user = await this.validateUser({ email }, { relations: null });\n    if (!(await this.validatePassword(password, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({ user });\n    return this.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async createUser(data: CreateProfileDto): Promise {\n    const user = await this.usersService.createOne(data);\n    const refreshToken = await this.userRefreshTokensService.generateAndCreateOne({ user });\n    return this.generateTokens(user, refreshToken);\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async validateUser(\n    conditions: FindOptionsWhere,\n    options?: FindOneOptions,\n  ): Promise {\n    return this.usersService\n      .selectOneByRepository(conditions, {\n        select: { id: true, password: true, baseCurrency: true },\n        relations: { refreshTokens: true },\n        loadEagerRelations: false,\n        ...options,\n      })\n      .catch(() => {\n        throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n      });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param encrypted\n   */\n  public async validatePassword(data: string, encrypted: string): Promise {\n    return compare(data, encrypted).catch(() => {\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    });\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async validateEmailCode(data: ConfirmationEmailDto): Promise> {\n    const { code, email } = data;\n    const user = await this.usersService.selectOne(\n      { email },\n      { loadEagerRelations: false, select: { id: true, password: true } },\n    );\n\n    const cacheCode = await this.cacheManager.get(user.id);\n    if (cacheCode !== code)\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE);\n\n    return user;\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async sendResetPassword(data: SendResetPasswordDto): Promise {\n    const { id } = await this.usersService.selectOne(data, {\n      loadEagerRelations: false,\n      select: { id: true },\n    });\n\n    const code = this.generateCode();\n    this.cacheManager.set(id, code);\n\n    await this.sendGridService.sendMail({\n      to: data.email,\n      subject: 'Забули свій пароль?',\n      text: `Код для скидання паролю: ${code}`,\n      html: `Код для скидання паролю: ${code}`,\n    });\n  }\n\n  /**\n   * [description]\n   * @param data\n   */\n  public async resetPassword(data: ResetPasswordDto): Promise {\n    const { id, password } = await this.validateEmailCode(data);\n\n    if (await this.validatePassword(data.password, password))\n      throw new BadRequestException(ErrorTypeEnum.NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME);\n\n    await this.cacheManager.del(id);\n    await this.usersService.updateOne({ id }, { password: data.password });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async updatePassword(\n    data: UpdatePasswordDto,\n    user: Partial,\n  ): Promise {\n    if (!(await this.validatePassword(data.oldPassword, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    return this.usersService.updateOne({ id: user.id }, { password: data.password });\n  }\n\n  /**\n   * [description]\n   * @param data\n   * @param user\n   */\n  public async updateEmail(data: UpdateEmailDto, user: Partial): Promise {\n    if (!(await this.validatePassword(data.password, user.password)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_PASSWORDS_DO_NOT_MATCH);\n    return this.usersService.updateOne({ id: user.id }, { email: data.email });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(data: CreateCategoryDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/categories/categories.controller.ts:46\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/categories/categories.controller.ts:84\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectCategoriesDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/categories/categories.controller.ts:58\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectCategoriesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateCategoryDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/categories/categories.controller.ts:71\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport {\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { UserEntity } from '../users/entities';\nimport { JwtAuthGuard } from '../auth/guards';\n\nimport { CreateCategoryDto, UpdateCategoryDto, SelectCategoriesDto } from './dto';\nimport { CategoriesService } from './categories.service';\nimport { CategoryEntity } from './entities';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@ApiTags('categories')\n@Controller('categories')\n@UseGuards(JwtAuthGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CategoriesController {\n  /**\n   * [description]\n   * @param categoriesService\n   */\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post()\n  public async createOne(\n    @Body() data: CreateCategoryDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.categoriesService.createOne({ ...data, owner });\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  public async selectAll(\n    @Query() options: SelectCategoriesDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.categoriesService.selectAll(options, owner);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  @Patch(':id')\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateCategoryDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.categoriesService.updateOne({ ...conditions, owner: { id: owner.id } }, data);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  public async deleteOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.categoriesService.deleteOne({ ...conditions, owner: { id: owner.id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService \n\nCategoriesService \n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/categories/categories.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { CategoriesController } from './categories.controller';\nimport { CategoriesService } from './categories.service';\nimport { CategoryEntity } from './entities';\n\n/**\n * [description]\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([CategoryEntity])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n  exports: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/categories.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                categoryEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/categories/categories.service.ts:23\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/categories/categories.service.ts:38\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/categories/categories.service.ts:139\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/categories/categories.service.ts:56\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions, owner?: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/categories/categories.service.ts:82\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                                \n                                    owner\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/categories/categories.service.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/categories/categories.service.ts:118\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        categoryEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(CategoryEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/categories.service.ts:30\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  Repository,\n  SaveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { CategoryEntity } from './entities';\nimport { UserEntity } from '../users/entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class CategoriesService {\n  /**\n   * [description]\n   * @param categoryEntityRepository\n   */\n  constructor(\n    @InjectRepository(CategoryEntity)\n    public readonly categoryEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.categoryEntityRepository.manager.transaction(async () => {\n      const entity = this.categoryEntityRepository.create(entityLike);\n      const { id } = await this.categoryEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.CATEGORY_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.categoryEntityRepository.metadata;\n    const qb = this.categoryEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    /**\n     * Place for common relation\n     * @example\n     */\n    /* if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      qb.leftJoinAndSelect('Entity.relation_field', 'Entity_relation_field')\n    } */\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n    owner?: Partial,\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    if (options.where) qb.where(options.where);\n    if (owner) qb.andWhere({ owner });\n\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.CATEGORIES_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(instanceToPlain(options))\n      .where(conditions)\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.CATEGORY_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.categoryEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.categoryEntityRepository.merge(mergeIntoEntity, entityLike);\n      const { id } = await this.categoryEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.CATEGORY_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(conditions: FindOptionsWhere): Promise {\n    return this.categoryEntityRepository.manager.transaction(async (transactionalEntityManager) => {\n      const entity = await this.selectOne(conditions);\n      await transactionalEntityManager\n        .delete(CategoryEntity, conditions)\n        .then(({ affected }) => {\n          if (!affected) throw new NotFoundException(ErrorTypeEnum.CATEGORY_NOT_FOUND);\n        })\n        .catch(() => {\n          throw new NotFoundException(ErrorTypeEnum.CATEGORY_NOT_FOUND);\n        });\n      return entity;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CategoryEntity.html":{"url":"entities/CategoryEntity.html","title":"entity - CategoryEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CategoryEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/entities/category.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                color\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 32, nullable: true})@Column({type: 'varchar', length: 32, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/entities/category.entity.ts:50\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/entities/category.entity.ts:72\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/entities/category.entity.ts:29\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 64, nullable: false})@Column({type: 'varchar', length: 64, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/entities/category.entity.ts:43\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/entities/category.entity.ts:61\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: CategoryTypeEnum, nullable: false})@Column({type: 'enum', enum: CategoryTypeEnum, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/entities/category.entity.ts:36\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/entities/category.entity.ts:83\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nexport enum CategoryTypeEnum {\n  EXPENSE = 'EXPENSE',\n  INCOME = 'INCOME',\n}\n\n/**\n * [description]\n */\n@Entity('categories')\nexport class CategoryEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: CategoryTypeEnum, nullable: false })\n  @Column({ type: 'enum', enum: CategoryTypeEnum, nullable: false })\n  public readonly type: CategoryTypeEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 64, nullable: false })\n  @Column({ type: 'varchar', length: 64, nullable: false })\n  public readonly name: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 32, nullable: true })\n  @Column({ type: 'varchar', length: 32, nullable: true })\n  public readonly color: string;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn()\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_providers\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nConfigService\n\nConfigService\n\nConfigModule -->\n\nConfigService->ConfigModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from '@nestjs/common';\n\nimport { ConfigService } from './config.service';\n\n/**\n * [description]\n */\n@Global()\n@Module({\n  providers: [ConfigService],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getDest\n                            \n                            \n                                    Public\n                                getMode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:11\n                            \n                        \n\n                \n                    \n                            Configuration service constructor\nDotEnv config\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Method for getting the value of a variable in the environment\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key in the environment variable object must be a string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        Returns the generated type limited the function types JSON.parse()\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getDest\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDest(key: string, filename?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:27\n                \n            \n\n\n            \n                \n                    Method to get the path to a directory or file in this directory based on an environment variable\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key in the environment variable object must be a string\n\n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The file name for a specific directory must be string, is optional\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Returns the absolute path to a file or directory as a string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMode(mode: ConfigMode)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:37\n                \n            \n\n\n            \n                \n                    Method for checking application operating modes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mode\n                                    \n                                                ConfigMode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The mode to be checked must be enum modes in ConfigMode\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns the boolean value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { config } from 'dotenv';\nimport { join } from 'path';\n\nimport { ConfigMode } from './interfaces/config.interface';\n\n/**\n * Configuration service\n */\n@Injectable()\nexport class ConfigService {\n  /**\n   * Configuration service constructor\n   * DotEnv config\n   */\n  constructor() {\n    const { error } = config({ path: `env/.env.${process.env.NODE_ENV}` });\n    if (error) throw error;\n  }\n\n  /**\n   * Method to get the path to a directory or file in this directory based on an environment variable\n   * @param  key      The key in the environment variable object must be a string\n   * @param  filename The file name for a specific directory must be string, is optional\n   * @return          Returns the absolute path to a file or directory as a string\n   */\n  public getDest(key: string, filename?: string): string {\n    filename = process.env[filename] || filename || '/';\n    return join(process.cwd(), this.get(key), filename);\n  }\n\n  /**\n   * Method for checking application operating modes\n   * @param  mode The mode to be checked must be enum modes in ConfigMode\n   * @return     Returns the boolean value\n   */\n  public getMode(mode: ConfigMode): boolean {\n    return process.env['NODE_ENV'] === mode;\n  }\n\n  /**\n   * Method for getting the value of a variable in the environment\n   * @param  key The key in the environment variable object must be a string\n   * @return     Returns the generated type limited the function types JSON.parse()\n   */\n  public get(key: string): T {\n    const variable = process.env[key];\n    if (!variable) throw TypeError(`The ${key} cannot be undefined`);\n    try {\n      return JSON.parse(variable);\n    } catch {\n      return (variable);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmationEmailDto.html":{"url":"classes/ConfirmationEmailDto.html","title":"class - ConfirmationEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmationEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/confirmation-email.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Length(6)@IsString()@ApiProperty({example: '123456', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/confirmation-email.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ConfirmationEmailDto extends PickType(CreateUserDto, ['email']) {\n  /**\n   * [description]\n   */\n  @Length(6)\n  @IsString()\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/accounts/dto/create-account.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                balance\n                            \n                            \n                                    Public\n                                    Readonly\n                                currencyCode\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({example: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/dto/create-account.dto.ts:23\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currencyCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(CurrencyEnum)@ApiProperty({enum: CurrencyEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/dto/create-account.dto.ts:30\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(1)@MaxLength(64)@ApiProperty({example: 'Account'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/accounts/dto/create-account.dto.ts:16\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsNumber, MaxLength, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { CurrencyEnum } from 'src/common/enums';\n\n/**\n * [description]\n */\nexport class CreateAccountDto {\n  /**\n   * [description]\n   */\n  @MinLength(1)\n  @MaxLength(64)\n  @ApiProperty({ example: 'Account' })\n  public readonly name: string;\n\n  /**\n   * [description]\n   */\n  @IsNumber()\n  @ApiProperty({ example: 0 })\n  public readonly balance: number;\n\n  /**\n   * [description]\n   */\n  @IsEnum(CurrencyEnum)\n  @ApiProperty({ enum: CurrencyEnum })\n  public readonly currencyCode: CurrencyEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/dto/create-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                color\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@MinLength(1)@MaxLength(32)@ApiPropertyOptional({example: 'color'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/dto/create-category.dto.ts:31\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(1)@MaxLength(64)@ApiProperty({example: 'Category'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/dto/create-category.dto.ts:22\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CategoryTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(CategoryTypeEnum)@ApiProperty({enum: CategoryTypeEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/categories/dto/create-category.dto.ts:14\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, MaxLength, MinLength } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { CategoryTypeEnum } from '../entities';\n\n/**\n * [description]\n */\nexport class CreateCategoryDto {\n  /**\n   * [description]\n   */\n  @IsEnum(CategoryTypeEnum)\n  @ApiProperty({ enum: CategoryTypeEnum })\n  public readonly type: CategoryTypeEnum;\n\n  /**\n   * [description]\n   */\n  @MinLength(1)\n  @MaxLength(64)\n  @ApiProperty({ example: 'Category' })\n  public readonly name: string;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @MinLength(1)\n  @MaxLength(32)\n  @ApiPropertyOptional({ example: 'color' })\n  public readonly color?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateMockFileReturn.html":{"url":"interfaces/CreateMockFileReturn.html","title":"interface - CreateMockFileReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateMockFileReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/utils/mock-file.util.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            buffer\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            file\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            filePath\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        buffer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        buffer:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     stream.Readable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     stream.Readable\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as crypto from 'crypto';\nimport * as stream from 'stream';\nimport * as fs from 'fs';\n\nimport { ConfigService } from 'src/config';\n\nconst configService = new ConfigService();\n\nexport interface CreateMockFileReturn {\n  filename: string;\n  encoding: string;\n  mimetype: string;\n  filePath: string;\n  buffer: Buffer;\n  file?: stream.Readable;\n}\n\nexport function createMockFileMeta(data?: Partial): CreateMockFileReturn {\n  const filename = crypto.randomBytes(8).toString('hex') + '.png';\n  const filePath = configService.getDest('STORE_DEST', filename);\n  const encoding = '7bit';\n  const mimetype = 'image/png';\n  const buffer = crypto.randomBytes(64);\n  const file = stream.Readable.from(buffer.toString());\n  return Object.assign({ filename, encoding, mimetype, filePath, file, buffer }, data);\n}\n\nexport function createMockFile(data?: Partial): CreateMockFileReturn {\n  const { filename, encoding, mimetype, filePath, buffer } = createMockFileMeta();\n  fs.writeFileSync(filePath, buffer);\n  expect(fs.existsSync(filePath)).toEqual(true);\n  return Object.assign({ filename, encoding, mimetype, filePath, buffer }, data);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/create-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CreateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class CreateProfileDto extends PickType(CreateUserDto, ['password', 'email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTransactionDto.html":{"url":"classes/CreateTransactionDto.html","title":"class - CreateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/create-transaction.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                account\n                            \n                            \n                                    Public\n                                    Readonly\n                                amount\n                            \n                            \n                                    Public\n                                    Readonly\n                                category\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                currencyCode\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                date\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                description\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@ApiProperty({type: ID, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/create-transaction.dto.ts:71\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPositive()@IsNumber({maxDecimalPlaces: 2})@ApiProperty({example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/create-transaction.dto.ts:32\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ID\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@ApiProperty({type: ID, example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/create-transaction.dto.ts:63\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        currencyCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(CurrencyEnum)@ApiPropertyOptional({enum: CurrencyEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/create-transaction.dto.ts:40\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()@ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/create-transaction.dto.ts:48\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiPropertyOptional({example: 'Description'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/create-transaction.dto.ts:55\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TransactionTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(CreateTransactionType)@ApiProperty({enum: CreateTransactionType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/create-transaction.dto.ts:24\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEnum, IsNumber, IsOptional, IsPositive, ValidateNested } from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nimport { ID } from 'src/common/dto';\nimport { CurrencyEnum } from 'src/common/enums';\n\nimport { TransactionTypeEnum } from '../entities';\n\nenum CreateTransactionType {\n  EXPENSE = TransactionTypeEnum.EXPENSE,\n  INCOME = TransactionTypeEnum.INCOME,\n}\n\n/**\n * [description]\n */\nexport class CreateTransactionDto {\n  /**\n   * [description]\n   */\n  @IsEnum(CreateTransactionType)\n  @ApiProperty({ enum: CreateTransactionType })\n  public readonly type: TransactionTypeEnum;\n\n  /**\n   * [description]\n   */\n  @IsPositive()\n  @IsNumber({ maxDecimalPlaces: 2 })\n  @ApiProperty({ example: 1 })\n  public readonly amount: number;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @IsEnum(CurrencyEnum)\n  @ApiPropertyOptional({ enum: CurrencyEnum })\n  public readonly currencyCode?: CurrencyEnum;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @IsDate()\n  @ApiProperty({ example: new Date() })\n  public readonly date?: Date;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @ApiPropertyOptional({ example: 'Description' })\n  public readonly description?: string;\n\n  /**\n   * [description]\n   */\n  @ValidateNested()\n  @Type(() => ID)\n  @ApiProperty({ type: ID, example: { id: 'd2727cf0-8631-48ea-98fd-29d7404b1bca' } })\n  public readonly category: ID;\n\n  /**\n   * [description]\n   */\n  @ValidateNested()\n  @Type(() => ID)\n  @ApiProperty({ type: ID, example: { id: 'd2727cf0-8631-48ea-98fd-29d7404b1bca' } })\n  public readonly account: ID;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                baseCurrency\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        baseCurrency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(CurrencyEnum)@ApiProperty({enum: CurrencyEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'admin@gmail.com', maxLength: 320})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@MaxLength(64)@ApiProperty({minLength: 8, maxLength: 64, example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dto/create-user.dto.ts:23\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsEnum, IsOptional, MaxLength, MinLength } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nimport { CurrencyEnum } from 'src/common/enums';\n\n/**\n * [description]\n */\nexport class CreateUserDto {\n  /**\n   * [description]\n   */\n  @IsEmail()\n  @ApiProperty({ example: 'admin@gmail.com', maxLength: 320 })\n  public readonly email: string;\n\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly password: string;\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @IsEnum(CurrencyEnum)\n  @ApiProperty({ enum: CurrencyEnum })\n  public readonly baseCurrency: CurrencyEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialsDto.html":{"url":"classes/CredentialsDto.html","title":"class - CredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/credentials.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class CredentialsDto extends PickType(CreateUserDto, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CurrencyBaseParamDto.html":{"url":"classes/CurrencyBaseParamDto.html","title":"class - CurrencyBaseParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrencyBaseParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exchangerate/dto/params-currency.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                base\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        base\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsEnum(CurrencyEnum)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exchangerate/dto/params-currency.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum } from 'class-validator';\nimport { CurrencyEnum } from 'src/common/enums';\n\nexport class CurrencyBaseParamDto {\n  @ApiProperty()\n  @IsEnum(CurrencyEnum)\n  public readonly base: CurrencyEnum;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CurrencyRateDto.html":{"url":"classes/CurrencyRateDto.html","title":"class - CurrencyRateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrencyRateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exchangerate/dto/currency.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                base\n                            \n                            \n                                rates\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        base\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exchangerate/dto/currency.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/exchangerate/dto/currency.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { CurrencyEnum } from 'src/common/enums';\n\nexport class CurrencyRateDto {\n  @ApiProperty()\n  base: CurrencyEnum;\n\n  @ApiProperty()\n  rates: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\nimport { dirname } from 'path';\n\nimport { ConfigService } from 'src/config';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useFactory: (configService: ConfigService) => {\n        const ssl = Object.assign(\n          {},\n          configService.get('TYPEORM_SSL') && {\n            ssl: {\n              rejectUnauthorized: false,\n            },\n          },\n        );\n\n        return {\n          name: configService.get('TYPEORM_NAME'),\n          type: configService.get('TYPEORM_TYPE'),\n          host: configService.get('TYPEORM_HOST'),\n          port: configService.get('TYPEORM_PORT'),\n          database: configService.get('TYPEORM_DATABASE'),\n          username: configService.get('TYPEORM_USERNAME'),\n          password: configService.get('TYPEORM_PASSWORD'),\n          cache: configService.get('TYPEORM_CACHE'),\n          logging: configService.get('TYPEORM_LOGGING'),\n          dropSchema: configService.get('TYPEORM_DROP_SCHEMA'),\n          synchronize: configService.get('TYPEORM_SYNCHRONIZE'),\n          migrationsRun: configService.get('TYPEORM_MIGRATIONS_RUN'),\n          entities: [dirname(__dirname) + '/modules/**/*.entity.{ts,js}'],\n          migrations: [__dirname + '/migrations/*.{ts,js}'],\n          ...ssl,\n        };\n      },\n      inject: [ConfigService],\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExchangeRateModule.html":{"url":"modules/ExchangeRateModule.html","title":"module - ExchangeRateModule","body":"\n                   \n\n\n\n\n    Modules\n    ExchangeRateModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ExchangeRateModule\n\n\n\ncluster_ExchangeRateModule_exports\n\n\n\ncluster_ExchangeRateModule_providers\n\n\n\n\nExchangeRateService \n\nExchangeRateService \n\n\n\nExchangeRateModule\n\nExchangeRateModule\n\nExchangeRateService  -->\n\nExchangeRateModule->ExchangeRateService \n\n\n\n\n\nExchangeRateService\n\nExchangeRateService\n\nExchangeRateModule -->\n\nExchangeRateService->ExchangeRateModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/exchangerate/exchangerate.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExchangeRateService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExchangerateController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExchangeRateService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bull';\nimport Axios from 'axios';\n\nimport { ConfigService } from 'src/config';\n\nimport {\n  AXIOS_INSTANCE_TOKEN,\n  CACHE_EXCHANGERATE_PREFIX,\n  EXCHANGERATE_PROCESSOR,\n  EXCHANGERATE_QUEUE,\n} from './constants';\nimport { ExchangerateController } from './exchangerate.controller';\nimport { ExchangeRateProcessor } from './exchangerate.processor';\nimport { ExchangeRateService } from './exchangerate.service';\n\nexport const ExchangeRateQueueModule = BullModule.registerQueue({\n  defaultJobOptions: {\n    removeOnComplete: true,\n    removeOnFail: true,\n  },\n  name: EXCHANGERATE_QUEUE,\n});\n\nconst configService = new ConfigService();\nclass MockExchangeRateProcessor {}\n\n@Module({\n  imports: [\n    ExchangeRateQueueModule,\n    CacheModule.registerAsync({\n      useFactory: async (configService: ConfigService) =>\n        Object.assign(\n          {\n            store: redisStore,\n            prefix: CACHE_EXCHANGERATE_PREFIX,\n            ttl: configService.get('CACHE_EXCHANGERATE_TTL'),\n            host: configService.get('REDIS_HOST'),\n            port: configService.get('REDIS_PORT'),\n          },\n          configService.get('REDIS_HAS_PASSWORD') && {\n            auth_pass: configService.get('REDIS_PASSWORD'),\n          },\n          configService.get('REDIS_TLS') && {\n            tls: {\n              rejectUnauthorized: false,\n            },\n          },\n        ),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [ExchangerateController],\n  providers: [\n    ExchangeRateService,\n    {\n      provide: AXIOS_INSTANCE_TOKEN,\n      useValue: Axios,\n    },\n    {\n      provide: EXCHANGERATE_PROCESSOR,\n      useClass:\n        configService.get('IS_HEROKU_WORKER') === true\n          ? ExchangeRateProcessor\n          : MockExchangeRateProcessor,\n    },\n  ],\n  exports: [ExchangeRateService],\n})\nexport class ExchangeRateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExchangeRateProcessor.html":{"url":"classes/ExchangeRateProcessor.html","title":"class - ExchangeRateProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExchangeRateProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exchangerate/exchangerate.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                onQueueCompleted\n                            \n                            \n                                    Public\n                                onQueueFailed\n                            \n                            \n                                    Public\n                                    Async\n                                updateCurrencyRates\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(exchangeRateService: ExchangeRateService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exchangerate/exchangerate.processor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exchangeRateService\n                                                  \n                                                        \n                                                                        ExchangeRateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ExchangeRateProcessor.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/exchangerate/exchangerate.processor.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onQueueCompleted\n                        \n                    \n                \n            \n            \n                \n                    \n                    onQueueCompleted(job: Job, result: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnQueueCompleted()\n                \n            \n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.processor.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    result\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        onQueueFailed\n                        \n                    \n                \n            \n            \n                \n                    \n                    onQueueFailed(job: Job, err: Error)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnQueueFailed()\n                \n            \n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.processor.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateCurrencyRates\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCurrencyRates()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process(ExchangeRateProcessorEnum.UPDATE_CURRENCY_RATES)\n                \n            \n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.processor.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Processor, Process, OnQueueFailed, OnQueueCompleted } from '@nestjs/bull';\nimport { Logger } from '@nestjs/common';\nimport { Job } from 'bull';\n\nimport { ExchangeRateService } from './exchangerate.service';\nimport { ExchangeRateProcessorEnum } from './enums';\nimport { EXCHANGERATE_QUEUE } from './constants';\n\n@Processor(EXCHANGERATE_QUEUE)\nexport class ExchangeRateProcessor {\n  private readonly logger = new Logger(ExchangeRateProcessor.name);\n\n  constructor(private readonly exchangeRateService: ExchangeRateService) {}\n\n  @OnQueueCompleted()\n  public onQueueCompleted(job: Job, result: any): void {\n    this.logger.verbose('OnQueueCompleted', job.id, result);\n  }\n\n  @OnQueueFailed()\n  public onQueueFailed(job: Job, err: Error): void {\n    this.logger.error('OnQueueFailed', job.id, err);\n  }\n\n  @Process(ExchangeRateProcessorEnum.UPDATE_CURRENCY_RATES)\n  public async updateCurrencyRates(): Promise {\n    return this.exchangeRateService.selectFromApiAndSaveToCache();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExchangeRateService.html":{"url":"injectables/ExchangeRateService.html","title":"injectable - ExchangeRateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExchangeRateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exchangerate/exchangerate.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                configService\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                moduleInit\n                            \n                            \n                                    Public\n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Public\n                                    Async\n                                saveAllToCache\n                            \n                            \n                                    Public\n                                    Async\n                                selectAllFromApi\n                            \n                            \n                                    Public\n                                    Async\n                                selectAllFromCache\n                            \n                            \n                                    Public\n                                    Async\n                                selectAllFromCacheAsRecord\n                            \n                            \n                                    Public\n                                    Async\n                                selectFromApiAndSaveToCache\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneConvert\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneFromCache\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cacheManager: Cache, instance: AxiosInstance, exchangerateProcessor: Queue, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/exchangerate/exchangerate.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cacheManager\n                                                  \n                                                        \n                                                                    Cache\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        instance\n                                                  \n                                                        \n                                                                    AxiosInstance\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exchangerateProcessor\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        moduleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    moduleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        saveAllToCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveAllToCache(currencies: CurrencyRateApi[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    currencies\n                                    \n                                                CurrencyRateApi[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAllFromApi\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllFromApi()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAllFromCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllFromCache()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAllFromCacheAsRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllFromCacheAsRecord()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectFromApiAndSaveToCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectFromApiAndSaveToCache()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneConvert\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneConvert(undefined: CurrencyRateConvert)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CurrencyRateConvert\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneFromCache\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneFromCache(base: CurrencyEnum)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                CurrencyEnum\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ConfigService\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/exchangerate/exchangerate.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ExchangeRateService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/exchangerate/exchangerate.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import Axios, { AxiosInstance } from 'axios';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Cache } from 'cache-manager';\nimport { Queue } from 'bull';\nimport {\n  BadGatewayException,\n  CACHE_MANAGER,\n  OnModuleInit,\n  Injectable,\n  Inject,\n  Logger,\n} from '@nestjs/common';\n\nimport { CurrencyEnum, ErrorTypeEnum } from 'src/common/enums';\n\nimport {\n  CurrencyRateApi,\n  CurrencyRateCache,\n  CurrencyRateConvert,\n  CurrencyRateCacheRecord,\n} from './types';\nimport { AXIOS_INSTANCE_TOKEN, EXCHANGERATE_QUEUE, EVERY_6TH_HOUR } from './constants';\nimport { ExchangeRateProcessorEnum } from './enums';\nimport { ConfigService } from 'src/config';\n\n@Injectable()\nexport class ExchangeRateService implements OnModuleInit {\n  private readonly logger = new Logger(ExchangeRateService.name);\n\n  constructor(\n    @Inject(CACHE_MANAGER)\n    private readonly cacheManager: Cache,\n    @Inject(AXIOS_INSTANCE_TOKEN)\n    private readonly instance: AxiosInstance = Axios,\n    @InjectQueue(EXCHANGERATE_QUEUE)\n    private readonly exchangerateProcessor: Queue,\n    public readonly configService: ConfigService,\n  ) {}\n\n  public async onModuleInit(): Promise {\n    await this.moduleInit().catch((error) => this.logger.error(error));\n  }\n\n  public async selectFromApiAndSaveToCache(): Promise {\n    const rates = await this.selectAllFromApi();\n    await this.saveAllToCache(rates);\n  }\n\n  public async selectAllFromCache(): Promise {\n    const result: string[] = await this.cacheManager.store.mget(Object.values(CurrencyEnum));\n    return result.map((data) => JSON.parse(data));\n  }\n\n  public async selectAllFromCacheAsRecord(): Promise {\n    const result: string[] = await this.cacheManager.store.mget(Object.values(CurrencyEnum));\n    return result\n      .map((data) => JSON.parse(data))\n      .reduce(\n        (acc, current) => ((acc[current.base] = current.rates), acc),\n        {},\n      );\n  }\n\n  public async selectOneFromCache(base: CurrencyEnum): Promise {\n    const result: string = await this.cacheManager.store.get(base).catch(() => {\n      throw new BadGatewayException(ErrorTypeEnum.EXCHANGERATE_NOT_FOUND_FROM_CACHE);\n    });\n    return JSON.parse(result);\n  }\n\n  public async selectOneConvert({ base, currency, amount }: CurrencyRateConvert): Promise {\n    const { rates } = await this.selectOneFromCache(base);\n    return rates[currency] * amount;\n  }\n\n  public async selectAllFromApi(): Promise {\n    const currencies = Object.values(CurrencyEnum);\n    const promises = currencies.map((base) => {\n      return this.instance.get('https://api.exchangerate.host/latest', {\n        params: { symbols: currencies.join(','), base },\n      });\n    });\n\n    const response = await Promise.all(promises).catch(() => {\n      throw new BadGatewayException(ErrorTypeEnum.EXCHANGERATE_NOT_FOUND_FROM_API);\n    });\n\n    return response.map((value) => value.data);\n  }\n\n  public async saveAllToCache(currencies: CurrencyRateApi[]): Promise {\n    const set = currencies.reduce(\n      (acc, current) => (\n        acc.push(current.base, JSON.stringify({ base: current.base, rates: current.rates })), acc\n      ),\n      [],\n    );\n    await this.cacheManager.store.mset(...set);\n  }\n\n  public async moduleInit(): Promise {\n    await this.exchangerateProcessor.removeRepeatable(\n      ExchangeRateProcessorEnum.UPDATE_CURRENCY_RATES,\n      {\n        cron: EVERY_6TH_HOUR,\n        jobId: ExchangeRateProcessorEnum.UPDATE_CURRENCY_RATES,\n      },\n    );\n    await this.exchangerateProcessor.add(\n      ExchangeRateProcessorEnum.UPDATE_CURRENCY_RATES,\n      {},\n      {\n        repeat: {\n          cron: EVERY_6TH_HOUR,\n        },\n        jobId: ExchangeRateProcessorEnum.UPDATE_CURRENCY_RATES,\n      },\n    );\n\n    const currencies = await this.selectAllFromCache();\n    const isEmpty = currencies.some((value) => !value);\n    if (isEmpty) await this.selectFromApiAndSaveToCache();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ExchangerateController.html":{"url":"controllers/ExchangerateController.html","title":"controller - ExchangerateController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ExchangerateController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exchangerate/exchangerate.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                exchangerate\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectAllAsRecord\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAllAsRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAllAsRecord()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('record')\n                \n            \n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: CurrencyBaseParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':base')\n                \n            \n\n            \n                \n                    Defined in src/modules/exchangerate/exchangerate.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                CurrencyBaseParamDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Get, Param, Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { ExchangeRateService } from './exchangerate.service';\nimport { CurrencyBaseParamDto, CurrencyRateDto } from './dto';\nimport { CurrencyRateCacheRecord } from './types';\n\n@ApiTags('exchangerate')\n@Controller('exchangerate')\nexport class ExchangerateController {\n  constructor(private readonly exchangeRateService: ExchangeRateService) {}\n\n  @Get()\n  public async selectAll(): Promise {\n    return this.exchangeRateService.selectAllFromCache();\n  }\n\n  @Get('record')\n  public async selectAllAsRecord(): Promise {\n    return this.exchangeRateService.selectAllFromCacheAsRecord();\n  }\n\n  @Get(':base')\n  public async selectOne(@Param() conditions: CurrencyBaseParamDto): Promise {\n    return this.exchangeRateService.selectOneFromCache(conditions.base);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindManyOptionsDto.html":{"url":"classes/FindManyOptionsDto.html","title":"class - FindManyOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindManyOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/find-many-options/find-many-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n            \n                Implements\n            \n            \n                        FindManyOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    order\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:28\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-many-options/find-many-options.dto.ts:43\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:23\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        order\n                    \n                \n\n                \n                    \n                        getorder()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-many-options/find-many-options.dto.ts:49\n                                \n                            \n                    \n                        \n                                Getter to form an object of order. Available after calling instanceToPlain\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsArray, IsString, IsNotEmpty, IsOptional } from 'class-validator';\nimport { Expose, Transform } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { FindManyOptions } from 'typeorm';\n\nimport { FindOneOptionsDto } from '../find-one-options';\nimport { dotNotation } from 'src/common/helpers';\n\n/**\n * [description]\n */\nexport class FindManyOptionsDto\n  extends FindOneOptionsDto\n  implements FindManyOptions\n{\n  /**\n   * Order, in which entities should be ordered\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    description: `Order, in which entities should be ordered. For order by relation field use elation.field`,\n  })\n  public readonly asc?: string[];\n\n  /**\n   * If the same fields are specified for sorting in two directions, the priority is given to DESC\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    description:\n      'If the same fields are specified for sorting in two directions, the priority is given to DESC',\n  })\n  public readonly desc?: string[];\n\n  /**\n   * Getter to form an object of order. Available after calling instanceToPlain\n   */\n  @Expose({ toPlainOnly: true })\n  public get order(): FindManyOptions['order'] {\n    return Object.assign(\n      {},\n      dotNotation(this.asc || [], 'ASC'),\n      dotNotation(this.desc || [], 'DESC'),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneOptionsDto.html":{"url":"classes/FindOneOptionsDto.html","title":"class - FindOneOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/find-one-options/find-one-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        FindOneOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    select\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/find-one-options/find-one-options.dto.ts:23\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        select\n                    \n                \n\n                \n                    \n                        getselect()\n                    \n                \n                            \n                                \n                                    Defined in src/common/dto/find-one-options/find-one-options.dto.ts:29\n                                \n                            \n                    \n                        \n                                Expose field select, specifies what columns should be retrieved\n\n\n                                \n                                    Returns :     FindOptionsSelect\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { IsArray, IsString, IsNotEmpty, IsOptional } from 'class-validator';\nimport { FindOneOptions, FindOptionsSelect } from 'typeorm';\nimport { Expose, Transform } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class FindOneOptionsDto implements FindOneOptions {\n  /**\n   * Specifies what columns should be retrieved\n   */\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @IsNotEmpty({ each: true })\n  @Transform(({ value }) => [].concat(value))\n  @ApiProperty({\n    type: [String],\n    example: [],\n    description: 'Specifies what columns should be retrieved',\n  })\n  public readonly selection?: [keyof Entity];\n\n  /**\n   * Expose field `select`, specifies what columns should be retrieved\n   */\n  @Expose({ toPlainOnly: true })\n  public get select(): FindOptionsSelect {\n    return Object.assign({}, ...(this.selection?.map((key) => ({ [key]: true })) || []));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/filters/http-exception.filter.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/common/filters/http-exception.filter.ts:12\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     FastifyReply\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';\nimport { FastifyReply } from 'fastify';\n\n/**\n * [description]\n */\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  /**\n   * [description]\n   */\n  catch(exception: HttpException, host: ArgumentsHost): FastifyReply {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const statusCode = exception.getStatus();\n    const { message, error } = exception.getResponse() as Record;\n    return response.status(statusCode).send({ error, statusCode, message: [].concat(message) });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ID.html":{"url":"classes/ID.html","title":"class - ID","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ID\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id/id.dto.ts:13\n                        \n                    \n\n            \n                \n                    Entity ID\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsUUID } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ID {\n  /**\n   * Entity ID\n   */\n  @IsUUID()\n  @ApiProperty()\n  public readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtAccessTokenPayloadDto.html":{"url":"classes/JwtAccessTokenPayloadDto.html","title":"class - JwtAccessTokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtAccessTokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:32\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:37\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt.guard.ts:12\n                            \n                        \n\n                \n                    \n                            [description]\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(err: Error, user: UserEntity, info: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt.guard.ts:28\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity | any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from '../../users/entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * [description]\n   * @param reflector\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * [description]\n   * @param err\n   * @param user\n   * @param info\n   * @param ctx\n   */\n  public handleRequest(err: Error, user: UserEntity, info: Error): UserEntity | any {\n    if (info) throw new UnauthorizedException(ErrorTypeEnum.AUTH_INVALID_TOKEN);\n    if (!user) throw new UnauthorizedException(ErrorTypeEnum.AUTH_UNAUTHORIZED);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt-refresh.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/jwt-refresh.guard.ts:12\n                            \n                        \n\n                \n                    \n                            [description]\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(_err: Error, user: UserEntity, info: Error)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt-refresh.guard.ts:27\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _err\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n                                    \n                                            Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserEntity | any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {\n  /**\n   * [description]\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * [description]\n   * @param _err\n   * @param user\n   * @param info\n   * @param ctx\n   */\n  public handleRequest(_err: Error, user: UserEntity, info: Error): UserEntity | any {\n    if (info) throw new UnauthorizedException(ErrorTypeEnum.AUTH_INVALID_REFRESH_TOKEN);\n    if (!user) throw new UnauthorizedException(ErrorTypeEnum.AUTH_UNAUTHORIZED);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtRefreshTokenDto.html":{"url":"classes/JwtRefreshTokenDto.html","title":"class - JwtRefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtRefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtRefreshTokenPayloadDto.html":{"url":"classes/JwtRefreshTokenPayloadDto.html","title":"class - JwtRefreshTokenPayloadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtRefreshTokenPayloadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        JwtAccessTokenPayloadDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ppid\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokenId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ppid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:47\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         JwtAccessTokenPayloadDto\n\n                            \n                        \n                    \n                        \n                                Defined in         JwtAccessTokenPayloadDto:32\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokenId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         JwtAccessTokenPayloadDto\n\n                            \n                        \n                    \n                        \n                                Defined in         JwtAccessTokenPayloadDto:37\n\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt-refresh.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt-refresh.strategy.ts:18\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtRefreshTokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt-refresh.strategy.ts:38\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtRefreshTokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { compare } from 'bcrypt';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\nimport { ConfigService } from 'src/config';\n\nimport { UserEntity } from '../../users/entities';\n\nimport { JwtRefreshTokenPayloadDto } from '../dto';\nimport { AuthService } from '../auth.service';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(Strategy, 'jwt-refresh-token') {\n  /**\n   * [description]\n   * @param configService\n   * @param authService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      secretOrKey: configService.get('JWT_SECRET_REFRESH_TOKEN'),\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   */\n  public async validate({\n    id,\n    ppid,\n    refreshTokenId,\n  }: JwtRefreshTokenPayloadDto): Promise {\n    const user = await this.authService.validateUser({ id, refreshTokens: { id: refreshTokenId } });\n    const [refreshToken] = user.refreshTokens;\n    if (!(await compare(ppid, refreshToken.ppid)))\n      throw new BadRequestException(ErrorTypeEnum.AUTH_INCORRECT_CREDENTIALS);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(undefined: JwtAccessTokenPayloadDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt.strategy.ts:36\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtAccessTokenPayloadDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\nimport { ConfigService } from 'src/config';\n\nimport { UserEntity } from '../../users/entities';\n\nimport { JwtAccessTokenPayloadDto } from '../dto';\nimport { AuthService } from '../auth.service';\n\n/**\n * [description]\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * [description]\n   * @param configService\n   * @param authService\n   */\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly authService: AuthService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('JWT_SECRET_ACCESS_TOKEN'),\n    });\n  }\n\n  /**\n   * [description]\n   * @param id\n   */\n  public async validate({ id, refreshTokenId }: JwtAccessTokenPayloadDto): Promise {\n    return this.authService.validateUser({ id, refreshTokens: { id: refreshTokenId } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtTokensDto.html":{"url":"classes/JwtTokensDto.html","title":"class - JwtTokensDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtTokensDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/jwt-tokens.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                refreshToken\n                            \n                            \n                                    Public\n                                    Readonly\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:17\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/jwt-tokens.dto.ts:11\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\n\n/**\n * [description]\n */\nexport class JwtTokensDto {\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly token: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly refreshToken: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenDto extends PickType(JwtTokensDto, ['refreshToken']) {}\n\n/**\n * [description]\n */\nexport class JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  public readonly refreshTokenId: string;\n}\n\n/**\n * [description]\n */\nexport class JwtRefreshTokenPayloadDto extends JwtAccessTokenPayloadDto {\n  /**\n   * [description]\n   */\n  public readonly ppid: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockExchangeRateProcessor.html":{"url":"classes/MockExchangeRateProcessor.html","title":"class - MockExchangeRateProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockExchangeRateProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/exchangerate/exchangerate.module.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import * as redisStore from 'cache-manager-redis-store';\nimport { CacheModule, Module } from '@nestjs/common';\nimport { BullModule } from '@nestjs/bull';\nimport Axios from 'axios';\n\nimport { ConfigService } from 'src/config';\n\nimport {\n  AXIOS_INSTANCE_TOKEN,\n  CACHE_EXCHANGERATE_PREFIX,\n  EXCHANGERATE_PROCESSOR,\n  EXCHANGERATE_QUEUE,\n} from './constants';\nimport { ExchangerateController } from './exchangerate.controller';\nimport { ExchangeRateProcessor } from './exchangerate.processor';\nimport { ExchangeRateService } from './exchangerate.service';\n\nexport const ExchangeRateQueueModule = BullModule.registerQueue({\n  defaultJobOptions: {\n    removeOnComplete: true,\n    removeOnFail: true,\n  },\n  name: EXCHANGERATE_QUEUE,\n});\n\nconst configService = new ConfigService();\nclass MockExchangeRateProcessor {}\n\n@Module({\n  imports: [\n    ExchangeRateQueueModule,\n    CacheModule.registerAsync({\n      useFactory: async (configService: ConfigService) =>\n        Object.assign(\n          {\n            store: redisStore,\n            prefix: CACHE_EXCHANGERATE_PREFIX,\n            ttl: configService.get('CACHE_EXCHANGERATE_TTL'),\n            host: configService.get('REDIS_HOST'),\n            port: configService.get('REDIS_PORT'),\n          },\n          configService.get('REDIS_HAS_PASSWORD') && {\n            auth_pass: configService.get('REDIS_PASSWORD'),\n          },\n          configService.get('REDIS_TLS') && {\n            tls: {\n              rejectUnauthorized: false,\n            },\n          },\n        ),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [ExchangerateController],\n  providers: [\n    ExchangeRateService,\n    {\n      provide: AXIOS_INSTANCE_TOKEN,\n      useValue: Axios,\n    },\n    {\n      provide: EXCHANGERATE_PROCESSOR,\n      useClass:\n        configService.get('IS_HEROKU_WORKER') === true\n          ? ExchangeRateProcessor\n          : MockExchangeRateProcessor,\n    },\n  ],\n  exports: [ExchangeRateService],\n})\nexport class ExchangeRateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationTransactionsDto.html":{"url":"classes/PaginationTransactionsDto.html","title":"class - PaginationTransactionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationTransactionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/pagination-transactions.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: [TransactionEntity[], number])\n                    \n                \n                        \n                            \n                                Defined in src/modules/transactions/dto/pagination-transactions.dto.ts:8\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        [TransactionEntity[], number]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PaginationMixin } from 'src/common/dto';\n\nimport { TransactionEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class PaginationTransactionsDto extends PaginationMixin(TransactionEntity) {\n  /**\n   * [description]\n   * @param result\n   * @param count\n   */\n  constructor([result, count]: [TransactionEntity[], number]) {\n    super();\n    Object.assign(this, { result, count });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Length(6)@ApiProperty({example: '123456', maxLength: 6})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/reset-password.dto.ts:15\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ResetPasswordDto extends PickType(CreateUserDto, ['email', 'password']) {\n  /**\n   * [description]\n   */\n  @IsString()\n  @Length(6)\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n/**\n * [description]\n */\nexport class SendResetPasswordDto extends PickType(CreateUserDto, ['email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     string[] | T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[] | T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Injectable, CallHandler, NestInterceptor, ExecutionContext } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport interface Response {\n  data: string[] | T;\n}\n\n/**\n * [description]\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * [description]\n   * @param context\n   * @param next\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectAccountsDto.html":{"url":"classes/SelectAccountsDto.html","title":"class - SelectAccountsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectAccountsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/accounts/dto/select-accounts.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:28\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:23\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindManyOptionsDto } from 'src/common/dto';\n\nimport { AccountEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectAccountsDto extends FindManyOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectCategoriesDto.html":{"url":"classes/SelectCategoriesDto.html","title":"class - SelectCategoriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectCategoriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/dto/select-categories.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:28\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:23\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindManyOptionsDto } from 'src/common/dto';\n\nimport { CategoryEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectCategoriesDto extends FindManyOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectProfileDto.html":{"url":"classes/SelectProfileDto.html","title":"class - SelectProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/select-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:23\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserEntity } from 'src/modules/users/entities';\n\n/**\n * [description]\n */\nexport class SelectProfileDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectTransactionsDto.html":{"url":"classes/SelectTransactionsDto.html","title":"class - SelectTransactionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectTransactionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/select-transactions.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                accounts\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                categories\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                date\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                types\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    where\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        accounts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform( => )@ApiPropertyOptional({type: () => , example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/select-transactions.dto.ts:49\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform( => )@ApiPropertyOptional({type: () => , example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/select-transactions.dto.ts:41\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [Date, Date]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate({each: true})@ArrayMinSize(2)@ArrayMaxSize(2)@Type(undefined)@ApiPropertyOptional({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/select-transactions.dto.ts:33\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        types\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TransactionTypeEnum[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Transform( => )@IsEnum(TransactionTypeEnum, {each: true})@ArrayMaxSize(undefined.length)@ApiPropertyOptional({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/dto/select-transactions.dto.ts:22\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:28\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:23\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        where\n                    \n                \n\n                \n                    \n                        getwhere()\n                    \n                \n                            \n                                \n                                    Defined in src/modules/transactions/dto/select-transactions.dto.ts:54\n                                \n                            \n                    \n                        \n                                [description]\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ArrayMaxSize, ArrayMinSize, IsDate, IsEnum, IsOptional } from 'class-validator';\nimport { Between, Brackets, FindManyOptions, In } from 'typeorm';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Transform, Type } from 'class-transformer';\n\nimport { FindManyOptionsDto } from 'src/common/dto';\n\nimport { TransactionEntity, TransactionTypeEnum } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectTransactionsDto extends FindManyOptionsDto {\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @Transform(({ value }) => [].concat(value))\n  @IsEnum(TransactionTypeEnum, { each: true })\n  @ArrayMaxSize(Object.values(TransactionTypeEnum).length)\n  @ApiPropertyOptional({ example: Object.values(TransactionTypeEnum) })\n  public readonly types?: TransactionTypeEnum[];\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @IsDate({ each: true })\n  @ArrayMinSize(2)\n  @ArrayMaxSize(2)\n  @Type(() => Date)\n  @ApiPropertyOptional({ example: [new Date(), new Date()] })\n  public readonly date?: [Date, Date];\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @Transform(({ value }) => [].concat(value))\n  @ApiPropertyOptional({ type: () => [String], example: ['d2727cf0-8631-48ea-98fd-29d7404b1bca'] })\n  public readonly categories?: string[];\n\n  /**\n   * [description]\n   */\n  @IsOptional()\n  @Transform(({ value }) => [].concat(value))\n  @ApiPropertyOptional({ type: () => [String], example: ['d2727cf0-8631-48ea-98fd-29d7404b1bca'] })\n  public readonly accounts?: string[];\n\n  /**\n   * [description]\n   */\n  public get where(): FindManyOptions['where'] {\n    const { date, types, categories, accounts } = this;\n\n    return new Brackets((qb) => {\n      qb.where(\n        Object.assign(\n          {},\n          date && { date: Between(...date) },\n          types && { type: In(types) },\n          categories?.length && { category: In(categories) },\n          accounts?.length && { account: In(accounts) },\n        ),\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUserDto.html":{"url":"classes/SelectUserDto.html","title":"class - SelectUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindOneOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:23\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindOneOptionsDto } from 'src/common/dto';\nimport { UserEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUserDto extends FindOneOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectUsersDto.html":{"url":"classes/SelectUsersDto.html","title":"class - SelectUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/select-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        FindManyOptionsDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                asc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                desc\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                selection\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        asc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: Order, in which entities should be ordered. For order by relation field use elation.field})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:28\n\n                        \n                    \n\n            \n                \n                    Order, in which entities should be ordered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        desc\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, description: 'If the same fields are specified for sorting in two directions, the priority is given to DESC'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindManyOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindManyOptionsDto:43\n\n                        \n                    \n\n            \n                \n                    If the same fields are specified for sorting in two directions, the priority is given to DESC\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@IsString({each: true})@IsNotEmpty({each: true})@Transform( => )@ApiProperty({type: undefined, example: undefined, description: 'Specifies what columns should be retrieved'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         FindOneOptionsDto\n\n                            \n                        \n                    \n                        \n                                Defined in         FindOneOptionsDto:23\n\n                        \n                    \n\n            \n                \n                    Specifies what columns should be retrieved\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FindManyOptionsDto } from 'src/common/dto';\n\nimport { UserEntity } from '../entities';\n\n/**\n * [description]\n */\nexport class SelectUsersDto extends FindManyOptionsDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SendGridModule.html":{"url":"modules/SendGridModule.html","title":"module - SendGridModule","body":"\n                   \n\n\n\n\n    Modules\n    SendGridModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sendgrid/sendgrid.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncOptionsProvider\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncOptionsProvider(options: SendGridModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:73\n                \n            \n\n\n            \n                \n                    [createAsyncOptionsProvider description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        createAsyncProviders\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAsyncProviders(options: SendGridModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:55\n                \n            \n\n\n            \n                \n                    [createAsyncProviders description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Provider[]\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(options?: SendGridModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:20\n                \n            \n\n\n            \n                \n                    [register description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        registerAsync\n                        \n                    \n                \n            \n            \n                \n                    \n                    registerAsync(options: SendGridModuleAsyncOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.module.ts:37\n                \n            \n\n\n            \n                \n                    [registerAsync description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SendGridModuleAsyncOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        [description]\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        [description]\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { Module, DynamicModule, Provider, Global } from '@nestjs/common';\n\nimport { SENDGRID_MODULE_OPTIONS, SENDGRID_MODULE } from './sendgrid.constants';\nimport { SendGridService } from './sendgrid.service';\nimport {\n  SendGridModuleAsyncOptions,\n  SendGridOptionsFactory,\n  SendGridModuleOptions,\n} from './interfaces';\n\n@Global()\n@Module({})\nexport class SendGridModule {\n  /**\n   * [register description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  static register(options?: SendGridModuleOptions): DynamicModule {\n    return {\n      module: SendGridModule,\n      providers: [\n        { provide: SENDGRID_MODULE, useValue: randomStringGenerator() },\n        { provide: SENDGRID_MODULE_OPTIONS, useValue: options },\n        { provide: SendGridService, useClass: SendGridService },\n      ],\n      exports: [SENDGRID_MODULE, SENDGRID_MODULE_OPTIONS, SendGridService],\n    };\n  }\n\n  /**\n   * [registerAsync description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  public static registerAsync(options: SendGridModuleAsyncOptions): DynamicModule {\n    return {\n      module: SendGridModule,\n      imports: options.imports,\n      providers: [\n        ...this.createAsyncProviders(options),\n        { provide: SENDGRID_MODULE, useValue: randomStringGenerator() },\n        { provide: SendGridService, useClass: SendGridService },\n      ],\n      exports: [SENDGRID_MODULE, SENDGRID_MODULE_OPTIONS, SendGridService],\n    };\n  }\n\n  /**\n   * [createAsyncProviders description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  private static createAsyncProviders(options: SendGridModuleAsyncOptions): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: options.useClass,\n        useClass: options.useClass,\n      },\n    ];\n  }\n\n  /**\n   * [createAsyncOptionsProvider description]\n   * @param  options [description]\n   * @return         [description]\n   */\n  private static createAsyncOptionsProvider(options: SendGridModuleAsyncOptions): Provider {\n    if (options.useFactory) {\n      return {\n        provide: SENDGRID_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n        inject: options.inject || [],\n      };\n    }\n    return {\n      provide: SENDGRID_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: SendGridOptionsFactory) =>\n        optionsFactory.createSendGridOptions(),\n      inject: [options.useExisting || options.useClass],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendGridModuleAsyncOptions.html":{"url":"interfaces/SendGridModuleAsyncOptions.html","title":"interface - SendGridModuleAsyncOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendGridModuleAsyncOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/interfaces/sendgrid-module.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Pick\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            inject\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useExisting\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        inject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inject:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useClass:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useExisting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useExisting:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useFactory:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\nexport interface SendGridModuleOptions {\n  apiKey: string;\n  timeout?: number;\n  substitutionWrappers?: { left: string; right: string };\n  default?: Partial;\n}\n\nexport interface SendGridOptionsFactory {\n  createSendGridOptions(): Promise | SendGridModuleOptions;\n}\n\nexport interface SendGridModuleAsyncOptions extends Pick {\n  useExisting?: Type;\n  useClass?: Type;\n  useFactory?: (...args: any[]) => Promise | SendGridModuleOptions;\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendGridModuleOptions.html":{"url":"interfaces/SendGridModuleOptions.html","title":"interface - SendGridModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendGridModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/interfaces/sendgrid-module.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            substitutionWrappers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:     Partial\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Partial\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        substitutionWrappers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        substitutionWrappers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\nexport interface SendGridModuleOptions {\n  apiKey: string;\n  timeout?: number;\n  substitutionWrappers?: { left: string; right: string };\n  default?: Partial;\n}\n\nexport interface SendGridOptionsFactory {\n  createSendGridOptions(): Promise | SendGridModuleOptions;\n}\n\nexport interface SendGridModuleAsyncOptions extends Pick {\n  useExisting?: Type;\n  useClass?: Type;\n  useFactory?: (...args: any[]) => Promise | SendGridModuleOptions;\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendGridOptionsFactory.html":{"url":"interfaces/SendGridOptionsFactory.html","title":"interface - SendGridOptionsFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendGridOptionsFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/interfaces/sendgrid-module.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createSendGridOptions\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createSendGridOptions\n                        \n                    \n                \n            \n            \n                \ncreateSendGridOptions()\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/interfaces/sendgrid-module.interface.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise | SendGridModuleOptions\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ModuleMetadata } from '@nestjs/common/interfaces';\nimport { Type } from '@nestjs/common';\n\nexport interface SendGridModuleOptions {\n  apiKey: string;\n  timeout?: number;\n  substitutionWrappers?: { left: string; right: string };\n  default?: Partial;\n}\n\nexport interface SendGridOptionsFactory {\n  createSendGridOptions(): Promise | SendGridModuleOptions;\n}\n\nexport interface SendGridModuleAsyncOptions extends Pick {\n  useExisting?: Type;\n  useClass?: Type;\n  useFactory?: (...args: any[]) => Promise | SendGridModuleOptions;\n  inject?: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SendGridService.html":{"url":"injectables/SendGridService.html","title":"injectable - SendGridService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SendGridService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sendgrid/sendgrid.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    MailService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mergeWithDefaultMailData\n                            \n                            \n                                    Public\n                                    Async\n                                sendMail\n                            \n                            \n                                    Public\n                                    Async\n                                sendMultipleMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: SendGridModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/sendgrid/sendgrid.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        SendGridModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        mergeWithDefaultMailData\n                        \n                    \n                \n            \n            \n                \n                    \n                    mergeWithDefaultMailData(data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MailDataRequired\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendMultipleMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMultipleMail(data: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/sendgrid/sendgrid.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(SendGridService.name)\n                    \n                \n                    \n                        \n                                Defined in src/sendgrid/sendgrid.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadGatewayException, Inject, Injectable, Logger } from '@nestjs/common';\nimport { MailDataRequired } from '@sendgrid/helpers/classes/mail';\nimport { ClientResponse } from '@sendgrid/client/src/response';\nimport { MailService } from '@sendgrid/mail';\n\nimport * as deepmerge from 'deepmerge';\n\nimport { SendGridModuleOptions } from './interfaces';\n\nimport { SENDGRID_MODULE_OPTIONS } from './sendgrid.constants';\n\n@Injectable()\nexport class SendGridService extends MailService {\n  private readonly logger = new Logger(SendGridService.name);\n\n  private mergeWithDefaultMailData(data: Partial): MailDataRequired {\n    if (!this.options.default) return data as MailDataRequired;\n    return deepmerge(this.options.default, data);\n  }\n\n  constructor(\n    @Inject(SENDGRID_MODULE_OPTIONS)\n    private readonly options: SendGridModuleOptions,\n  ) {\n    super();\n\n    if (!options.apiKey) throw new Error('SendGrid API Key not found');\n    if (options.timeout) this.setTimeout(options.timeout);\n    if (options.substitutionWrappers)\n      this.setSubstitutionWrappers(\n        options.substitutionWrappers.left,\n        options.substitutionWrappers.right,\n      );\n\n    this.setApiKey(options.apiKey);\n  }\n\n  public async sendMail(\n    data: Partial,\n  ): Promise]> {\n    return this.send(this.mergeWithDefaultMailData(data)).catch(({ response }) => {\n      const [error] = response.body.errors;\n      this.logger.error(error.message);\n      throw new BadGatewayException();\n    });\n  }\n\n  public async sendMultipleMail(\n    data: Partial,\n  ): Promise]> {\n    return this.sendMultiple(this.mergeWithDefaultMailData(data)).catch(({ response }) => {\n      const [error] = response.body.errors;\n      this.logger.error(error.message);\n      throw new BadGatewayException();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendResetPasswordDto.html":{"url":"classes/SendResetPasswordDto.html","title":"class - SendResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/reset-password.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from '../../users/dto';\nimport { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString, Length } from 'class-validator';\n\n/**\n * [description]\n */\nexport class ResetPasswordDto extends PickType(CreateUserDto, ['email', 'password']) {\n  /**\n   * [description]\n   */\n  @IsString()\n  @Length(6)\n  @ApiProperty({ example: '123456', maxLength: 6 })\n  public readonly code: string;\n}\n\n/**\n * [description]\n */\nexport class SendResetPasswordDto extends PickType(CreateUserDto, ['email']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TransactionEntity.html":{"url":"entities/TransactionEntity.html","title":"entity - TransactionEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TransactionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/entities/transaction.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                account\n                            \n                            \n                                    Public\n                                    Readonly\n                                amount\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                amountInAccountCurrency\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                amountInBaseCurrency\n                            \n                            \n                                    Public\n                                    Readonly\n                                category\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                currencyCode\n                            \n                            \n                                    Public\n                                    Readonly\n                                date\n                            \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                    Readonly\n                                owner\n                            \n                            \n                                    Public\n                                    Readonly\n                                type\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        account\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => AccountEntity, nullable: false})@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false, eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:90\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'bigint', nullable: false, transformer: FloatIntColumnTransformer})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:52\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        amountInAccountCurrency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:142\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        amountInBaseCurrency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:136\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => CategoryEntity, nullable: true})@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: true, eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:78\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:119\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currencyCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: CurrencyEnum})@Column({type: 'enum', enum: CurrencyEnum})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:66\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@Column({type: 'timestamptz', default: () => CURRENT_TIMESTAMP, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:108\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 256, nullable: true})@Column({type: 'varchar', length: 256, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:59\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:34\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined, {onDelete: 'CASCADE', nullable: false})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:101\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TransactionTypeEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: TransactionTypeEnum, nullable: false})@Column({type: 'enum', enum: TransactionTypeEnum, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:41\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({readonly: true, type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/transactions/entities/transaction.entity.ts:130\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport {\n  Column,\n  Entity,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { CurrencyEnum } from 'src/common/enums';\nimport { FloatIntColumnTransformer } from 'src/database/transformers';\n\nimport { UserEntity } from 'src/modules/users/entities';\nimport { AccountEntity } from 'src/modules/accounts/entities';\nimport { CategoryEntity } from 'src/modules/categories/entities';\n\nexport enum TransactionTypeEnum {\n  EXPENSE = 'EXPENSE',\n  INCOME = 'INCOME',\n}\n\n/**\n * [description]\n */\n@Entity('transactions')\nexport class TransactionEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: TransactionTypeEnum, nullable: false })\n  @Column({ type: 'enum', enum: TransactionTypeEnum, nullable: false })\n  public readonly type: TransactionTypeEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  @Column({\n    type: 'bigint',\n    nullable: false,\n    transformer: FloatIntColumnTransformer,\n  })\n  public readonly amount: number;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 256, nullable: true })\n  @Column({ type: 'varchar', length: 256, nullable: true })\n  public readonly description: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: CurrencyEnum })\n  @Column({ type: 'enum', enum: CurrencyEnum })\n  public readonly currencyCode: CurrencyEnum;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => CategoryEntity, nullable: true })\n  @ManyToOne(() => CategoryEntity, {\n    onDelete: 'CASCADE',\n    nullable: true,\n    eager: true,\n  })\n  @JoinColumn()\n  public readonly category: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ type: () => AccountEntity, nullable: false })\n  @ManyToOne(() => AccountEntity, {\n    onDelete: 'CASCADE',\n    nullable: false,\n    eager: true,\n  })\n  @JoinColumn()\n  public readonly account: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn()\n  public readonly owner: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  @Column({ type: 'timestamptz', default: () => 'CURRENT_TIMESTAMP', nullable: false })\n  public readonly date: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    readonly: true,\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly amountInBaseCurrency?: number;\n\n  /**\n   * [description]\n   */\n  @ApiProperty()\n  public readonly amountInAccountCurrency?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransactionsController.html":{"url":"controllers/TransactionsController.html","title":"controller - TransactionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransactionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/transactions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transactions\n            \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                createOneExportCSV\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(data: CreateTransactionDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/transactions/transactions.controller.ts:49\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOneExportCSV\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOneExportCSV(rep: FastifyReply, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('export/csv')\n                \n            \n\n            \n                \n                    Defined in src/modules/transactions/transactions.controller.ts:77\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rep\n                                    \n                                            FastifyReply\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: ID, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/transactions/transactions.controller.ts:107\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: SelectTransactionsDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/transactions/transactions.controller.ts:64\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectTransactionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: ID, data: UpdateTransactionDto, owner: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/transactions/transactions.controller.ts:90\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                ID\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    owner\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { plainToInstance } from 'class-transformer';\nimport { FastifyReply } from 'fastify';\nimport {\n  Res,\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Query,\n  Delete,\n  UseGuards,\n  Controller,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n} from '@nestjs/common';\n\nimport { User } from 'src/common/decorators';\nimport { ID } from 'src/common/dto';\n\nimport { UserEntity } from '../users/entities';\nimport { JwtAuthGuard } from '../auth/guards';\n\nimport { CreateTransactionDto, UpdateTransactionDto, SelectTransactionsDto } from './dto';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionEntity } from './entities';\n\n/**\n * [description]\n */\n@ApiBearerAuth()\n@ApiTags('transactions')\n@Controller('transactions')\n@UseGuards(JwtAuthGuard)\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TransactionsController {\n  /**\n   * [description]\n   * @param transactionsService\n   */\n  constructor(private readonly transactionsService: TransactionsService) {}\n\n  /**\n   * [description]\n   * @param data\n   */\n  @Post()\n  public async createOne(\n    @Body() data: CreateTransactionDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.transactionsService.createOne(\n      plainToInstance(CreateTransactionDto, { ...data, owner: { id: owner.id } }),\n      owner,\n    );\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  @Get()\n  public async selectAll(\n    @Query() options: SelectTransactionsDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.transactionsService.selectAllWithBaseBalance(owner, options);\n  }\n\n  /**\n   * [description]\n   * @param rep\n   * @param owner\n   */\n  @Get('export/csv')\n  public async createOneExportCSV(\n    @Res() rep: FastifyReply,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.transactionsService.createOneExportCSV(rep, owner);\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param data\n   */\n  @Patch(':id')\n  public async updateOne(\n    @Param() conditions: ID,\n    @Body() data: UpdateTransactionDto,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.transactionsService.updateOne(\n      { ...conditions, owner: { id: owner.id } },\n      owner,\n      data,\n    );\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   */\n  @Delete(':id')\n  public async deleteOne(\n    @Param() conditions: ID,\n    @User() owner: UserEntity,\n  ): Promise {\n    return this.transactionsService.deleteOne({ ...conditions, owner: { id: owner.id } }, owner);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_providers\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_exports\n\n\n\n\nAccountsModule\n\nAccountsModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nAccountsModule->TransactionsModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nTransactionsModule -->\n\nCategoriesModule->TransactionsModule\n\n\n\n\n\nExchangeRateModule\n\nExchangeRateModule\n\nTransactionsModule -->\n\nExchangeRateModule->TransactionsModule\n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/transactions/transactions.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TransactionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountsModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ExchangeRateModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TransactionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { ExchangeRateModule } from '../exchangerate';\nimport { AccountEntity } from '../accounts/entities';\nimport { CategoriesModule } from '../categories';\nimport { AccountsModule } from '../accounts';\n\nimport { TransactionsController } from './transactions.controller';\nimport { TransactionsService } from './transactions.service';\nimport { TransactionEntity } from './entities';\n\n/**\n * [description]\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TransactionEntity, AccountEntity]),\n    ExchangeRateModule,\n    CategoriesModule,\n    AccountsModule,\n  ],\n  controllers: [TransactionsController],\n  providers: [TransactionsService],\n  exports: [TransactionsService],\n})\nexport class TransactionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/transform.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/common/interceptors/transform.interceptor.ts:22\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Injectable, CallHandler, NestInterceptor, ExecutionContext } from '@nestjs/common';\n\n/**\n * [description]\n */\nexport interface Response {\n  data: string[] | T;\n}\n\n/**\n * [description]\n */\n@Injectable()\nexport class TransformInterceptor implements NestInterceptor> {\n  /**\n   * [description]\n   * @param context\n   * @param next\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDto.html":{"url":"classes/UpdateAccountDto.html","title":"class - UpdateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/accounts/dto/update-account.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAccountDto } from './create-account.dto';\n\n/**\n * [description]\n */\nexport class UpdateAccountDto extends PartialType(CreateAccountDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/categories/dto/update-category.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateCategoryDto } from './create-category.dto';\n\n/**\n * [description]\n */\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEmailDto.html":{"url":"classes/UpdateEmailDto.html","title":"class - UpdateEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends UpdateUserDto {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@MaxLength(64)@ApiProperty({minLength: 8, maxLength: 64, example: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/update-profile.dto.ts:25\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends UpdateUserDto {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/update-profile.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n            \n                Extends\n            \n            \n                        UpdateUserDto\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { MaxLength, MinLength } from 'class-validator';\nimport { UpdateUserDto } from '../../users/dto';\n\n/**\n * [description]\n */\nexport class UpdateProfileDto extends UpdateUserDto {}\n\n/**\n * [description]\n */\nexport class UpdateEmailDto extends PickType(UpdateUserDto, ['email', 'password']) {}\n\n/**\n * [description]\n */\nexport class UpdatePasswordDto extends PickType(UpdateUserDto, ['password']) {\n  /**\n   * [description]\n   */\n  @MinLength(8)\n  @MaxLength(64)\n  @ApiProperty({ minLength: 8, maxLength: 64, example: 'password' })\n  public readonly oldPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTransactionDto.html":{"url":"classes/UpdateTransactionDto.html","title":"class - UpdateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/transactions/dto/update-transaction.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateTransactionDto } from './create-transaction.dto';\n\n/**\n * [description]\n */\nexport class UpdateTransactionDto extends PartialType(CreateTransactionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * [description]\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                baseCurrency\n                            \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                deletedAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                    Readonly\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Readonly\n                                status\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        baseCurrency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CurrencyEnum\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: CurrencyEnum, default: undefined})@Column({type: 'enum', enum: CurrencyEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:58\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:87\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:104\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maxLength: 320, uniqueItems: true})@Column({type: 'varchar', length: 320, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:44\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:30\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column({type: 'varchar', length: 64, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:51\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        refreshTokens\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRefreshTokenEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@OneToMany(undefined,  => user, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:77\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatusEnum\n\n                    \n                \n                \n                    \n                        Default value : UserStatusEnum.ACTIVATED\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: UserStatusEnum, default: undefined})@Column({type: 'enum', enum: UserStatusEnum, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:37\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user.entity.ts:97\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\nimport * as bcrypt from 'bcrypt';\nimport {\n  Column,\n  Entity,\n  OneToMany,\n  BeforeInsert,\n  BeforeUpdate,\n  CreateDateColumn,\n  UpdateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nimport { CurrencyEnum } from 'src/common/enums';\n\nimport { UserRefreshTokenEntity } from './user-refresh-token.entity';\nimport { UserStatusEnum } from '../enums';\n\n/**\n * [description]\n */\n@Entity('users')\nexport class UserEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: UserStatusEnum, default: UserStatusEnum.ACTIVATED })\n  @Column({ type: 'enum', enum: UserStatusEnum, default: UserStatusEnum.ACTIVATED })\n  public readonly status: UserStatusEnum = UserStatusEnum.ACTIVATED;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ maxLength: 320, uniqueItems: true })\n  @Column({ type: 'varchar', length: 320, unique: true })\n  public readonly email: string;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @Column({ type: 'varchar', length: 64, select: false })\n  public password: string;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ enum: CurrencyEnum, default: CurrencyEnum.UAH })\n  @Column({ type: 'enum', enum: CurrencyEnum, default: CurrencyEnum.UAH })\n  public readonly baseCurrency: CurrencyEnum;\n\n  /**\n   * [description]\n   */\n  @BeforeInsert()\n  @BeforeUpdate()\n  public async hashPassword(): Promise {\n    if (!this.password) return;\n    this.password = await bcrypt.hash(this.password, 8);\n  }\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @OneToMany(() => UserRefreshTokenEntity, ({ user }) => user, {\n    nullable: true,\n  })\n  public readonly refreshTokens: UserRefreshTokenEntity[];\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @DeleteDateColumn()\n  public readonly deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserRefreshTokenEntity.html":{"url":"entities/UserRefreshTokenEntity.html","title":"entity - UserRefreshTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserRefreshTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/entities/user-refresh-token.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                createdAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                ppid\n                            \n                            \n                                    Public\n                                    Readonly\n                                updatedAt\n                            \n                            \n                                    Public\n                                    Readonly\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@CreateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:48\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:21\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ppid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ApiHideProperty()@Column({type: 'varchar', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:29\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({readOnly: true})@UpdateDateColumn({type: 'timestamptz', default: () => CURRENT_TIMESTAMP})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:58\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Partial\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@ManyToOne(undefined,  => refreshTokens, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/entities/user-refresh-token.entity.ts:38\n                        \n                    \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  ManyToOne,\n  CreateDateColumn,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  Column,\n} from 'typeorm';\nimport { ApiHideProperty, ApiProperty } from '@nestjs/swagger';\n\nimport { UserEntity } from './user.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity('user_refresh_tokens')\nexport class UserRefreshTokenEntity {\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @PrimaryGeneratedColumn('uuid')\n  public readonly id: string;\n\n  /**\n   * [description]\n   */\n  @Exclude()\n  @ApiHideProperty()\n  @Column({ type: 'varchar', length: 64 })\n  public ppid: string;\n\n  /**\n   * [description]\n   */\n  @ApiHideProperty()\n  @ManyToOne(() => UserEntity, ({ refreshTokens }) => refreshTokens, {\n    onDelete: 'CASCADE',\n  })\n  public readonly user: Partial;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @CreateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly createdAt: Date;\n\n  /**\n   * [description]\n   */\n  @ApiProperty({ readOnly: true })\n  @UpdateDateColumn({\n    type: 'timestamptz',\n    default: () => 'CURRENT_TIMESTAMP',\n  })\n  public readonly updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRefreshTokensService.html":{"url":"injectables/UserRefreshTokensService.html","title":"injectable - UserRefreshTokensService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRefreshTokensService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/user-refresh-tokens.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userRefreshTokenEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                generateAndCreateOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRefreshTokenEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/user-refresh-tokens.service.ts:24\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRefreshTokenEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:54\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:137\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:70\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        generateAndCreateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAndCreateOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:39\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:85\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:100\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/user-refresh-tokens.service.ts:118\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userRefreshTokenEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserRefreshTokenEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/user-refresh-tokens.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport { randomBytes } from 'crypto';\nimport { hash } from 'bcrypt';\nimport {\n  Repository,\n  SaveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserRefreshTokenEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UserRefreshTokensService {\n  /**\n   * [description]\n   * @param userRefreshTokenEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserRefreshTokenEntity)\n    public readonly userRefreshTokenEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async generateAndCreateOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    const refreshIdentifier = randomBytes(16).toString('hex');\n    const refreshHash = await hash(refreshIdentifier, 8);\n    const entity = await this.createOne({ ...entityLike, ppid: refreshHash }, options);\n    return { ...entity, ppid: refreshIdentifier };\n  }\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const entity = this.userRefreshTokenEntityRepository.create(entityLike);\n      return this.userRefreshTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_REFRESH_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(\n    optionsOrConditions?: FindManyOptions,\n  ): SelectQueryBuilder {\n    const metadata = this.userRefreshTokenEntityRepository.metadata;\n    return this.userRefreshTokenEntityRepository\n      .createQueryBuilder(\n        FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n      )\n      .setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    if (options.where) qb.where(options.where);\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKENS_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(instanceToPlain(options))\n      .where(conditions)\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKEN_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userRefreshTokenEntityRepository.merge(mergeIntoEntity, entityLike);\n      return this.userRefreshTokenEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_REFRESH_TOKEN_ALREADY_EXIST);\n      });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(\n    conditions: FindOptionsWhere,\n  ): Promise {\n    return this.userRefreshTokenEntityRepository.manager.transaction(\n      async (transactionalEntityManager) => {\n        const entity = await this.selectOne(conditions);\n        await transactionalEntityManager\n          .delete(UserRefreshTokenEntity, conditions)\n          .then(({ affected }) => {\n            if (!affected) throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKEN_NOT_FOUND);\n          })\n          .catch(() => {\n            throw new NotFoundException(ErrorTypeEnum.USER_REFRESH_TOKEN_NOT_FOUND);\n          });\n        return entity;\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserRefreshTokensService \n\nUserRefreshTokensService \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUserRefreshTokensService  -->\n\nUsersModule->UserRefreshTokensService \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUserRefreshTokensService\n\nUserRefreshTokensService\n\nUsersModule -->\n\nUserRefreshTokensService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            [description]\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserRefreshTokensService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserRefreshTokensService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { TypeOrmModule } from '@nestjs/typeorm';\nimport { Module } from '@nestjs/common';\n\nimport { UserRefreshTokensService, UsersService } from './services';\nimport { UserEntity, UserRefreshTokenEntity } from './entities';\n\n/**\n * [description]\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity, UserRefreshTokenEntity])],\n  providers: [UsersService, UserRefreshTokensService],\n  exports: [UsersService, UserRefreshTokensService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                [description]\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                userEntityRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createOne\n                            \n                            \n                                    Public\n                                    Async\n                                deleteOne\n                            \n                            \n                                    Public\n                                find\n                            \n                            \n                                    Public\n                                    Async\n                                selectAll\n                            \n                            \n                                    Public\n                                    Async\n                                selectOne\n                            \n                            \n                                    Public\n                                    Async\n                                selectOneByRepository\n                            \n                            \n                                    Public\n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userEntityRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            [description]\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userEntityRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:37\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(conditions: FindOptionsWhere)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:156\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(optionsOrConditions?: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:55\n                \n            \n\n\n            \n                \n                     [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    optionsOrConditions\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectQueryBuilder\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectAll(options: FindManyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:88\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                FindManyOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOne(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:117\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        selectOneByRepository\n                        \n                    \n                \n            \n            \n                \n                    \n                    selectOneByRepository(conditions: FindOptionsWhere, options: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:103\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { loadEagerRelations: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(conditions: FindOptionsWhere, entityLike: Partial, options: SaveOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:135\n                \n            \n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    conditions\n                                    \n                                                FindOptionsWhere\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    entityLike\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                            SaveOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        { transaction: false }\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        userEntityRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(UserEntity)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/services/users.service.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { instanceToPlain } from 'class-transformer';\nimport {\n  Repository,\n  SaveOptions,\n  FindOneOptions,\n  FindManyOptions,\n  FindOptionsWhere,\n  FindOptionsUtils,\n  SelectQueryBuilder,\n} from 'typeorm';\n\nimport { ErrorTypeEnum } from 'src/common/enums';\n\nimport { UserEntity } from '../entities';\n\n/**\n * [description]\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * [description]\n   * @param userEntityRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    public readonly userEntityRepository: Repository,\n  ) {}\n\n  /**\n   * [description]\n   * @param entityLike\n   * @param options\n   */\n  public async createOne(\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const entity = this.userEntityRepository.create(entityLike);\n      const { id } = await this.userEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   *  [description]\n   * @param optionsOrConditions\n   */\n  public find(optionsOrConditions?: FindManyOptions): SelectQueryBuilder {\n    const metadata = this.userEntityRepository.metadata;\n    const qb = this.userEntityRepository.createQueryBuilder(\n      FindOptionsUtils.extractFindManyOptionsAlias(optionsOrConditions) || metadata.name,\n    );\n\n    /**\n     * Place for add custom order\n     * qb.addSelect('__custom') and then\n     * order by it from property order from options\n     * @example\n     */\n    /* if (optionsOrConditions.order)\n      optionsOrConditions.order = setFindOrder(qb, optionsOrConditions.order); */\n\n    /**\n     * Place for common relation\n     * @example\n     */\n    /* if (\n      !FindOptionsUtils.isFindManyOptions(optionsOrConditions) ||\n      optionsOrConditions.loadEagerRelations !== false\n    ) {\n      qb.leftJoinAndSelect('Entity.relation_field', 'Entity_relation_field')\n    } */\n\n    return qb.setFindOptions(optionsOrConditions);\n  }\n\n  /**\n   * [description]\n   * @param options\n   */\n  public async selectAll(\n    options: FindManyOptions = { loadEagerRelations: false },\n  ): Promise {\n    const qb = this.find(instanceToPlain(options));\n    if (options.where) qb.where(options.where);\n    return qb.getMany().catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.USERS_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOneByRepository(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.userEntityRepository.findOneOrFail({ ...options, where: conditions }).catch(() => {\n      throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async selectOne(\n    conditions: FindOptionsWhere,\n    options: FindOneOptions = { loadEagerRelations: false },\n  ): Promise {\n    return this.find(instanceToPlain(options))\n      .where(conditions)\n      .getOneOrFail()\n      .catch(() => {\n        throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n      });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param entityLike\n   * @param options\n   */\n  public async updateOne(\n    conditions: FindOptionsWhere,\n    entityLike: Partial,\n    options: SaveOptions = { transaction: false },\n  ): Promise {\n    return this.userEntityRepository.manager.transaction(async () => {\n      const mergeIntoEntity = await this.selectOne(conditions);\n      const entity = this.userEntityRepository.merge(mergeIntoEntity, entityLike);\n      const { id } = await this.userEntityRepository.save(entity, options).catch(() => {\n        throw new ConflictException(ErrorTypeEnum.USER_ALREADY_EXIST);\n      });\n\n      return this.selectOne({ id }, { loadEagerRelations: true });\n    });\n  }\n\n  /**\n   * [description]\n   * @param conditions\n   * @param options\n   */\n  public async deleteOne(conditions: FindOptionsWhere): Promise {\n    return this.userEntityRepository.manager.transaction(async (transactionalEntityManager) => {\n      const entity = await this.selectOne(conditions);\n      await transactionalEntityManager\n        .delete(UserEntity, conditions)\n        .then(({ affected }) => {\n          if (!affected) throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n        })\n        .catch(() => {\n          throw new NotFoundException(ErrorTypeEnum.USER_NOT_FOUND);\n        });\n      return entity;\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/accounts1644744884181.html":{"url":"classes/accounts1644744884181.html","title":"class - accounts1644744884181","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  accounts1644744884181\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1644744884181-accounts.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1644744884181-accounts.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1644744884181-accounts.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nimport { AccountEntity } from 'src/modules/accounts/entities';\n\nconst data: Partial[] = [\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1bca',\n    name: 'Account',\n    balance: 0,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1bcb',\n    name: 'Account 2',\n    balance: 0,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n];\n\nexport class accounts1644744884181 implements MigrationInterface {\n  public async up({ connection }: QueryRunner): Promise {\n    await connection.synchronize();\n    const repository = connection.getRepository(AccountEntity);\n    await repository.save(data).catch((e) => console.error(e));\n  }\n\n  public async down({ connection }: QueryRunner): Promise {\n    await connection.getRepository(AccountEntity).delete(data.map(({ id }) => id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/categories1644767124120.html":{"url":"classes/categories1644767124120.html","title":"class - categories1644767124120","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  categories1644767124120\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1644767124120-categories.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1644767124120-categories.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1644767124120-categories.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nimport { CategoryEntity, CategoryTypeEnum } from 'src/modules/categories/entities';\n\nconst data: Partial[] = [\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1bca',\n    name: 'Expense category',\n    color: 'color',\n    type: CategoryTypeEnum.EXPENSE,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1d54',\n    name: 'Income category',\n    color: 'color',\n    type: CategoryTypeEnum.INCOME,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n];\n\nexport class categories1644767124120 implements MigrationInterface {\n  public async up({ connection }: QueryRunner): Promise {\n    await connection.synchronize();\n    const repository = connection.getRepository(CategoryEntity);\n    await repository.save(data).catch((e) => console.error(e));\n  }\n\n  public async down({ connection }: QueryRunner): Promise {\n    await connection.getRepository(CategoryEntity).delete(data.map(({ id }) => id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n0.5.2 (2022-05-06)\n0.5.1 (2022-05-06)\nBug Fixes\n\ntransactions: float to int transformer (e10d148)\n\n0.5.0 (2022-05-03)\nFeatures\n\nadded all error filter (34e532f)\n\n0.4.0 (2022-04-08)\nFeatures\n\nmodules/transactions: implemented initial csv export (7b47a5f)\n\n0.3.0 (2022-04-07)\nFeatures\n\nimplement refresh token flow (7e62cab)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/dto/find-many-options/find-many-options.dto.ts\n            \n            class\n            FindManyOptionsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/dto/find-one-options/find-one-options.dto.ts\n            \n            class\n            FindOneOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/dto/id/id.dto.ts\n            \n            class\n            ID\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/dto/pagination/pagination.dto.ts\n            \n            function\n            PaginationMixin\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/filters/all-exception.filter.ts\n            \n            class\n            AllExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/filters/http-exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/helpers/dot-notation.helper.ts\n            \n            variable\n            dotNotation\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/number.helper.ts\n            \n            variable\n            floatToInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/query-order.helper.ts\n            \n            variable\n            setFindOrder\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/query-search.helper.ts\n            \n            function\n            querySearch\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/common/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            class\n            user1615673396368\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1615673396368-user.migration.ts\n            \n            variable\n            data\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1644744884181-accounts.ts\n            \n            class\n            accounts1644744884181\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1644744884181-accounts.ts\n            \n            variable\n            data\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1644767124120-categories.ts\n            \n            class\n            categories1644767124120\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1644767124120-categories.ts\n            \n            variable\n            data\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/transformers/float-int-column.transformer.ts\n            \n            variable\n            FloatIntColumnTransformer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/accounts/accounts.controller.ts\n            \n            controller\n            AccountsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/accounts/accounts.service.ts\n            \n            injectable\n            AccountsService\n            \n                84 %\n                (11/13)\n            \n        \n        \n            \n                \n                src/modules/accounts/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/accounts/dto/select-accounts.dto.ts\n            \n            class\n            SelectAccountsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/accounts/dto/update-account.dto.ts\n            \n            class\n            UpdateAccountDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/accounts/entities/account.entity.ts\n            \n            entity\n            AccountEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.constants.ts\n            \n            variable\n            CACHE_AUTH_PREFIX\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                78 %\n                (15/19)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/confirmation-email.dto.ts\n            \n            class\n            ConfirmationEmailDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/create-profile.dto.ts\n            \n            class\n            CreateProfileDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/credentials.dto.ts\n            \n            class\n            CredentialsDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtAccessTokenPayloadDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtRefreshTokenDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtRefreshTokenPayloadDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/jwt-tokens.dto.ts\n            \n            class\n            JwtTokensDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/reset-password.dto.ts\n            \n            class\n            SendResetPasswordDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/select-profile.dto.ts\n            \n            class\n            SelectProfileDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdateEmailDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/modules/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/modules/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/modules/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/categories/dto/select-categories.dto.ts\n            \n            class\n            SelectCategoriesDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/categories/entities/category.entity.ts\n            \n            entity\n            CategoryEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/constants/exchangerate-axios.constants.ts\n            \n            variable\n            AXIOS_INSTANCE_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/constants/exchangerate-cache.constants.ts\n            \n            variable\n            CACHE_EXCHANGERATE_PREFIX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/constants/exchangerate-queue.constants.ts\n            \n            variable\n            EVERY_6TH_HOUR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/constants/exchangerate-queue.constants.ts\n            \n            variable\n            EXCHANGERATE_PROCESSOR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/constants/exchangerate-queue.constants.ts\n            \n            variable\n            EXCHANGERATE_QUEUE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/constants/exchangerate.constants.ts\n            \n            variable\n            EXCHANGERATE_MODULE\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/constants/exchangerate.constants.ts\n            \n            variable\n            EXCHANGERATE_MODULE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/dto/currency.dto.ts\n            \n            class\n            CurrencyRateDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/dto/params-currency.dto.ts\n            \n            class\n            CurrencyBaseParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/exchangerate.controller.ts\n            \n            controller\n            ExchangerateController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/exchangerate.module.ts\n            \n            class\n            MockExchangeRateProcessor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/exchangerate.module.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/exchangerate.module.ts\n            \n            variable\n            ExchangeRateQueueModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/exchangerate.processor.ts\n            \n            class\n            ExchangeRateProcessor\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/exchangerate/exchangerate.service.ts\n            \n            injectable\n            ExchangeRateService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/create-transaction.dto.ts\n            \n            class\n            CreateTransactionDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/pagination-transactions.dto.ts\n            \n            class\n            PaginationTransactionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/select-transactions.dto.ts\n            \n            class\n            SelectTransactionsDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/modules/transactions/dto/update-transaction.dto.ts\n            \n            class\n            UpdateTransactionDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/entities/transaction.entity.ts\n            \n            entity\n            TransactionEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/transactions/transactions.controller.ts\n            \n            controller\n            TransactionsController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/modules/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                73 %\n                (14/19)\n            \n        \n        \n            \n                \n                src/modules/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-user.dto.ts\n            \n            class\n            SelectUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/modules/users/dto/select-users.dto.ts\n            \n            class\n            SelectUsersDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/modules/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user-refresh-token.entity.ts\n            \n            entity\n            UserRefreshTokenEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/entities/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/users/services/user-refresh-tokens.service.ts\n            \n            injectable\n            UserRefreshTokensService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/modules/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/sendgrid/interfaces/sendgrid-module.interface.ts\n            \n            interface\n            SendGridModuleAsyncOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sendgrid/interfaces/sendgrid-module.interface.ts\n            \n            interface\n            SendGridModuleOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sendgrid/interfaces/sendgrid-module.interface.ts\n            \n            interface\n            SendGridOptionsFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.constants.ts\n            \n            variable\n            SENDGRID_MODULE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.constants.ts\n            \n            variable\n            SENDGRID_MODULE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sendgrid/sendgrid.service.ts\n            \n            injectable\n            SendGridService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                test/utils/mock-fastify.util.ts\n            \n            function\n            createRepMock\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            interface\n            CreateMockFileReturn\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            function\n            createMockFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            function\n            createMockFileMeta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/utils/mock-file.util.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/bull : ^0.5.3\n        \n            @nestjs/common : ^8.0.8\n        \n            @nestjs/core : ^8.0.8\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/microservices : ^8.4.1\n        \n            @nestjs/passport : ^8.0.1\n        \n            @nestjs/platform-fastify : ^8.0.8\n        \n            @nestjs/swagger : ^5.1.0\n        \n            @nestjs/terminus : ^8.0.1\n        \n            @nestjs/throttler : ^2.0.0\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            @sendgrid/mail : ^7.6.1\n        \n            axios : ^0.26.1\n        \n            bcrypt : ^5.0.1\n        \n            bull : ^4.8.1\n        \n            cache-manager : ^3.6.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.1\n        \n            cross-env : ^7.0.3\n        \n            csv : ^6.0.5\n        \n            dotenv : ^16.0.0\n        \n            fastify-compress : ^4.0.1\n        \n            fastify-helmet : ^7.0.1\n        \n            fastify-swagger : ^5.1.0\n        \n            flat : ^5.0.2\n        \n            nodemailer : ^6.7.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.3.0\n        \n            typeorm : ^0.3.4\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoryTypeEnum   (src/.../category.entity.ts)\n                        \n                        \n                            ConfigMode   (src/.../config.interface.ts)\n                        \n                        \n                            CreateTransactionType   (src/.../create-transaction.dto.ts)\n                        \n                        \n                            CurrencyEnum   (src/.../currency.enum.ts)\n                        \n                        \n                            ErrorTypeEnum   (src/.../error-type.enum.ts)\n                        \n                        \n                            ExchangeRateProcessorEnum   (src/.../exchangerate-processor.enum.ts)\n                        \n                        \n                            TransactionTypeEnum   (src/.../transaction.entity.ts)\n                        \n                        \n                            UserStatusEnum   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/categories/entities/category.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CategoryTypeEnum\n                    \n                \n                        \n                            \n                                 EXPENSE\n                            \n                        \n                        \n                            \n                                Value : EXPENSE\n                            \n                        \n                        \n                            \n                                 INCOME\n                            \n                        \n                        \n                            \n                                Value : INCOME\n                            \n                        \n            \n        \n\n    src/config/interfaces/config.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfigMode\n                    \n                \n                    \n                        \n                            Type of application operating modes, defined as: poduction, development, test\n\n                        \n                    \n                        \n                            \n                                 production\n                            \n                        \n                        \n                            \n                                Value : production\n                            \n                        \n                        \n                            \n                                 development\n                            \n                        \n                        \n                            \n                                Value : development\n                            \n                        \n                        \n                            \n                                 test\n                            \n                        \n                        \n                            \n                                Value : test\n                            \n                        \n            \n        \n\n    src/modules/transactions/dto/create-transaction.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        CreateTransactionType\n                    \n                \n                        \n                            \n                                 EXPENSE\n                            \n                        \n                        \n                            \n                                 INCOME\n                            \n                        \n            \n        \n\n    src/common/enums/currency.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CurrencyEnum\n                    \n                \n                        \n                            \n                                 UAH\n                            \n                        \n                        \n                            \n                                Value : UAH\n                            \n                        \n                        \n                            \n                                 EUR\n                            \n                        \n                        \n                            \n                                Value : EUR\n                            \n                        \n                        \n                            \n                                 USD\n                            \n                        \n                        \n                            \n                                Value : USD\n                            \n                        \n            \n        \n\n    src/common/enums/error-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ErrorTypeEnum\n                    \n                \n                    \n                        \n                            [description]\n\n                        \n                    \n                        \n                            \n                                 INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                Value : INTERNAL_SERVER_ERROR\n                            \n                        \n                        \n                            \n                                 AUTH_INCORRECT_CREDENTIALS\n                            \n                        \n                        \n                            \n                                Value : AUTH_INCORRECT_CREDENTIALS\n                            \n                        \n                        \n                            \n                                 AUTH_INVALID_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_INVALID_REFRESH_TOKEN\n                            \n                        \n                        \n                            \n                                 AUTH_INVALID_TOKEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_INVALID_TOKEN\n                            \n                        \n                        \n                            \n                                 AUTH_UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                Value : AUTH_UNAUTHORIZED\n                            \n                        \n                        \n                            \n                                 AUTH_FORBIDDEN\n                            \n                        \n                        \n                            \n                                Value : AUTH_FORBIDDEN\n                            \n                        \n                        \n                            \n                                 NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME\n                            \n                        \n                        \n                            \n                                Value : NEW_PASSWORD_AND_OLD_PASSWORD_CANNOT_BE_SAME\n                            \n                        \n                        \n                            \n                                 AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE\n                            \n                        \n                        \n                            \n                                Value : AUTH_INCORRECT_CONFIRMATION_EMAIL_CODE\n                            \n                        \n                        \n                            \n                                 AUTH_PASSWORDS_DO_NOT_MATCH\n                            \n                        \n                        \n                            \n                                Value : AUTH_PASSWORDS_DO_NOT_MATCH\n                            \n                        \n                        \n                            \n                                 USER_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_ALREADY_EXISTS\n                            \n                        \n                        \n                            \n                                 USERS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USERS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKEN_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKENS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 USER_REFRESH_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : USER_REFRESH_TOKEN_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 ACCOUNT_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : ACCOUNT_ALREADY_EXISTS\n                            \n                        \n                        \n                            \n                                 ACCOUNTS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : ACCOUNTS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 ACCOUNT_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : ACCOUNT_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 CATEGORY_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : CATEGORY_ALREADY_EXISTS\n                            \n                        \n                        \n                            \n                                 CATEGORIES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CATEGORIES_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 CATEGORY_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : CATEGORY_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 TRANSACTION_ALREADY_EXIST\n                            \n                        \n                        \n                            \n                                Value : TRANSACTION_ALREADY_EXISTS\n                            \n                        \n                        \n                            \n                                 TRANSACTIONS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : TRANSACTIONS_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 TRANSACTION_NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : TRANSACTION_NOT_FOUND\n                            \n                        \n                        \n                            \n                                 EXCHANGERATE_NOT_FOUND_FROM_CACHE\n                            \n                        \n                        \n                            \n                                Value : EXCHANGERATE_NOT_FOUND_FROM_CACHE\n                            \n                        \n                        \n                            \n                                 EXCHANGERATE_NOT_FOUND_FROM_API\n                            \n                        \n                        \n                            \n                                Value : EXCHANGERATE_NOT_FOUND_FROM_API\n                            \n                        \n            \n        \n\n    src/modules/exchangerate/enums/exchangerate-processor.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ExchangeRateProcessorEnum\n                    \n                \n                        \n                            \n                                 UPDATE_CURRENCY_RATES\n                            \n                        \n                        \n                            \n                                Value : UPDATE_CURRENCY_RATES\n                            \n                        \n            \n        \n\n    src/modules/transactions/entities/transaction.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        TransactionTypeEnum\n                    \n                \n                        \n                            \n                                 EXPENSE\n                            \n                        \n                        \n                            \n                                Value : EXPENSE\n                            \n                        \n                        \n                            \n                                 INCOME\n                            \n                        \n                        \n                            \n                                Value : INCOME\n                            \n                        \n            \n        \n\n    src/modules/users/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatusEnum\n                    \n                \n                        \n                            \n                                 DEACIVATED\n                            \n                        \n                        \n                            \n                                Value : DEACIVATED\n                            \n                        \n                        \n                            \n                                 ACTIVATED\n                            \n                        \n                        \n                            \n                                Value : ACTIVATED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createMockFile   (test/.../mock-file.util.ts)\n                        \n                        \n                            createMockFileMeta   (test/.../mock-file.util.ts)\n                        \n                        \n                            createRepMock   (test/.../mock-fastify.util.ts)\n                        \n                        \n                            PaginationMixin   (src/.../pagination.dto.ts)\n                        \n                        \n                            querySearch   (src/.../query-search.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    [description]\n\n\n                \n            \n        \n    \n    test/utils/mock-file.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createMockFile\n                        \n                    \n                \n            \n            \n                \ncreateMockFile(data?: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateMockFileReturn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createMockFileMeta\n                        \n                    \n                \n            \n            \n                \ncreateMockFileMeta(data?: Partial)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CreateMockFileReturn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    test/utils/mock-fastify.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createRepMock\n                        \n                    \n                \n            \n            \n                \ncreateRepMock(mimetype?: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mimetype\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/dto/pagination/pagination.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PaginationMixin\n                        \n                    \n                \n            \n            \n                \nPaginationMixin(classRef: Type)\n                \n            \n\n\n\n\n            \n                \n                    [description]\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classRef\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/common/helpers/query-search.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        querySearch\n                        \n                    \n                \n            \n            \n                \nquerySearch(field: string, searchAlias: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    searchAlias\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '%:search%'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExchangeRateModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SendGridModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AccountsModule\n\n\n\ncluster_AccountsModule_imports\n\n\n\ncluster_AccountsModule_exports\n\n\n\ncluster_AccountsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_ConfigModule_providers\n\n\n\ncluster_ExchangeRateModule\n\n\n\ncluster_ExchangeRateModule_exports\n\n\n\ncluster_ExchangeRateModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_exports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nExchangeRateModule\n\nExchangeRateModule\n\n\n\nAccountsModule\n\nAccountsModule\n\nAccountsModule -->\n\nExchangeRateModule->AccountsModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nExchangeRateModule->TransactionsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nExchangeRateModule->AppModule\n\n\n\n\n\nExchangeRateService \n\nExchangeRateService \n\nExchangeRateService  -->\n\nExchangeRateModule->ExchangeRateService \n\n\n\n\n\nAccountsService \n\nAccountsService \n\nAccountsService  -->\n\nAccountsModule->AccountsService \n\n\n\nTransactionsModule -->\n\nAccountsModule->TransactionsModule\n\n\n\nAppModule -->\n\nAccountsModule->AppModule\n\n\n\n\n\nAccountsService\n\nAccountsService\n\nAccountsModule -->\n\nAccountsService->AccountsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nTransactionsModule -->\n\nCategoriesModule->TransactionsModule\n\n\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nTransactionsService \n\nTransactionsService \n\nTransactionsService  -->\n\nTransactionsModule->TransactionsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserRefreshTokensService \n\nUserRefreshTokensService \n\nUserRefreshTokensService  -->\n\nUsersModule->UserRefreshTokensService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nSendGridModule\n\nSendGridModule\n\nAuthModule -->\n\nSendGridModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthModule -->\n\nJwtRefreshTokenStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nConfigService\n\nConfigService\n\nConfigModule -->\n\nConfigService->ConfigModule\n\n\n\n\n\nExchangeRateService\n\nExchangeRateService\n\nExchangeRateModule -->\n\nExchangeRateService->ExchangeRateModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\nUserRefreshTokensService\n\nUserRefreshTokensService\n\nUsersModule -->\n\nUserRefreshTokensService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    39 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.5.2\n        \n            Description : Nest.js is based on Fastify and TypeORM setup\n        \n            Homepage : https://github.com/broodd/budgetify-backend\n        \n            Repository : https://github.com/broodd/budgetify-backend.git\n        \n            Author : broodd\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrencyRateApi   (src/.../currency-rate.type.ts)\n                        \n                        \n                            CurrencyRateCache   (src/.../currency-rate.type.ts)\n                        \n                        \n                            CurrencyRateCacheRecord   (src/.../currency-rate.type.ts)\n                        \n                        \n                            CurrencyRateConvert   (src/.../currency-rate-convert.type.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/exchangerate/types/currency-rate.type.ts\n    \n    \n        \n            \n                \n                    \n                    CurrencyRateApi\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CurrencyRateCache\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CurrencyRateCacheRecord\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/modules/exchangerate/types/currency-rate-convert.type.ts\n    \n    \n        \n            \n                \n                    \n                    CurrencyRateConvert\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/user1615673396368.html":{"url":"classes/user1615673396368.html","title":"class - user1615673396368","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  user1615673396368\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1615673396368-user.migration.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1615673396368-user.migration.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(undefined: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1615673396368-user.migration.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nimport { UserEntity } from 'src/modules/users/entities';\n\nconst data: Partial[] = [\n  {\n    id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    email: 'admin@gmail.com',\n    password: '$2b$08$S7ozpKBRFWdaC0WJRZi3wunHwbZZdK4Chx3Ea.2aZTSL0VebkhPO.', // password\n  },\n];\n\nexport class user1615673396368 implements MigrationInterface {\n  public async up({ connection }: QueryRunner): Promise {\n    await connection.synchronize();\n    const repository = connection.getRepository(UserEntity);\n    await repository.save(data).catch((e) => console.error(e));\n  }\n\n  public async down({ connection }: QueryRunner): Promise {\n    await connection.getRepository(UserEntity).delete(data.map(({ id }) => id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AXIOS_INSTANCE_TOKEN   (src/.../exchangerate-axios.constants.ts)\n                        \n                        \n                            CACHE_AUTH_PREFIX   (src/.../auth.constants.ts)\n                        \n                        \n                            CACHE_EXCHANGERATE_PREFIX   (src/.../exchangerate-cache.constants.ts)\n                        \n                        \n                            configService   (test/.../mock-file.util.ts)\n                        \n                        \n                            configService   (src/.../exchangerate.module.ts)\n                        \n                        \n                            data   (src/.../1615673396368-user.migration.ts)\n                        \n                        \n                            data   (src/.../1644744884181-accounts.ts)\n                        \n                        \n                            data   (src/.../1644767124120-categories.ts)\n                        \n                        \n                            dotNotation   (src/.../dot-notation.helper.ts)\n                        \n                        \n                            EVERY_6TH_HOUR   (src/.../exchangerate-queue.constants.ts)\n                        \n                        \n                            EXCHANGERATE_MODULE   (src/.../exchangerate.constants.ts)\n                        \n                        \n                            EXCHANGERATE_MODULE_OPTIONS   (src/.../exchangerate.constants.ts)\n                        \n                        \n                            EXCHANGERATE_PROCESSOR   (src/.../exchangerate-queue.constants.ts)\n                        \n                        \n                            EXCHANGERATE_QUEUE   (src/.../exchangerate-queue.constants.ts)\n                        \n                        \n                            ExchangeRateQueueModule   (src/.../exchangerate.module.ts)\n                        \n                        \n                            FloatIntColumnTransformer   (src/.../float-int-column.transformer.ts)\n                        \n                        \n                            floatToInt   (src/.../number.helper.ts)\n                        \n                        \n                            SENDGRID_MODULE   (src/.../sendgrid.constants.ts)\n                        \n                        \n                            SENDGRID_MODULE_OPTIONS   (src/.../sendgrid.constants.ts)\n                        \n                        \n                            setFindOrder   (src/.../query-order.helper.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/exchangerate/constants/exchangerate-axios.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AXIOS_INSTANCE_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AXIOS_INSTANCE_TOKEN'\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_AUTH_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AUTH:'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/modules/exchangerate/constants/exchangerate-cache.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CACHE_EXCHANGERATE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXCHANGERATE:'\n                    \n                \n\n\n        \n    \n\n    test/utils/mock-file.util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n\n    src/modules/exchangerate/exchangerate.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ExchangeRateQueueModule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : BullModule.registerQueue({\n  defaultJobOptions: {\n    removeOnComplete: true,\n    removeOnFail: true,\n  },\n  name: EXCHANGERATE_QUEUE,\n})\n                    \n                \n\n\n        \n    \n\n    src/database/migrations/1615673396368-user.migration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    email: 'admin@gmail.com',\n    password: '$2b$08$S7ozpKBRFWdaC0WJRZi3wunHwbZZdK4Chx3Ea.2aZTSL0VebkhPO.', // password\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/database/migrations/1644744884181-accounts.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1bca',\n    name: 'Account',\n    balance: 0,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1bcb',\n    name: 'Account 2',\n    balance: 0,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/database/migrations/1644767124120-categories.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Partial[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1bca',\n    name: 'Expense category',\n    color: 'color',\n    type: CategoryTypeEnum.EXPENSE,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n  {\n    id: 'd2727cf0-8631-48ea-98fd-29d7404b1d54',\n    name: 'Income category',\n    color: 'color',\n    type: CategoryTypeEnum.INCOME,\n    owner: {\n      id: '067f2f3e-b936-4029-93d6-b2f58ae4f489',\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/dot-notation.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dotNotation\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  array: string[],\n  initialValue: any = true,\n  initialObject: any = {},\n): any =>\n  array.reduce((result, objectPath) => {\n    const parts = objectPath.split('.');\n    let target = result;\n\n    while (parts.length > 1) {\n      const part = parts.shift();\n      target = target[part] = typeof target[part] === 'object' ? target[part] : {};\n    }\n\n    target[parts[0]] = initialValue;\n    return result;\n  }, initialObject)\n                    \n                \n\n            \n                \n                    Transform array of string dot-notation to object\n['foo.bar', 'foo.other', 'foo.bar.sub'] =>\n{\n foo: {\n   other: true,\n   bar: {\n     sub: true\n   }\n }\n}\n\n                \n            \n\n        \n    \n\n    src/modules/exchangerate/constants/exchangerate-queue.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVERY_6TH_HOUR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0 */6 * * *'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXCHANGERATE_PROCESSOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXCHANGERATE_PROCESSOR'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXCHANGERATE_QUEUE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXCHANGERATE_QUEUE'\n                    \n                \n\n\n        \n    \n\n    src/modules/exchangerate/constants/exchangerate.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXCHANGERATE_MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXCHANGERATE_MODULE'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXCHANGERATE_MODULE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'EXCHANGERATE_MODULE_OPTIONS'\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n    src/database/transformers/float-int-column.transformer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FloatIntColumnTransformer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValueTransformer\n\n                    \n                \n                \n                    \n                        Default value : {\n  to: (value: number): number => value && floatToInt(value),\n  from: (value: number) => value / 100,\n}\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/number.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        floatToInt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value) => parseInt((parseFloat(value.toFixed(2)) * 100).toString())\n                    \n                \n\n\n        \n    \n\n    src/sendgrid/sendgrid.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SENDGRID_MODULE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SENDGRID_MODULE'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SENDGRID_MODULE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SENDGRID_MODULE_OPTIONS'\n                    \n                \n\n\n        \n    \n\n    src/common/helpers/query-order.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setFindOrder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  qb: SelectQueryBuilder,\n  order: FindOptionsOrder,\n): FindOptionsOrder => {\n  Object.entries(order)\n    .filter(([key]) => key.startsWith('__'))\n    .forEach(([key, value]: [string, 'ASC' | 'DESC']) => qb.addOrderBy(key, value, 'NULLS LAST'));\n\n  return Object.keys(order)\n    .filter((key) => !key.startsWith('__'))\n    .reduce((acc, key) => ((acc[key] = order[key]), acc), {});\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: string, ctx: ExecutionContext): UserEntity => {\n  const request = ctx.switchToHttp().getRequest();\n  return data ? request.user && request.user[data] : request.user;\n})\n                    \n                \n\n            \n                \n                    [description]\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
